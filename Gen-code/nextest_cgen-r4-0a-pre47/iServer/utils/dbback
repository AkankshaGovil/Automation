#!/usr/bin/perl 

############################################################################
############################################################################
##
## Program for backing up the iServer database and config files.
##
## Run it as follows: dbback [vhd] -f <config_file>
##
## where <config_file> contains the relevant information for backing up
## the database.
##
## Format of the <config_file>
##
## remaddrs = a.b.c.d & ftp.nextone.com
## username = <userid>
## passwd = <passwd>
## remdir = <full_path_of_where_files_are_to_be_put>
## interval = 
## logfile = <full_pathname_of_logfile>;
############################################################################
############################################################################
##
## Copyright 2002, NexTone Communications, Inc.
##
############################################################################
############################################################################


## GLobal defaults
$ISERVER_ROOT	= "/usr/local/nextone";
$ISERVER_BIN	= "$ISERVER_ROOT/bin";
$ISERVER_ETC	= "$ISERVER_ROOT/etc";
$ISERVER_DB		= "$ISERVER_ROOT/databases";
$ISERVEREXEC	= "$ISERVER_BIN/gis";
$ISERVERCLI		= "$ISERVER_BIN/cli";
$VERSION		= "0.6, 12/18/02";
$SELFID			= `basename $0`; chop $SELFID;
$CFGFILE		= "$SELFID.cfg";
$INFOFILE		= ".dbbackinfo";
$MODULE			= "nextone";
$LASTCDRFILE		= ".dbbackcdrinfo";

## Other variables
$TmpDir			= "/tmp";
$DbPackageName	= "dbpkg.tar";
$CfgPackageName	= "cfgpkg.tar";
$DbPackage		= "$TmpDir/$DbPackageName";
$CfgPackage		= "$TmpDir/$CfgPackageName";
$DOPACK			= "/usr/bin/tar cvf";
$IserverDir		= "$ISERVER_ETC";
$StartDir		= "$ISERVER_ETC";	# typical default
$DBPATH			= "$ISERVER_DB";  	# Dir where database can be picked up
$DBFILES		= "*.gdbm"; 		# All the files in the database
$CFGPATH		= "$ISERVER_BIN";  	# Dir where configuration can be picked up
$CFGFILES		= "*.cfg *.val"; 	# All the files in the database

## Lexical tokens
$T_BACKUP_ALL	= "all";
$T_BACKUP_DB	= "db";
$T_BACKUP_CFG	= "cfg";

$T_DISP_OVERWRITE	= "overwrite";
$T_DISP_ROTATE		= "rotate";

$T_TYPE_ACTIVE	= "active";
$T_TYPE_PASSIVE	= "passive";

$T_PROT_FTP		= "ftp";
$T_PROT_RSYNC	= "rsync";

## Some Initializations
$PROT_TRANS		= $T_PROT_FTP; 	# Default Transfer Protocol
$Start			= 0;			# Start reading relevant section of the config file. 
$ncop			= 3;			# Default number of copies if rotation is used. 
$logging		= 0;			# Logging is off be default



##
## Preliminary
##

use lib "/usr/local/nextone/lib/perl5/site_perl";

if ($ENV{BASE})
{
	use lib "$ENV{BASE}/lib/perl5/site_perl";
}

## Start
use Getopt::Std;
use English;

use Config::Simple;
use Net::FTP;

## Command line options
getopts ("dhvf:r");


if ($opt_h)
{
	print "Help is on the way\n";
	print "Use \"perldoc $SELFID\" to view documentation. \n";
	exit 0;
}

if ($opt_v)
{
	print "$SELFID version: $VERSION \n";
	exit 0;
}

if ($opt_f)
{
	$CFGFILE = $opt_f;
}

if ($opt_r)
{
	$PROT_TRANS = "rsync";
}

$StartDir = `pwd`;
chop $StartDir;

print "$SELFID version: $VERSION \n";
print "Config file is $CFGFILE \n\n";
print "Tranport mechanism is $PROT_TRANS \n";

## Read the config file
ReadConfig ();

$keepRunning = 1;

# install signal handlers
$SIG{TERM} = $SIG{INT} = $SIG{KILL} = \&doExit;
$SIG{HUP} = $SIG{PIPE} = $SIG{USR1} = $SIG{USR2} = 'IGNORE';

if ($opt_d)
{
    # process cdr transfers

    # if there is somebody else already processing, do not proceed
    my @processpids = `pgrep $SELFID`;
    die "Another instance (@processpids) is already running" if (@processpids > 1);

    # read the last processed file
    if ( -f "$StartDir/$LASTCDRFILE" && (stat "$StartDir/$LASTCDRFILE")[7])
    {
        open(FILE, "< $StartDir/$LASTCDRFILE") or die "unable to read $StartDir/$LASTCDRFILE: $!";
        chomp($lastfileseen = <FILE>);
        die "unable to parse $StartDir/$LASTCDRFILE" unless $lastfileseen;
        print "Last processed CDR file: $lastfileseen\n";
        close(FILE);
    }
    else
    {
        print "no last seen cdr file information, will process all cdr files\n";
    }

    $count = 0;
    $oldestFile = $lastfileseen;
  whileloop:
    while ($keepRunning && (my @cdrlist = getFilesOlderThan($oldestFile, '.CDR')))
    {
		## put a LOCK file before the transfer
		unless (putLockFile()) {
			removeLockFile();
			print "Couldn't put a LOCK file. won't backup cdrs. Exiting ...\n";
			last;	
		}

        foreach my $file (@cdrlist)
        {
            $status = transferCDR($file);
            if (! $status)
            {
                next whileloop;
            }
            $oldestFile = $file;
            $count++;

            if (! $keepRunning)
            {
                last;
            }
        }

		removeLockFile();
    }

    print localtime() . ": finished processing all available CDR files ($count)\n\n";
}
else
{
    # process db and cfg backups
    if ( -x $ISERVEREXEC )
    {
        if (!  -x $ISERVERCLI )
        {
	    die "Cannot find iServer CLI!!";	
	}
    }
    else {
	die "Cannot find iServer!!";
    }

    CheckForSuperuser ();

    ReadInfo ();

    ## Adjust sequence numbers;
    $nseqno = $seqno + 1;
    print "Sequence = $nseqno\n";

    if ($T_DISP_ROTATE)
    {
	$revno = $nseqno % $ncop;
    }

    if ($PROT_TRANS eq "rsync")
    {
	if ($logging) { open (FP, ">>$logfile") or warn "Cannot open $logfile $! \n"};
	MakePackage ();
	SyncFiles ();
	if ($logging) { close (FP) };
    }
    else
    {

	MakePackage ();

	DoFTP ();
    }

    GenInfo ();
}

exit 0;


########################################################
########################################################
#### Subroutines start here.
########################################################
########################################################


sub getFilesOlderThan
{
    my ($referenceFile, $ext) = @_;

    opendir(CDR_DIR, $cdrdir) or die "Cannot opendir $cdrdir: $!";

    my %files;  # contains file names hashed by modification times

    my $mtime = 0;
    if (defined($referenceFile))
    {
        $mtime = (stat "$cdrdir/$referenceFile")[9];
    }

    print "will look for files older than: $referenceFile($mtime)\n";

    my @files = grep { /$ext$/ } readdir(CDR_DIR);
    foreach my $file (@files)
    {
        my $mt = (stat "$cdrdir/$file")[9];
        if ((stat _)[7] && # skip zero byte files
            $mt > $mtime)
        {
            $files{$mt} = $file;
            print "found file: $file\n";
        }
    }

    closedir(CDR_DIR);

    my @list = ();
    foreach (sort { $a <=> $b } keys %files)
    {
        push(@list, $files{$_});
    }

    return @list;
}

# return 0 if locking failed, 1 if success
sub putLockFile
{
	my $retval = 1;

	my $hostn = `hostname`;
	chomp($host);

    my $i = 0;
    foreach my $addr (@remaddrs)
    {
        print "FTP to $addr... ";
        my $ftp = Net::FTP->new($addr);
        die "Unable to open FTP to $addr: $@" unless $ftp;
        $ftp->login($userids[$i], $passwds[$i]) or die "Cannot login to $addr with $userids[$i]: $@";
        $ftp->cwd($remdirs[$i]) or die "Cannot cd to dir $remdirs[$i]: $!";
        $ftp->ascii();

        print " ..transferring LOCK.. ";
		open(LK, '-|', "echo $hostn");
        unless ($ftp->put(\*LK, "LOCK"))
        {
            print "LOCK failed: $!\n";
			close(LK);
            $ftp->quit();
            $retval = 0;  # unable to transfer file
        }
		
		close(LK);
        $ftp->quit();
        print "..done\n";
        $i++;
	}

	return $retval;
}

# return 0 if unlocking failed, 1 if success
sub removeLockFile
{
    my ($file) = @_;
	my $retval = 1;

	my $hostn = `hostname`;
	chomp($hostn);

    my $i = 0;
    foreach my $addr (@remaddrs)
    {
        print "FTP to $addr... ";
        my $ftp = Net::FTP->new($addr);
        die "Unable to open FTP to $addr: $@" unless $ftp;
        $ftp->login($userids[$i], $passwds[$i]) or die "Cannot login to $addr with $userids[$i]: $@";
        $ftp->cwd($remdirs[$i]) or die "Cannot cd to dir $remdirs[$i]: $!";
        $ftp->ascii();

        print " ..deleting LOCK.. ";
		# we don't care if there was an error during delete
        $ftp->delete("LOCK");

        $ftp->quit();
        print "..done\n";
        $i++;
	}

	return $retval;
}

# return 0 is file transfer failed, 1 if success
sub transferCDR
{
    my ($file) = @_;

    my $i = 0;
    foreach my $addr (@remaddrs)
    {
        print "FTP to $addr... ";
        my $ftp = Net::FTP->new($addr);
        die "Unable to open FTP to $addr: $@" unless $ftp;
        $ftp->login($userids[$i], $passwds[$i]) or die "Cannot login to $addr with $userids[$i]: $@";
        $ftp->cwd($remdirs[$i]) or die "Cannot cd to dir $remdirs[$i]: $!";
        $ftp->ascii();

        print " ..transferring $cdrdir/$file.. ";
        unless ($ftp->put("$cdrdir/$file", "$file"))
        {
            print "failed: $!\n";
            $ftp->quit();
            return 0;  # unable to transfer file
        }

        $ftp->quit();
        print "..done\n";
        $i++;
    }

    # update the lastseen file
    open (LF, "> $StartDir/$LASTCDRFILE") or die "cannot open $StartDir/$LASTCDRFILE: $!";
    print LF <<cEOF
$file
cEOF
;
    close(LF);

    return 1;
}


sub GenInfo ()
{
	my $curtime = time ();
	my $date = `date`;

	chop $date;

	## Get back to directory.
	chdir $IserverDir or die "Cannot cd to $Iserverdir: $! \n";

	open (IFP, ">$INFOFILE") or die "Cannot open $INFOFILE $! \n";

	print IFP <<eEOF
##
## Generated by $SELFID, $VERSION
## on $date
##
lasttime = $curtime
seqno = $nseqno
eEOF
;
	close IFP;
}



sub ReadInfo ()
{
	my $curtime = time ();
	my $status = 0;

	chdir $IserverDir or die "Cannot cd to $Iserverdir: $! \n";

	if ( ! -f $INFOFILE )
	{
		$status = system ("/usr/bin/touch $INFOFILE");
	}

	open (IFP, $INFOFILE) or die "Cannot open $INFOFILE $! \n";

	while ( <IFP> )
	{
		## Ignore comments
		next if m/^#.*/ ;

		chop;

		if ( m/.*lasttime.*=(.*)/ )
		{
			$lasttime = $1;
			for ($lasttime) 
			{ 
				s/^\s+// ; 
				s/\s+$// ; 
			}
			print "lasttime: $lasttime\n";

			if ($lasttime > $curtime)
			{
				print "Error in backing up. Time not synced.\n";
			}
		}
		if ( m/.*seqno.*=(.*)/ )
		{
			$seqno = $1;
			for ($seqno) 
			{ 
				s/^\s+// ; 
				s/\s+$// ; 
			}
			print "seqno: $seqno\n";
		}
	}

	close IFP;
}


sub MakePackage ()
{

	if ($backup eq $T_BACKUP_ALL)
	{
		PackDB ();
		PackCfg ();
	}

	if ($backup eq $T_BACKUP_DB)
	{
		PackDB ();
	}

	if ($backup eq $T_BACKUP_CFG)
	{
		PackCfg ();
	}
}

sub PackDB ()
{
	my $dbpath = $ISERVER_DB;
	my @files;
	
	## Change directory
	chdir $dbpath or die "$dbpath: $!\n";
	@files = glob("*.gdbm");
	$dbexport = "$ISERVERCLI db export ";
	$DbSaveFile = "$TmpDir/dbsave.$revno";

	## Process the files first

	$status = system ("$dbexport $DbSaveFile");

	if ($status)
	{
		print "Error in exporting database. \n";
	}

	chdir $TmpDir or die "$TmpDir: $! \n";
	$status = system ("$DOPACK $DbPackage dbsave.$revno");
	if ($status)
	{
		print "Error in packing database. \n";
	}

}

sub PackCfg ()
{
	my @files;

	chdir $CFGPATH or die "$CFGPATH: $!\n";
	
	@files = glob ($CFGFILES);

	$status = system ("$DOPACK $CfgPackage @files");

	if ($status)
	{
		print "Error in packing Config.\n";
	}
}


sub DoFTP ()
{
	my $ftp;
	my $addr;
	my $i = 0;
	my $RemoteDbPackage;
	my $RemoteCfgPackage;
	my $DbPut;
	my $CfgPut;

	foreach $addr (@remaddrs)
	{
		## Initialize the connection
		print "FTP to $addr ...";

		$ftp = Net::FTP->new($addr);

		$ftp->login ($userids[$i], $passwds[$i]) or die "Cannot ftp: $@";
		$ftp->cwd ($remdirs[$i]) or die "No directory: $!";
		$ftp->binary ();


		if ($disp eq $T_DISP_OVERWRITE)
		{
			$RemoteDbPackage = $DbPackage;
			$RemoteCfgPackage = $CfgPackage;
		}
		else	## sequence
		{
			## Make up the full name.
			$RemoteDbPackage = $DbPackage . $revno;
			$RemoteCfgPackage = $CfgPackage . $revno;

			## Rename locally, before sending
			rename ($DbPackage, $RemoteDbPackage);
			rename ($CfgPackage, $RemoteCfgPackage);
		}

		$DbPut = $RemoteDbPackage;
		$CfgPut = $RemoteCfgPackage;


		## Put the files on the remote host
		if ($backup eq $T_BACKUP_ALL)
		{
			$ftp->put ($DbPut);
			$ftp->put ($CfgPut);
		}
		if ($backup eq $T_BACKUP_DB)
		{
			$ftp->put ($DbPut);
		}
		if ($backup eq $T_BACKUP_CFG)
		{
			$ftp->put ($CfgPut);
		}


		## End the connection.
		$ftp->quit ();

		print "..done\n";

		$i++;
	}
}

sub ReadConfig ()
{

    my $config = new Config::Simple(filename=>"$StartDir/$CFGFILE", mode=>O_RDONLY);
    die "Unable to read configuration file: $Config::Simple::errstr" unless ($config);

    my %cfghash = $config->param_hash();

    # create the list of remote addresses
    @remaddrs = split(/&/, $cfghash{"$PROT_TRANS.remaddrs"});
    for (@remaddrs)
    {
	s/^\s+// ; 
        s/\s+$// ; 
        print "remaddr: $_\n";
    }

    # create the list of user names
    @userids = split(/&/, $cfghash{"$PROT_TRANS.username"});
    for (@userids)
    {
        s/^\s+// ; 
        s/\s+$// ;
        print "userid: $_\n";
    }

    # create the list of passwords
    @passwds = split(/&/, $cfghash{"$PROT_TRANS.passwd"});
    for (@passwds)
    {
        s/^\s+// ;
        s/\s+$// ;
        print "passwds: $_\n";
    }

    # create the list of remote directories
    @remdirs = split(/&/, $cfghash{"$PROT_TRANS.remdir"});
    for (@remdirs)
    {
        s/^\s+// ;
        s/\s+$// ;
        print "remdirs: $_\n";
    }

    if (defined($cfghash{"$PROT_TRANS.logfile"}))
    {
        $logfile = $cfghash{"$PROT_TRANS.logfile"};
        for ($logfile) 
        { 
            s/^\s+// ; 
            s/\s+$// ; 
        }
        print "logfile: $logfile\n";
        $logging = 1; 	#Logging is switched on 
    }

    if (defined($cfghash{"$PROT_TRANS.disp"}))
    {
        $disp = $cfghash{"$PROT_TRANS.disp"};
        $disp =~ s/^\s+// ; 
        @disparr = split(/\s+/, $disp);
        for (@disparr) 
        { 
            s/^\s+// ; 
            s/\s+$// ; 
        }
        $disp = $disparr[0];
        $ncop = $disparr[1];
        print "disp: $disp\n";
        if ($ncop) 
        { 
            if ($ncop !~ /^[0-9]+$/)
            {
                die "Number of copies is not an integer\n";
            }
            print "ncop: $ncop\n";
        }
    }
	
    if (defined($cfghash{"$PROT_TRANS.backup"}))
    {
        $backup = $cfghash{"$PROT_TRANS.backup"};
        for ($backup) 
        { 
            s/^\s+// ; 
            s/\s+$// ; 
        }
        print "backup: $backup\n";
    }

    if (defined($cfghash{"$PROT_TRANS.type"}))
    {
        $btype = $cfghash{"$PROT_TRANS.type"};
        for ($btype)
        {
            s/^\s+// ;
            s/\s+$// ;
        }
    }

    if (defined($cfghash{"$PROT_TRANS.cdrdir"}))
    {
        $cdrdir = $cfghash{"$PROT_TRANS.cdrdir"};
        for ($cdrdir)
        {
            s/^\s+// ;
            s/\s+$// ;
        }
        print "cdrdir: $cdrdir\n";
    }
}

sub CheckForSuperuser ()
{
	my $logname = $ENV{'LOGNAME'};

	if ($logname ne "root")
	{
		print "You need to be a superuser to run dbback!\n";
		exit 0;
	}
}

sub SyncFiles ()
{
	use File::Rsync;
	$dirpath; 
	@files;
	
	$rsync = File::Rsync->new;
	%RsyncOpt = ('verbose' => 1);
	%RsyncOpt = ( %RsyncOpt, 'archive' => 1);
	%RsyncOpt = ( %RsyncOpt, 'compress' => 1);
	if (($backup eq $T_BACKUP_ALL) || ($backup eq $T_BACKUP_DB))
	{
### Old approach was to rsync the whole directory
### New approach is to do exactly what ftp is doing 
#		$dirpath = $DBPATH;
#		chdir $dirpath or die "$dirpath: $!\n";
#		@files = glob($DBFILES);
#		($#files >= 0)  or die ("No src file $DBFILES to sync in $dirpath: ");
		$srcfile = $DbPackage;
		if ($disp eq $T_DISP_OVERWRITE)
		{
			$dstfile = $DbPackageName;
		}
		else
		{
			$dstfile = ($DbPackageName . $revno);
		}
		%RsyncOpt = ( %RsyncOpt, 'src' => "$srcfile");
	
		foreach $addr (@remaddrs)
		{
			foreach $remdir (@remdirs)
			{
				%RsyncOpt = ( %RsyncOpt, 'dest' => "$addr\:\:$MODULE/$remdir/$dstfile");
		        	if (!($rsync->exec(\%RsyncOpt)) && $logging) 
				{
					$rval = $rsync->status;
					print FP "rsync failed with return status $rval\n";
					$errstr = $rsync->err;
					for ($i = 0; $i <= $#{$errstr}; $i++){print FP "$errstr->[$i]";} 
				}
			}
		}
	}
	if (($backup eq $T_BACKUP_ALL) || ($backup eq $T_BACKUP_CFG))
	{
#		$dirpath = $CFGPATH;
#		chdir $dirpath or die "$dirpath: $!\n";
#		@files = glob($CFGFILES);
#		($#files < 0)  && die ("No src file $CFGFILES to sync in $dirpath: ");
		$srcfile = $CfgPackage;
		if ($disp eq $T_DISP_OVERWRITE)
		{
			$dstfile = $CfgPackageName;
		}
		else
		{
			$dstfile = ($CfgPackageName . $revno);
		}
		%RsyncOpt = ( %RsyncOpt, 'src' => $srcfile);
	
		foreach $addr (@remaddrs)
		{
			foreach $remdir (@remdirs)
			{
				%RsyncOpt = ( %RsyncOpt, 'dest' => "$addr\:\:$MODULE/$remdir/$dstfile");
		        	if (!($rsync->exec(\%RsyncOpt)) && $logging) 
				{
					$rval = $rsync->status;
					print FP "rsync failed with return status $rval\n";
					$errstr = $rsync->err;
					for ($i = 0; $i <= $#{$errstr}; $i++){print FP "$errstr->[$i]";} 
				}
			}
		}
	}
}


# exit signal received
sub doExit
{
    $keepRunning = 0;
}


