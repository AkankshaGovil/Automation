/******************************************************************************

NOTICE:
This document contains information that is proprietary to RADVISION LTD..
No part of this publication may be reproduced in any form whatsoever without
written prior approval by RADVISION LTD..

RADVISION LTD. reserves the right to revise this publication and make changes
without obligation to notify any person of such revisions or changes.

******************************************************************************/

#ifndef TRANSPORT_H
#define TRANSPORT_H

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************
 * Transport module
 * ----------------
 *
 * This is the module that interacts with the network on one hand, while on the other
 * it communicates with the other protocol modules, such as Q.931, H.245, H.450 etc.
 *
 * The lower level can handle TPKT, Annex E types of communications in a transparent
 * way to th eupper layers.
 *
 * The upper level exports and imports (by means of APIs and callbacks) messages to the
 * different modules: Mainly Q.931, H.245 (including tunneled messages) and the
 * rest of the tunneled protocols (Annex M, Annex L).
 *
 **************************************************************************************/
#include <rvinternal.h>
#include <log.h>
#include <pvaltree.h>

/* Handle to the instance of the transport module, generated by init */
DECLARE_OPAQUE(HAPPTRANS);

/* Application Handle to the instance of the transport module, generated by init */
DECLARE_OPAQUE(HAPPATRANS);

/* Stack internal handle to a session */
DECLARE_OPAQUE(HSTRANSSESSION);

/* Application handle to a session, in most cases will be the call handle
   associated with that sesseion */
DECLARE_OPAQUE(HATRANSSESSION);

/* Stack internal host handle, used to identify a specific host connection. */
DECLARE_OPAQUE(HSTRANSHOST);

/* Application host handle. */
DECLARE_OPAQUE(HATRANSHOST);


/* Error codes that can be returned by the module's API and callbacks */
typedef enum {
        cmTransErr = -1,            /* general error */
        cmTransOK,                  /* All is ok */
        cmTransConnectionClosed,    /* The connection no longer active */
        cmTransConnectionBusy,      /* The connection is still sending previous messages */
        cmTransHostNotMultiplexed,  /* A non multiplexed host was used fr more than one session */
        cmTransWouldBlock,          /* not enough buffers for send/receive */
        cmTransIgnoreMessage        /* Ignore the message and stop process it (may be set by H.235) */
} TRANSERR;

/* Types of messages */
typedef enum {
    cmTransQ931Type,
    cmTransH245Type,
    cmTransH450Type,
    cmTransAnnexLType,
    cmTransAnnexMType
} TRANSTYPE;

/* Types of connection */
typedef enum {
    cmTransQ931Conn,
    cmTransH245Conn
} TRANSCONNTYPE;

/* The parameters that each session may have */
typedef enum {
    cmTransParam_host,                          /* What host connection is associated with
                                                   the session (in multiplexing several
                                                   sessions may have the same host connection) */
    cmTransParam_H245Connection,                /* The host used to establish the H.245 connection
                                                    (read only param) */
    cmTransParam_isTunnelingSupported,          /* Do we support tunneling for the session */
    cmTransParam_notEstablishControl,           /* Don't open an H.245 connection */
    cmTransParam_H245Stage,                     /* when is it allowed to send the H.245 address */
    cmTransParam_isParallelTunnelingSupported,  /* Is it allowed to have both FastStart and
                                                   tunneling on the same call */
    cmTransParam_shutdownEmptyConnection,       /* Should the host connection associated with this
                                                   session be closed when it has no more
                                                   sessions attached to it (multiplexing param) */
    cmTransParam_isMultiplexed,                 /* Does the host connection associated with this
                                                   session supports multiplexing */
    cmTransParam_isAnnexESupported              /* Do we support annex E for this session
                                                   (yes/no/maybe)*/
} TRANSSESSIONPARAM;

/* The parameters that each session may have */
typedef enum {
    cmTransHostParam_shutdownEmptyConnection,       /* Should the host connection be closed when
                                                       it has no more sessions attached to
                                                       it (multiplexing param) */
    cmTransHostParam_isMultiplexed,                 /* Does the host connection supports multiplexing */
    cmTransHostParam_remoteAddress,                 /* What is the Q.931 address */
    cmTransHostParam_localAddress,                  /* what is out local address for Q.931 */
    cmTransHostParam_isAnnexESupported              /* Do we support annex E on this host */
} TRANSHOSTPARAM;


typedef struct {
    UINT32 useAnnexE;
    UINT32 t_R1;
    UINT32 t_R2;
    UINT32 n_R1;
    UINT32 t_IMA1;
    UINT32 n_IMA1;
    UINT32 t_DT;
} CMTRANSANNEXEPARAM;


/**************************************************************************************/
/* Session related callbacks that are used by the transport module */
/**************************************************************************************/

typedef
/**************************************************************************************
 * cmEvTransNewSession (CALLBACK)
 *
 * Purpose: To report to the user that a new session was created due to a new
 *          incoming message. This callback is called only when a new message actually
 *          arrives and not when the connection is established.
 *
 * Input:   hsTrans         - The stack handle of the instance.
 *          haTrans         - The application handle of the instance.
 *          hsTransSession  - The stack handle of the session.
 *          pvtNode         - the node of the SETUP message that caused the creation.
 *
 * Output:  haTransSession  - The application handle of the session.
 *          cause           - In case of rejection, the cause (as in RELEASE COMPLETE).
 *          reasonNameId    - In case of rejection, the reason name Id (as in RELEASE COMPLETE).
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewSessionT)(   IN  HAPPTRANS        hsTrans,
                                        IN  HAPPATRANS       haTrans,
                                        IN  HSTRANSSESSION   hsTransSession,
                                        OUT HATRANSSESSION   *haTransSession,
                                        IN  int              pvtNode,
                                        OUT int              *cause,
                                        OUT INTPTR           *reasonNameId);

typedef
/**************************************************************************************
 * cmEvTransConnectionOnSessionClosed (CALLBACK)
 *
 * Purpose: To report to the user that a session was closed, either normally (i.e.
 *          by the other end) or abnormaly due to connection errors.
 *
 * Input:   hsTransSession - The stack handle of the session.
 *          haTransSession - The application handle of the session.
 *          type           - The connection type.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransConnectionOnSessionClosedT)(IN HSTRANSSESSION hsTransSession,
                                                    IN HATRANSSESSION haTransSession,
                                                    IN TRANSCONNTYPE  type);


typedef
/**************************************************************************************
 * cmEvTransSessionNewConnection (CALLBACK)
 *
 * Purpose: To report to the user that a a new connection was opened
 *          for the given session.
 *
 * Input:   hsTransSession - The stack handle of the session.
 *          haTransSession - The application handle of the session.
 *          type           - The type of the connection (Q.931 or H.245)
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransSessionNewConnectionT)( IN HSTRANSSESSION   hsTransSession,
                                                IN HATRANSSESSION   haTransSession,
                                                IN TRANSCONNTYPE    type);


typedef
/**************************************************************************************
 * cmEvTransNewMessage (CALLBACK)
 *
 * Purpose: To report to the user that a new message arrived for a session.
 *
 * Input:   hsTransSession - The stack handle of the session.
 *          haTransSession - The application handle of the session.
 *          type           - The type of the message (Q.931/H.245).
 *          pvtNode        - The pvt node of the decoded message.
 *          hMsgContext    - External context associated with the message.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewMessageT)(IN HSTRANSSESSION hsTransSession,
                                     IN HATRANSSESSION haTransSession,
                                     IN TRANSTYPE      type,
                                     IN int            pvtNode,
                                     IN void           *hMsgContext);

typedef
/**************************************************************************************
 * cmEvTransWrite (CALLBACK)
 *
 * Purpose: To report to the user that new buffers are available and that a send operation
 *          may continue successfully.
 *
 * Input:   hsTransSession - The stack handle of the session which previously was pending.
 *          haTransSession - The application handle of the session.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransWriteT)(IN HSTRANSSESSION hsTransSession,
                                IN HATRANSSESSION haTransSession );


typedef
/**************************************************************************************
 * cmEvTransBadMessage (CALLBACK)
 *
 * Purpose: To report to the user that a message for a session could not be decoded
 *          or encoded.
 *
 * Input:   hsTransSession  - The stack handle of the session.
 *          haTransSession  - The application handle of the session.
 *          type            - The type of the message (Q.931/H.245).
 *          msg             - The encoded message
 *          msgSize         - The encoded message size
 *          outgoing        - TRUE: outgoing message, FALSE-incoming message
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransBadMessageT)(IN HSTRANSSESSION  hsTransSession,
                                     IN HATRANSSESSION  haTransSession,
                                     IN TRANSTYPE       type,
                                     BYTE               *msg,
                                     int                msgSize,
                                     BOOL               outgoing);

typedef
/**************************************************************************************
 * cmEvTransGetMessageNode (CALLBACK)
 *
 * Purpose: To ask the user to give a node id to a skeleton of the requested message.
 *
 * Input:   hPvt    - handle to the pvt we are using
 *          msgType - The type of the message we need.
 *
 * Output:  nodeId  - node id (read-only, do not modify) of the requested message.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransGetMessageNodeT)(IN  HAPPATRANS         hAppATrans,
                                         IN  cmCallQ931MsgType  msgType,
                                         OUT int                *nodeId);

typedef
/**************************************************************************************
 * cmEvTransNewH450Message (CALLBACK)
 *
 * Purpose: To report to the user that an H.450 message was just received.
 *
 * Input:   hsTransSession  - The stack handle of the session.
 *          haTransSession  - The application handle of the session.
 *          msg             - The encoded message
 *          msgSize         - The encoded message size
 *          msgType         - The type of the message from which tunneled msgs came.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewH450MessageT)(IN HSTRANSSESSION  hsTransSession,
                                         IN HATRANSSESSION  haTransSession,
                                         IN int             msg,
                                         IN int             msgSize,
                                         IN int             msgType);
typedef
/**************************************************************************************
 * cmEvTransNewAnnexMMessage (CALLBACK)
 *
 * Purpose: To report to the user that an Annex M message was just received.
 *
 * Input:   hsTransSession      - The stack handle of the session.
 *          haTransSession      - The application handle of the session.
 *          annexMElement       - The node id of the annex M element of tunneling
 *          msgType         - The type of the message from which tunneled msgs came.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewAnnexMMessageT)(IN HSTRANSSESSION    hsTransSession,
                                           IN HATRANSSESSION    haTransSession,
                                           IN int               annexMElement,
                                           IN int               msgType);

typedef
/**************************************************************************************
 * cmEvTransNewAnnexLMessage (CALLBACK)
 *
 * Purpose: To report to the user that an Annex M message was just received.
 *
 * Input:   hsTransSession      - The stack handle of the session.
 *          haTransSession      - The application handle of the session.
 *          annexLElement       - The node id of the annex L element of tunneling
 *          msgType         - The type of the message from which tunneled msgs came.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewAnnexLMessageT)(IN HSTRANSSESSION    hsTransSession,
                                           IN HATRANSSESSION    haTransSession,
                                           IN int               annexLElement,
                                           IN int               msgType);

  typedef  struct
{
    cmEvTransNewSessionT                    cmEvTransNewSession;
    cmEvTransConnectionOnSessionClosedT     cmEvTransConnectionOnSessionClosed;
    cmEvTransSessionNewConnectionT          cmEvTransSessionNewConnection;
    cmEvTransNewMessageT                    cmEvTransNewMessage;
    cmEvTransWriteT                         cmEvTransWrite;
    cmEvTransBadMessageT                    cmEvTransBadMessage;
    cmEvTransGetMessageNodeT                cmEvTransGetMessageNode;
    cmEvTransNewH450MessageT                cmEvTransNewH450Message;
    cmEvTransNewAnnexMMessageT              cmEvTransNewAnnexMMessage;
    cmEvTransNewAnnexLMessageT              cmEvTransNewAnnexLMessage;
} TRANSSESSIONEVENTS;

/**************************************************************************************/
/* Host related callbacks that are used by the transport module */
/**************************************************************************************/

typedef
/**************************************************************************************
 * cmEvTransHostConnected (CALLBACK)
 *
 * Purpose: To report to the user that a new host connection was established., and what
 *          kind of connection it is.
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of host.
 *          type        - The type of the connection (Q.931/H.245).
 *          isOutgoing  - TRUE for outgoing (connected),FALSE for incoming (accepted)
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostConnectedT)(IN HSTRANSHOST   hsTransHost,
                                        IN HATRANSHOST   haTransHost,
                                        IN TRANSCONNTYPE type,
                                        IN BOOL          isOutgoing);


typedef
/**************************************************************************************
 * cmEvTransHostClosed (CALLBACK)
 *
 * Purpose: To report to the user that a host connection was closed, either normally (i.e.
 *          by the other end) or abnormaly due to errors.
 *
 * Input:   hsTransHost  - The stack handle of the host.
 *          haTransHost  - The application handle of the host.
 *          wasConnected - TRUE:  The host was connected before it was closed
 *                         FALSE: The host never reached connection before it was closed.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostClosedT)(   IN HSTRANSHOST hsTransHost,
                                        IN HATRANSHOST haTransHost,
                                        IN BOOL        wasConnected);

typedef
/**************************************************************************************
 * cmEvTransNewRawMessage (CALLBACK)
 *
 * Purpose: To report to the user that an encoded message was just received on the
 *          host connection.
 *
 * Input:   hsTransHost     - The stack handle of the host.
 *          haTransHost     - The application handle of the host.
 *          type            - The type of the message (Q.931, H.245)
 *          pvtNode         - see output params
 *          msg             - The encoded message
 *          msgSize         - The encoded message size
 *          decoded         - see output params
 *          pvtNode         - The root pvt of the message for decoding.
 *
 * Output:  pvtNode         - The pvt tree of the message after decoding.
 *          decoded         - The number of bytes that were decoded
 *          hMsgContext     - external context associated with the message
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransNewRawMessageT)(IN  HSTRANSHOST hsTransHost,
                                        IN  HATRANSHOST haTransHost,
                                        IN  TRANSTYPE   type,
                                        INOUT int       pvtNode,
                                        IN  BYTE        *msg,
                                        IN  int         msgSize,
                                        OUT int         *decoded,
                                        OUT void        **hMsgContext);

typedef
/**************************************************************************************
 * cmEvTransSendRawMessage (CALLBACK)
 *
 * Purpose: To report to the user that a decoded message is about to be sent on
 *          the host connection.
 *
 * Input:   hsTransHost     - The stack handle of the host.
 *          haTransHost     - The application handle of the host.
 *          hsSession       - The stack handle of the session who sent the message.
 *          haSession       - The application handle of the above session.
 *          pvtNode         - The pvt tree of the decoded message.
 *          size            - The maximal size of the given message.
 *
 * Output:  msg             - The message after encoding.
 *          msgSize         - The encoded message size.
 *
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransSendRawMessageT)(   IN  HSTRANSHOST     hsTransHost,
                                            IN  HATRANSHOST     haTransHost,
                                            IN  HSTRANSSESSION  hsSession,
                                            IN  HATRANSSESSION  haSession,
                                            IN  int             pvtNode,
                                            IN  int             size,
                                            OUT BYTE            *msg,
                                            OUT int             *msgSize);
typedef
/**************************************************************************************
 * cmEvTransHostNewMessage (CALLBACK)
 *
 * Purpose: To report to the user that a new message arrived for a host.
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the message (Q.931/H.245).
 *          pvtNode     - The pvt node of the decoded message.
 *          hMsgContext - External context associated with the message.
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostNewMessageT)(IN HSTRANSHOST hsTransHost,
                                         IN HATRANSHOST haTransHost,
                                         IN TRANSTYPE   type,
                                         IN int         pvtNode,
                                         IN void        *hMsgContext);

typedef
/**************************************************************************************
 * cmEvTransHostBadMessage (CALLBACK)
 *
 * Purpose: To report to the user that a message from a host could not be decoded.
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the message (Q.931/H.245).
 *          msg             - The encoded message
 *          msgSize         - The encoded message size
 *          outgoing        - TRUE: outgoing message; FALSE-incoming message
 *          hMsgContext  - An external context associated with the message.
 *
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostBadMessageT)(IN HSTRANSHOST hsTransHost,
                                         IN HATRANSHOST haTransHost,
                                         IN TRANSTYPE   type,
                                         IN BYTE        *msg,
                                         IN int         msgSize,
                                         BOOL           outgoing,
                                         void           *hMsgContext);
typedef
/**************************************************************************************
 * cmEvTransHostMultiplexChangeState (CALLBACK)
 *
 * Purpose: To report to the user that a message from a host could not be decoded.
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the message (Q.931/H.245).
 *          msg             - The encoded message
 *          msgSize         - The encoded message size
 *          outgoing        - TRUE: outgoing message; FALSE-incoming message
 *          hMsgContext  - An external context associated with the message.
 *
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostMultiplexChangeStateT)(IN HSTRANSHOST hsTransHost,
                                                   IN HATRANSHOST haTransHost,
                                                   IN BOOL        multiplexOn);

typedef
/**************************************************************************************
 * cmEvTransHostListen (CALLBACK)
 *
 * Purpose: To report to the user that we are about to listen to TCP connections
 *
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the connection (Q.931/H.245).
 *          address     - Address to listen on
 *
 * returned value
 *          cmTransOK   -  proceed with listen
 *          cmTransIgnoreMessage - do not listen
 **************************************************************************************/
    TRANSERR (*cmEvTransHostListenT)(
            IN HSTRANSHOST          hsTransHost,
            IN HATRANSHOST          haTransHost,
            IN TRANSCONNTYPE        type,
            IN cmTransportAddress   *address);

typedef
/**************************************************************************************
 * cmEvTransHostListening (CALLBACK)
 *
 * Purpose: To report to the user that we are listening on a TCP connections
 *
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the connection (Q.931/H.245).
 *          address     - Address of listening socket
 *          error       - TRUE if listen has failed
 *
 **************************************************************************************/
    TRANSERR (*cmEvTransHostListeningT)(
            IN HSTRANSHOST          hsTransHost,
            IN HATRANSHOST          haTransHost,
            IN TRANSCONNTYPE        type,
            IN cmTransportAddress   *address,
            IN BOOL                 error);

typedef
/**************************************************************************************
 * cmEvTransHostConnecting (CALLBACK)
 *
 * Purpose: To report to the user that we are about to connect to a TCP address
 *
 *
 * Input:   hsTransHost - The stack handle of the host.
 *          haTransHost - The application handle of the host.
 *          type        - The type of the connection (Q.931/H.245).
 *          address     - Address to connct to
 *
 * returned value
 *          cmTransOK   -  proceed with connect
 *          cmTransIgnoreMessage - do not connect
 **************************************************************************************/
    TRANSERR (*cmEvTransHostConnectingT)(
            IN HSTRANSHOST          hsTransHost,
            IN HATRANSHOST          haTransHost,
            IN TRANSCONNTYPE        type,
            IN cmTransportAddress   *address);

typedef  struct
{
    cmEvTransHostConnectedT             cmEvTransHostConnected;
    cmEvTransHostClosedT                cmEvTransHostClosed;
    cmEvTransNewRawMessageT             cmEvTransNewRawMessage;
    cmEvTransSendRawMessageT            cmEvTransSendRawMessage;
    cmEvTransHostNewMessageT            cmEvTransHostNewMessage;
    cmEvTransHostBadMessageT            cmEvTransHostBadMessage;
    cmEvTransHostMultiplexChangeStateT  cmEvTransHostMultiplexChangeState;
    cmEvTransHostListenT                cmEvTransHostListen;
    cmEvTransHostListeningT             cmEvTransHostListening;
    cmEvTransHostConnectingT            cmEvTransHostConnecting;
} TRANSHOSTEVENTS;

/**************************************************************************************
 *                    A P I
 **************************************************************************************/
/**************************************************************************************
 * cmTransInit
 *
 * Purpose: To initialize the entire transport module
 *
 * Input:   hAppATrans              - The application handle to the entire transport module
            cmLogMgr                - The stack instance log manager handle.
 *          hPvt                    - The handle to the stack's PVT.
 *          numOfSessions           - The maximal amount of session elemnts to allocate.
 *          numOfHostConnections    - The maximal amount of host elemnts to allocate.
 *          poolSizeInKB            - maximum amount of storage for messages before send
 *          maxMessageSize          - Maximal size of encoded message.
 *          annexESupported         - Do we support annex E.
 *
 * Output:  None.
 *
 * Returned value: A handle to the entire transport module
 *
 **************************************************************************************/
HAPPTRANS cmTransInit(IN HAPPATRANS hAppATrans,
                      IN RVHLOGMGR  cmLogMgr,
                      IN HPVT       hPvt,
                      IN int        numOfSessions,
                      IN int        numOfHostConnections,
                      IN int        poolSizeInKB,
                      IN int        maxMessageSize,
                      IN BOOL       annexESupported);

/**************************************************************************************
 * cmTransStart
 *
 * Purpose: To start the listenning process on TPKT and/or Annex E
 *
 * Input:   happTrans               - The handle to the instance of the transport module.
 *          TPKTcallSignalingAddr   - The TPKT Q.931 listenning address.
 *          annexEcallSignalingAddr - The annex E address.
 *          localIPAddress          - The local IP address as was received from the config.
 *          cmTransAnnexEParam      - The annex E configuration parameters
 * Output:  None.
 *
 * Returned value: cmTransOK - if success; cmTransErr - otherwise
 *
 **************************************************************************************/
TRANSERR cmTransStart(IN HAPPTRANS happTrans,
                      IN cmTransportAddress *TPKTcallSignalingAddr,
                      IN cmTransportAddress *annexEcallSignalingAddr,
                      IN int                localIPAddress,
                      IN CMTRANSANNEXEPARAM *cmTransAnnexEParam);

/**************************************************************************************
 * cmTransStop
 *
 * Purpose: Stops all the listenning processes that were started by cmTransStart.
 *
 * Input:   hAppTrans - A handle to the entire transport module
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransStop(IN HAPPTRANS hAppTrans);

/**************************************************************************************
 * cmTransEnd
 *
 * Purpose: Shuts down the module and deallocates all its components.
 *
 * Input:   hAppTrans - A handle to the entire transport module
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransEnd(IN HAPPTRANS hAppTrans);

/**************************************************************************************
 * cmTransCreateSession
 *
 * Purpose: Creates a new session element according to its parameters.
 *
 * Input:   hAppTrans       - A handle to the entire transport module
 *          haTranSession   - An application handle to be set to the session, ususally
 *                            would be the call handle that is associated with this session.
 *
 * Output:  hsTranSession   - An handle to the created session element
 *
 **************************************************************************************/
TRANSERR cmTransCreateSession(  IN  HAPPTRANS       hAppTrans,
                                IN  HATRANSSESSION  haTransSession,
                                OUT HSTRANSSESSION  *hsTransSession);



/**************************************************************************************
 * cmTransDrop
 *
 * Purpose: Drop a session (put its state in Idle).
 *
 * Input:   hsTranSession   - An handle to the session element
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransDrop(IN HSTRANSSESSION hsTransSession);


/**************************************************************************************
 * cmTransCloseSession
 *
 * Purpose: Deletes a session element.
 *
 * Input:   hsTranSession   - An handle to the session element
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransCloseSession(IN HSTRANSSESSION hsTransSession);

/**************************************************************************************
 * cmTransCreateHost
 *
 * Purpose: Creates a new host element according to its parameters.
 *
 * Input:   hAppTrans   - A handle to the entire transport module
 *          haTranHost  - An application handle to be set to the host element.
 *
 * Output:  hsTranHost  - An handle to the created host element
 *
 **************************************************************************************/
TRANSERR cmTransCreateHost( IN  HAPPTRANS   hAppTrans,
                            IN  HATRANSHOST haTransHost,
                            OUT HSTRANSHOST *hsTransHost);

/**************************************************************************************
 * cmTransCloseHost
 *
 * Purpose: Deletes a host element. Will notify all its associates sessions.
 *
 * Input:   hsTranHost  - An handle to the host element
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransCloseHost(IN HSTRANSHOST hsTransHost);

/**************************************************************************************
 * cmTransSetSessionParam
 *
 * Purpose: Sets a specific parameter for the given session element.
 *
 * Input:   hsTranSession   - An handle to the session element
 *          param           - The name of the parameter to be set.
 *          value           - An integer or pointer to set as the new parameter.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSetSessionParam(IN HSTRANSSESSION       hsTransSession,
                                IN TRANSSESSIONPARAM    param,
                                IN void                 *value);

/**************************************************************************************
 * cmTransGetSessionParam
 *
 * Purpose: Gets a specific parameter from a given session element.
 *
 * Input:   hsTranSession   - An handle to the session element
 *          param           - The name of the parameter to get.
 *
 * Output:  value           - An integer or pointer which is the value of the parameter.
 *
 **************************************************************************************/
TRANSERR cmTransGetSessionParam(IN  HSTRANSSESSION      hsTransSession,
                                IN  TRANSSESSIONPARAM   param,
                                OUT void                *value);

/**************************************************************************************
 * cmTransSetHostParam
 *
 * Purpose: Sets a specific parameter for the given host element.
 *
 * Input:   hsTranHost  - An handle to the host element
 *          param       - The name of the parameter to be set.
 *          value       - An integer or pointer to set as the new parameter.
 *          force       - In case of multiplexing parameters force the sending of FACILITY
 *                        to the remote with the new parameters.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSetHostParam(   IN HSTRANSHOST          hsTransHost,
                                IN TRANSHOSTPARAM       param,
                                IN void                 *value,
                                IN BOOL                 force);

/**************************************************************************************
 * cmTransGetHostParam
 *
 * Purpose: Gets a specific parameter from a given host element.
 *
 * Input:   hsTranHost  - An handle to the host element
 *          param       - The name of the parameter to get.
 *
 * Output:  value       - An integer or pointer which is the value of the parameter.
 *
 **************************************************************************************/
TRANSERR cmTransGetHostParam(   IN  HSTRANSHOST     hsTransHost,
                                IN  TRANSHOSTPARAM  param,
                                OUT void            *value);

/**************************************************************************************
 * cmTransSetSessionEventHandler
 *
 * Purpose: Sets the event handlers' pointers for session related callbacks
 *
 * Input:   hAppTrans           - A handle to the entire transport module
 *          transSessionEvents  - A structure with the pointers to the callbacks
 *          size                - The size of that structure.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSetSessionEventHandler( IN HAPPTRANS            hAppTrans,
                                        IN TRANSSESSIONEVENTS   *transSessionEvents,
                                        IN int                  size);

/**************************************************************************************
 * cmTransGetSessionEventHandler
 *
 * Purpose: Gets the event handlers' pointers for session related callbacks
 *
 * Input:   hAppTrans           - A handle to the entire transport module
 *          size                - The size of the given structure.
 *
 * Output:  transSessionEvents  - A structure with the pointers to the callbacks
 *
 **************************************************************************************/
TRANSERR cmTransGetSessionEventHandler( IN  HAPPTRANS           hAppTrans,
                                        OUT TRANSSESSIONEVENTS  *transSessionEvents,
                                        IN  int                 size);

/**************************************************************************************
 * cmTransSetHostEventHandler
 *
 * Purpose: Sets the event handlers' pointers for host related callbacks
 *
 * Input:   hAppTrans       - A handle to the entire transport module
 *          transHostEvents - A structure with the pointers to the callbacks
 *          size            - The size of that structure.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSetHostEventHandler(    IN HAPPTRANS        hAppTrans,
                                        IN TRANSHOSTEVENTS  *transHostEvents,
                                        IN int              size);

/**************************************************************************************
 * cmTransGetHostEventHandler
 *
 * Purpose: Gets the event handlers' pointers for host related callbacks
 *
 * Input:   hAppTrans       - A handle to the entire transport module
 *          size            - The size of the given structure.
 *
 * Output:  transHostEvents - A structure with the pointers to the callbacks
 *
 **************************************************************************************/
TRANSERR cmTransGetHostEventHandler(    IN  HAPPTRANS       hAppTrans,
                                        OUT TRANSHOSTEVENTS *transHostEvents,
                                        IN  int             size);

/**************************************************************************************
 * cmTransSetAddress
 *
 * Purpose: sets the address, local and remote, or a host for a given session.
 *          This routine serves both Q.931 (TPKT & annex E) and H.245 connections.
 *
 * Input:   hsTransSession          - the handle to the session.
 *          localAddress            - the local address to connect from or listen on.
 *          remoteAddress           - The remote TPKT address to connect to.
 *          annexEremoteAddress     - The remote annex E address to connect to.
 *          hsTransHost             - An optional host that overrides the given addresses.
 *          type                    - Q.931 TPKT or H.245 addresses.
 *          newMultiplex            -   TRUE:  create new host even if multiplexed
 *                                      FALSE: for multiplex use existing host, if exists.
 *
 * Output:  None.
 *
 * Returned Value:  cmTransErr            - In case that an error occured.
 *                  cmTransNotMultiplexed - The given host is not multiplexed.
 *                  cmTransOK             - In case that the connection is already opened.
 *
 **************************************************************************************/
TRANSERR cmTransSetAddress(IN    HSTRANSSESSION      hsTransSession,
                           INOUT cmTransportAddress  *localAddress,
                           IN    cmTransportAddress  *remoteAddress,
                           IN    cmTransportAddress  *annexEremoteAddress,
                           IN    HSTRANSHOST         hsTransHost,
                           IN    TRANSCONNTYPE       type,
                           IN    BOOL                newMultiplex);

/**************************************************************************************
 * cmTransQ931Connect
 *
 * Purpose: Starts the process of connecting on behalf of the given session.
 *          For regular connection this will initiate a connect procedure,
 *          for multiplexed operation on an existing connection, this will
 *          report that a connection was established.
 *
 * Input:   hsTransSession  - the handle to the session.
 *
 * Output:  None.
 *
 * Returned Value:  cmTransWouldBlock - In case that a connect procedure was instigated but
 *                                      not yet completed.
 *                  cmTransOK         - In case that the connection is already opened.
 *
 **************************************************************************************/
TRANSERR cmTransQ931Connect(IN HSTRANSSESSION   hsTransSession);

/**************************************************************************************
 * cmTransSendMessage
 *
 * Purpose: Encodes and sends a message for the given session thru its host connection.
 *
 * Input:   hsTransSession  - the handle to the session.
 *          pvtNode         - The pvt of the given decoded message.
 *          type            - The type of the message (Q.931/H.245)
 *
 * Output:  None.
 *
 * Returned Value:  cmTransWouldBlock - In case that there aren't enough buffers.
 *                  cmTransOK         - In case that the send was successful.
 *                  cmTrandErr        - In case of fatal error.
 *
 **************************************************************************************/
TRANSERR cmTransSendMessage(IN HSTRANSSESSION   hsTransSession,
                            IN int              pvtNode,
                            IN TRANSTYPE        type);

/**************************************************************************************
 * cmTransSendH450Message
 *
 * Purpose: Sends a tunneled encoded message for the given session thru its host connection.
 *
 * Input:   hsTransSession  - the handle to the session.
 *          buffer          - The encoded tunneled message.
 *          size            - The size of the encoded message.
 *          force           - Should we send a facility immediately with the message.
 *
 * Output:  None.
 *
 * Returned Value:  cmTransWouldBlock - Last message was not sent yet, can't accept new one.
 *                  cmTransOK         - In case that the send was successful.
 *                  cmTrandErr        - In case of fatal error.
 *
 **************************************************************************************/
TRANSERR cmTransSendH450Message(IN HSTRANSSESSION   hsTransSession,
                                IN BYTE             *buffer,
                                IN int              size,
                                IN BOOL             force);

/**************************************************************************************
 * cmTransSetH450Element
 *
 * Purpose: Sets the H.450 elements to send in the next outgoin message.
 *
 * Input:   hsTransSession  - the handle to the session.
 *          elementNodeId   - PVT node ID of the new H.450 element.
 *
 * Output:  None.
 *
 * Returned Value:  cmTransOK         - In case that the send was successful.
 *                  cmTrandErr        - In case of fatal error.
 *
 **************************************************************************************/
TRANSERR cmTransSetH450Element(IN HSTRANSSESSION   hsTransSession,
                               IN int              elementNodeId);

/**************************************************************************************
 * cmTransSendTunneledMessage
 *
 * Purpose: Sends a tunneled encoded message for the given session thru its host connection.
 *
 * Input:   hsTransSession  - the handle to the session.
 *          msg             - The node id of the encoded tunneled message.
 *          type            - The type of the message (AnnexM/AnnexL etc.)
 *          force           - Should we send a facility immediately with the message.
 *
 * Output:  None.
 *
 * Returned Value:  cmTransWouldBlock - Last message was not sent yet, can't accept new one.
 *                  cmTransOK         - In case that the send was successful.
 *                  cmTrandErr        - In case of fatal error.
 *
 **************************************************************************************/
TRANSERR cmTransSendTunneledMessage(IN HSTRANSSESSION   hsTransSession,
                                    IN int              msg,
                                    IN TRANSTYPE        type,
                                    IN BOOL             force);

/**************************************************************************************
 * cmTransEstablishControl
 *
 * Purpose: Starts a H.245 control for a given session after fast start or no control
 *          exists. If tunneling allowed, will use tunneling, else will open a "true"
 *          H.245 connection.
 *
 * Input:   hsTransSession  - the handle to the session.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransEstablishControl(IN HSTRANSSESSION hsTransSession);

/**************************************************************************************
 * cmTransSwitchToSeparate
 *
 * Purpose: Starts a "true" H.245 control connection for a given session.
 *          Can be called when the call is in Fast Start, tunneling or no control.
 *
 * Input:   hsTransSession  - the handle to the session.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSwitchToSeparate(IN HSTRANSSESSION hsTransSession);

/**************************************************************************************
 * cmTransCreateControlSession
 *
 * Purpose: Starts a "true" H.245 control connection, in case that H.245 is allowed.
 *
 * Input:   hsTransSession  -		the handle to the session with which the new H.245
 *									control is to be associated.
 *          addr            -		the address to listen or connect to.
 *          startListen     -		TRUE:  start listenning on the address.
 *									FALSE: try to connect to the addr.
 *			nullControlSession -	TRUE:  Create a dummy control session that is not connected
 *										   to anywhere.
 *									FALSE: Create a normal control session according to 
 *										   the given params.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransCreateControlSession(IN  HSTRANSSESSION     hsTransSession,
                                     IN  cmTransportAddress *addr,
                                     IN  BOOL               startListen,
									 IN  BOOL				nullControlSession);

/**************************************************************************************
 * cmTransCloseControlSession
 *
 * Purpose: closes an H.245 connection for a given session.
 *
 * Input:   hsTransSession  - The handle of the new or old sesson associated with the
 *                            new H.245 control.
 *
 * Output: None.
 *
 * returned value: cmTransErr - in case of error, cmTransOK - otherwise
 *
 **************************************************************************************/
TRANSERR cmTransCloseControlSession(IN  HSTRANSSESSION  hsTransSession);

/**************************************************************************************
 * cmTransTryControlAfterACF
 *
 * Purpose: sees if H245 control session should be opened after ACF.
 *
 * Input:   hsTransSession  - The handle of the new or old sesson associated with the
 *                            new H.245 control.
 *
 * Output: None.
 *
 * returned value: cmTransErr - in case of error, cmTransOK - otherwise
 *
 **************************************************************************************/
TRANSERR cmTransTryControlAfterACF(IN  HSTRANSSESSION  hsTransSession);

/**************************************************************************************
 * cmTransHasControlSession
 *
 * Purpose: reports whether an H.245 connection exists and connected.
 *
 * Input:   hsTransSession  - The handle of the sesson associated with the H.245 control.
 *
 * Output: None.
 *
 * returned value: TRUE - The h245 exists and connected; FALSE - Otherwise
 *
 **************************************************************************************/
BOOL cmTransHasControlSession(IN  HSTRANSSESSION    hsTransSession);

/**************************************************************************************
 * cmTransHasControlSession
 *
 * Purpose: reports whether an H.245 connection exists and connected.
 *
 * Input:   hsTransSession  - The handle of the sesson associated with the H.245 control.
 *
 * Output:  addr            - local address of the H.245 connection
 *
 * returned value: TRUE - The h245 exists and connected; FALSE - Otherwise
 *
 **************************************************************************************/
void cmTransGetGoodAddressForH245(IN    HSTRANSSESSION     hsTransSession,
                                  INOUT cmTransportAddress *addr);

/**************************************************************************************
 * cmTransGetHApp
 *
 * Purpose: gets the hApp element according to the given host
 *
 * Input:   hsTransHost  - The handle of the host.
 *
 * returned value:  hAppATrans   - The user associated handle to the module instance.
 *
 **************************************************************************************/
HAPPATRANS cmTransGetHApp(IN HSTRANSHOST hsTransHost);

/**************************************************************************************
 * cmTransGetHostSocket
 *
 * Purpose: gets the socket allocated for the given host
 *
 * Input:   hsTransHost  - The handle of the host.
 *
 * returned value:  The socket number (-1 of not allocated yet).
 *
 **************************************************************************************/
int cmTransGetHostSocket(IN HSTRANSHOST hsTransHost);



/**************************************************************************************
 * cmTransSetHostApplHandle
 *
 * Purpose: Changes host application handle
 *
 * Input:   hsTransHost  - The handle of the host.
 *          haTransHost  - The new host application handle.
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransSetHostApplHandle(IN  HSTRANSHOST hsTransHost,
                                  IN  HATRANSHOST haTransHost);

/**************************************************************************************
 * cmTransGetHostApplHandle
 *
 * Purpose: Retrieves host application handle
 *
 * Input:   hsTransHost  - The handle of the host.
 *
 * Output:  haTransHost  - The host application handle.
 *
 **************************************************************************************/
TRANSERR cmTransGetHostApplHandle(IN  HSTRANSHOST  hsTransHost,
                                  OUT HATRANSHOST *haTransHost);

/**************************************************************************************
 * cmTransHostSendMessage
 *
 * Purpose: Sends the message on the host
 *
 * Input:   hsTransHost  - The handle of the host.
 *          pvtNode      - The pvtNodeId of the message to be sent
 *
 * Output:  None.
 *
 **************************************************************************************/
TRANSERR cmTransHostSendMessage(IN HSTRANSHOST hsTransHost,
                                IN int         pvtNode);

/**************************************************************************************
 * cmTransGetHostsStats
 *
 * Purpose: retrieves the current and max used number of hosts.
 *
 * Input:   happTrans - The handle to the instance of the transport module.
 *
 * Output:  curSize  - The current amount of hosts used (Q.931 (TPKT & Annex E) + H.245)
 *          maxSize  - The maximum amount used so far of hosts (Q.931 (TPKT & Annex E) + H.245)
 *
 **************************************************************************************/
TRANSERR cmTransGetHostsStats(IN HAPPTRANS hAppTrans, IN int *curSize, IN int *maxSize);

/**************************************************************************************
 * cmTransGetMessagesStats
 *
 * Purpose: retrieves the current and max used number of messages saved before sending.
 *
 * Input:   happTrans - The handle to the instance of the transport module.
 *
 * Output:  curSize  - The current amount of messages in the pool.
 *          maxSize  - The maximum amount that was so far in the pool.
 *
 **************************************************************************************/
TRANSERR cmTransGetMessagesStats(IN HAPPTRANS hAppTrans, IN int *curSize, IN int *maxSize);

/**************************************************************************************
 * cmTransIsParallel
 *
 * Purpose: tells whether we are in parallel (fast start and tunneling) operation.
 *
 * Input:   hsTransSession - the session.
 *
 * Output:  None.
 *
 * Returned Value: TRUE  - we are in parallel operation.
 *                 FALSE - Otherwise.
 **************************************************************************************/
BOOL cmTransIsParallel(IN HSTRANSSESSION hsTransSession);



/*---------------------------------------------------------------------------------------
 * dummyControlSession :
 *
 * defines if the control session is dummy
 *
 * Input:  hsTranSession   - An handle to the created session element
 * Output: none
 * Return: 1 - if control session is DUMMY.
 *         0 - otherwise
 *---------------------------------------------------------------------------------------*/
BOOL dummyControlSession(IN HSTRANSSESSION hsTransSession);


#ifdef __cplusplus
}
#endif


#endif
