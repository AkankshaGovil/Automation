/********************************************************************/
/*                                                                  */
/* Copyright (C) Teja Technologies, Inc. 1998-2003.                 */
/*                                                                  */
/* All Rights Reserved.                                             */
/*                                                                  */
/* This software is the property of Teja Technologies, Inc.  It is  */
/* furnished under a specific licensing agreement.  It may be used  */
/* or copied only under terms of the licensing agreement.           */
/*                                                                  */
/* For more information, contact info@teja.com                      */
/*                                                                  */
/********************************************************************/

#ifndef _TEJA_CLI_H
#define _TEJA_CLI_H

/* L2_TYPE type must be defined to one of the following */
#define L2_POS		1
#define L2_ETH		2

#ifdef INTERFACE
#undef INTERFACE
#endif

/* constansts used with dump and purge functions */
#define INTERFACE 	    1
#define PHYSICAL_PORTS 	2
#define ROUTES 		    3
#define NEXTHOPS 	    4
#define RTM 		    5
#define DBCAST_TABLE 	6
#define L2_FILTER_TABLE 7
#define L2_TABLE 	    8
#define ARP_CACHE 	    9

#define IPV6_ROUTES    10 
#define IPV6_NEXTHOPS  11 
#define RTM6           12
#define NEIGHBOR_CACHE 13
#define IPV6_INTERFACE 14
#define NAT_REDIRECTS  15

/* timeout to be used with TejaCPDP_register_timer() */
#define INIT_TIMEOUT			0
#define EXCEPTION_PKT_TIMEOUT	0
#define NORMAL_TIMEOUT			1

/* max user input string length */
#define USER_INPUT_BUFFER_SIZE 511

#define MAX_NUM_AUTO_LOCAL_ROUTE 100
/* Next Hop Identifier auto allocation limits */
#define NH_ID_AUTO_ALLOC_FIRST	100
#define NH_ID_AUTO_ALLOC_LAST	NH_ID_AUTO_ALLOC_FIRST	+ MAX_NUM_AUTO_LOCAL_ROUTE -1

/* L2 Indext auto allocation limits */
#define L2_INDEX_AUTO_ALLOC_FIRST	100
#define L2_INDEX_AUTO_ALLOC_LAST	L2_INDEX_AUTO_ALLOC_FIRST + MAX_NUM_AUTO_LOCAL_ROUTE -1

/* Request commands */
#define CMD_ADD_INTERFACE		'1'
#define CMD_DELETE_INTERFACE	'2'
#define CMD_CONFIG_PORT			'3'
#define CMD_CONFIG_PORT_STATE   '4'
#define CMD_CONFIG_LINK_STATE	'5'
#define CMD_ADD_ROUTE			'6'
#define CMD_UPDATE_ROUTE		'7'
#define CMD_DELETE_ROUTE		'8'
#define CMD_ADD_NEXTHOP			'9'
#define CMD_UPDATE_NEXTHOP		'a'
#define CMD_DELETE_NEXTHOP		'b'
#define CMD_CHANGE_NEXTHOP_MTU	'c'
#define CMD_CHANGE_NEXTHOP_FLAG 'd'
#define CMD_ADD_STATIC_ARP		'e'
#define CMD_CREATE_ARP          'f'
#define CMD_DELETE_ARP			'g'
#define CMD_GET_SLEEP_TIME      'h'
#define CMD_SET_SLEEP_TIME      'i'
#define CMD_GET_PKTS_TO_DRAIN	'j'
#define CMD_SET_PKTS_TO_DRAIN	'k'
#define CMD_GET_QUEUE_DEPTH     'l'
#define CMD_GET_IPV4_STATS		'm'
#define CMD_DISPLAY_INTERFACE	'n'
#define CMD_DISPLAY_PHY_PORTS	'o'
#define CMD_DISPLAY_ROUTES		'p'
#define CMD_PURGE_ROUTES		'r'
#define CMD_DISPLAY_NEXTHOPS	's'
#define CMD_PURGE_RTM			't'
#define CMD_DISPLAY_DB_TABLE	'u'
#define CMD_DISPLAY_L2_FILTER_TABLE 'v'
#define CMD_DISPLAY_L2_TABLE	'w'
#define CMD_PURGE_L2_TABLE		'x'
#define CMD_DISPLAY_ARP_CACHE   'y'
#define CMD_PURGE_ARP_CACHE		'z'
#define CMD_USER_REQUEST_TO_QUIT  'q'

#define CMD_ADD_NAT_REDIRECT      'A'
#define CMD_DELETE_NAT_REDIRECT   'D'
#define CMD_DISPLAY_NAT_REDIRECTS 'S'
#define CMD_UPDATE_NAT_REDIRECT   'U'
#define CMD_ADD_PORT_DEFAULT      'V'
#define CMD_DELETE_PORT_DEFAULT   'W'
#define CMD_PURGE_NAT_REDIRECTS   'X'
#define CMD_PURGE_PORTS           'Y'
#define CMD_RELATE_DNAT           'Z'


/* reply commands */
#define REPLY_GENERIC			'1'
#define REPLY_IPV4_SLEEP_TIME	'2'
#define REPLY_IPV4_QUEUE_DEPTH	'3'
#define REPLY_IPV4_PACKETS_TO_DRAIN	'4'
#define REPLY_IPV4_STATS		'5'
#define REPLY_ADD_REDIRECT		'A'
#define REPLY_ADD_ARP		    'B'

#define CLI_AGENT_RESERVE_SUCCESS	0
#define CLI_AGENT_IN_USE			1

#define CLI_AGENT_LISTEN_PORT   8010

/* *INDENT-OFF* */  
/* error codes generated by CLI internal functions */ 
typedef enum error_codes 
{ 
	SUCCESS =    0, 
	INTERNAL, 
	INPUT_STRING_TOO_LONG, 
	USER_REQUEST_TO_QUIT,
    MAX_AUTO_ALLOC_NHID_L2_INDEX_REACHED, 
}
error_codes_t;
typedef struct direct_route_exception_pkt_info  direct_route_exception_pkt_info_t;
struct direct_route_exception_pkt_info
{
  teja_uint32_t in_blade_id;
  teja_uint32_t in_port_id;
  teja_uint32_t out_blade_id;
  teja_uint32_t out_port_id;
  teja_uint32_t dest_ip_addr;
  teja_uint32_t pkt_len;
  direct_route_exception_pkt_info_t *p_next_pkt_info;
  int waiting_cfg_reply;
  char pkt_buf[2048];
};

/* CLI context information */ 
typedef struct cli_info 
{
  char top_menu_selection;
  int line_num;
  teja_uint32_t blade_id;
  char request_cmd[USER_INPUT_BUFFER_SIZE];
  char request_string[USER_INPUT_BUFFER_SIZE];
  int agent_tcp_port;
  TejaSocket cli_app_socket;
#ifdef CLI_APP
  int init_done;
  char agent_ip_addr[USER_INPUT_BUFFER_SIZE];
  int init_cmd_index1;
  int init_cmd_index2;
#else /* #ifdef CLI_APP */
  int initialized;
  int num_no_direct_route_exception;
  TejaSocket cli_agent_listen_socket;
  teja_uint32_t last_alloted_nh_id;
  teja_uint32_t last_alloted_l2_index;
  direct_route_exception_pkt_info_t *p_first_pkt_info;
  direct_route_exception_pkt_info_t *p_last_pkt_info;
  HashTable_t direct_route_table;
  TejaCPDP_ctx * ctx;
  int num_pending_transaction;
  teja_uint32_t last_transaction_id;
  int last_request_sent;
  int blade_init_done;
#endif /* #ifdef CLI_APP */
} cli_info_t;

/* *INDENT-ON* */

/* functions in cli.c */
teja_uint32_t top_menu ();
int cli_send_cmd (TejaSocket socket,
		  char *cmd);


/* functions in cli_ui.c */
teja_uint32_t get_blade_id (teja_uint32_t * p_blade_id);
teja_uint32_t get_port_id (teja_uint32_t * p_port_id);
teja_uint32_t get_ip_addr (teja_uint32_t * p_ip_addr);
teja_uint32_t get_ip_mask (teja_uint32_t * p_ip_mask);
teja_uint32_t get_l2_index (teja_uint32_t * p_l2_index);
teja_uint32_t get_nh_id (teja_uint32_t * p_nh_id);
teja_uint32_t get_redirect_info( TejaCPDP_redirect_info_t * p_redirect_info );
teja_uint32_t get_redirect_key( TejaCPDP_redirect_key_t * p_redirect_key );
teja_uint32_t get_mtu (teja_uint32_t * p_mtu);
teja_uint32_t get_vlan_id (teja_uint32_t * p_vlan_id );
teja_uint32_t get_sleep_time_to_set (teja_uint32_t * p_sleep_time);
teja_uint32_t get_pkts_to_drain_to_set (teja_uint32_t * p_pkts_to_drain);
teja_uint32_t get_flags (teja_uint32_t * p_flags);
teja_uint32_t get_perm_flag(teja_uint32_t * p_perm_flag);
teja_uint32_t get_port_state (TejaCPDP_if_state_t * p_port_state);
teja_uint32_t get_link_status (TejaCPDP_link_status_t * p_link_status);
teja_uint32_t get_promiscuous_mode (TejaCPDP_if_state_t * p_promiscuous_mode);
teja_uint32_t get_mac_addr (TejaCPDP_mac_addr_t * p_mac_addr);
teja_uint32_t get_side (char *p_side);
void top_menu_content ();
teja_uint32_t get_user_selection (char *p_user_selection,
				  char *p_choices);

teja_uint32_t get_nexthop_info (TejaCPDP_next_hop_info_t * p_next_hop_info);

/* functions in cli_direct_route_pkts.c */
#ifndef CLI_APP
teja_uint32_t process_direct_route_pkts ();
teja_uint32_t process_pkt_waiting_cfg_reply ();

#endif /*  */

#endif /* _TEJA_CLI_H */
