.TH tst_init 8 06/11/1999 "Version 1.1" "Ternary Search Trie Functions"
.SH NAME
tst_init \- initialize and return pointer to ternary search trie
structure
.SH SYNOPSIS
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B "\-ltst"
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <tst.h>
.LP
.RI "struct tst *tst_init(int" " node_line_width" ");"
.SH DESCRIPTION
tst_init() allocates memory for members of struct tst, and allocates
the first
.I node_line_width
nodes.
.SH "RETURN VALUES"
A NULL pointer is returned by tst_init() if any part of the memory
allocation fails. On success, a pointer to a struct tst is returned.
.SH EXAMPLES
struct tst *tst;

if ( (tst = tst_init(1000)) == NULL)
   exit(1);
.SH "SEE ALSO"
tst_insert(8), tst_search(8), tst_delete(8), tst_cleanup(8)
.SH NOTES
The value for
.I node_line_width
must be chosen very carefully. One node is required for every character
in the tree. If you choose a value that is too small, your application
will spend too much time calling malloc() and your node space will be
too spread out. Too large a value is just a waste of space.
