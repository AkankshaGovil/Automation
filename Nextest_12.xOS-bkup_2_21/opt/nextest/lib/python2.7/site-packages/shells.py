""" Different types of shells (Bash, MSW) that are required by Codenomicon software.
"""
import pexpect 
import os, sys
import unittest
import string
import logging


class LocalShell(pexpect.spawn):
    """Shell for acessing local machine.
    """
    def __init__(self):
        self.log = logging.getLogger('nextestlog')
        self.rarePrompt='It_has_been_raining_for_365_days'

        pexpect.spawn.__init__(self, 'bash')
        self.sendline("PS1='%s'" %self.rarePrompt)
        self.expect(self.rarePrompt)
        self.expect(self.rarePrompt)
        print "CONNECTED" 
        self.log.debug('localShell: connected')

    def __del__(self):
        self.log.debug('localShell: disconnect')
            
    def expectPrompt(self):
        self.expect(self.rarePrompt)

    def runCommand(self, command):
        self.sendline(command)
        self.expect(self.rarePrompt)
        self.log.debug('runCommand: %s returned %s' % (command, self.before))
        return self.before

class MswShell(pexpect.spawn):
    """Shell from host named mymsw in /etc/hosts. This class should ideally be broken into
    a pure shell functions and MSW Class. isServerRunning() etc should be moved into the MSW
    Class.
    """
    def __init__(self):
        self.log = logging.getLogger('nextestlog')
        self.rarePrompt='It_has_been_raining_for_365_days'

        try:
            #calling pexpect initialization but not Shell
            pexpect.spawn.__init__(self, 'ssh root@mymsw')
        except:
            raise EnvironmentError,'can not connect to mymsw'

        self.sendline("bash")
        self.sendline("PS1='%s'" %self.rarePrompt)
        self.expect(self.rarePrompt)
        self.expect(self.rarePrompt)
        #self.expect(self.rarePrompt)
        #self.expect(self.rarePrompt)

        self.corePath = '/var/core'

        self.log.debug('MSWShell: connected')

    def __del__(self):
        self.log.debug('MSWShell: disconnect')

    def expectPrompt(self):
        self.expect(self.rarePrompt)

    def runCommand(self, command):
        res = True
        # Eat the previous prompts, if any
        while(res):
            try:
                # 28962 - Specify the timeout value to reduce execution time
                self.expect(self.rarePrompt,timeout=.5)
                self.log.debug("Ate previous command output %s" %self.before)
            except pexpect.TIMEOUT:
                res = False 
        self.sendline(command)
        self.expect(self.rarePrompt)
        self.log.debug('runCommand: %s returned %s' % (command, self.before))
        return self.before

    def isServerRunning(self):
        serverOutput = self.runCommand('psis')

        return ((serverOutput.find('gis') != -1) and  (serverOutput.find('java') != -1) 
                        and  (serverOutput.find('pm') != -1) and (serverOutput.find('execd') != -1))

    def getCoreFiles(self):
        output = self.runCommand('/bin/ls -1 %s' % self.corePath)
        files = string.split(output, '\r\n')
        
        coreFiles = []
        for entry in files:
            # Comment this out until Liux MSW stops writing core files to bin dir:
            #self.log.debug('CoreWatcher: %s/%s' % (self.corepath, entry))
            if (entry.startswith('core') and not entry.endswith('cfg')) or entry.startswith('gcore'):
                coreFiles.append(entry)

        return coreFiles

    def deleteCoreFiles(self):
        self.runCommand('rm %s/*core*' % self.corePath)

class ShellTest(unittest.TestCase):
    """
    Unittest class for testing Shell class.
    """
    def test_1(self):
        """
        check runCommand()
        """
        localShell = LocalShell()
        output = localShell.runCommand('ls -1 /')
        self.assertNotEqual(output.find('tmp'), -1)

class MswShellTest(unittest.TestCase):
    """
    Unittest class for testing MswShell class.
    """
    def test_1(self):
        """
        check runCommand()
        """
        msw = MswShell()
        output = msw.runCommand('ls -1 /')
        self.assertNotEqual(output.find('tmp'), -1)

    def test_2(self):
        """
        check isServerRunning()
        """
        msw = MswShell()
        self.assertEqual(msw.isServerRunning(), True)

    def test_3(self):
        """
        check deleteCoreFiles and hetCoreFiles()
        """
        msw = MswShell()
        output = msw.runCommand('echo \'\' > %s/core.01' %msw.corePath)
        output = msw.runCommand('echo \'\' > %s/core.02' %msw.corePath)
        coreFiles = msw.getCoreFiles()
        coreFiles = msw.deleteCoreFiles()
        coreFiles = msw.getCoreFiles()

if __name__ == '__main__':
    unittest.main()


