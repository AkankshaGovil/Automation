import os
import sys
import logging
from session import *
from nxConfigInterface import MswConfig
from time import sleep

class RestoreConfig:
  def __init__(self,iServerVersion,ipaddr):
    name = 'root'
    self.login = name + '@' + ipaddr

    # Default Storage of Snapshots at GEN and MSX.
    self.default_snapshot = '/tmp/default_snapshot_%s.txt' %(iServerVersion)
    self.latest_snapshot = '/tmp/latest_snapshot.txt'

    # SSH Session Connect
    self.mswSession = SSH([self.login])
    self.mswConf = MswConfig(ipaddr)

    # Connect to logging
    self.log = logging.getLogger('nextestlog')
    
  def _getFileLatestSnapshot(self, latest_snap):
    '''
     Get File latest_snapshot.txt from MSX after redirecting 
     the output of nxconfig.pl -S.
    '''
    cmd = 'rm -f %s;' %(latest_snap)
    os.system(cmd)
    cmd = '>%s;nxconfig.pl -S |grep "^gis"|grep -v "internalifs"|awk \'{for (i=3; i<=NF; i++) if (i==3) printf $i"=";else if (i==NF) printf $i;else printf $i " ";print""}\'|sort> %s;' %(latest_snap,latest_snap)
    self.mswSession.assertCommand(cmd, timeout=60)
    cmd = 'scp -q %s:%s %s;' %(self.login, latest_snap, latest_snap)
    os.system(cmd)

    self.log.info( "Received %s on GEN machine"%(latest_snap))
    sleep(2)

  def _getFileDefaultSnapshot(self, default_snapshot):
    '''
     Get File default_configuration_Version.txt from MSX after redirecting 
     the output of nxconfig.pl -S and parsing the each parameter using nxconfig.pl -s 
     to get default values.Parameter name and value will be "=" separated
    '''
    # Check if default configuration file already present for same version
    if self._isFileExist(self.default_snapshot):
      self.log.info( "Default configuration file %s is already present"%(default_snapshot))
    else:
      cmd = 'nxconfig.pl -S |grep "^gis"|grep -v "internalifs"|sort> nxconfig_param.txt;'
      cmd = cmd + '>%s;for i in `awk \'{print $3}\' nxconfig_param.txt`; do echo "$i=`nxconfig.pl -s $i|grep \\"Attr. Default\\"|awk -F:\\  \'{print $2}\'`" >>%s; done;' %(default_snapshot, default_snapshot)
      self.mswSession.assertCommand(cmd, timeout=700)

      cmd = 'scp -q %s:%s %s;' %(self.login, default_snapshot, default_snapshot)
      os.system(cmd)
      self.log.info( "Received %s on GEN machine"%(default_snapshot))
      sleep(100)

  def _isFileExist(self, file):
    if os.path.exists(file):
      self.log.info(" %s exists."%(file))
      return True
    return False

  def _storeFileInList(self, file):
    f = open(file)
    listData = f.read().split('\n')
    f.close()
    listData.pop()
    self.log.info( "Stored %s in list data structure" %(file))
    return listData

  def _updatedDefaultValue(self, defaultvalue):
    d1=defaultvalue.strip(' ').strip('\r')
    if (defaultvalue == 'cdrformat=NULL'):
       d1='cdrformat=text'
    return d1

  def _diffNxConfigParameters(self, list_defaultSnap, list_latestSnap):
    '''
     This function takes inputs as two lists which is the default configuration of
     nxConfig.pl -S and the latest snapshot of nxconfig.pl -S and return the the parameters and its
     original default values in the form of a dictionary.
    '''
    dict_diffParams = {}
    
    for d in list_defaultSnap:
      d = self._updatedDefaultValue(d)
      if d not in list_latestSnap:
        # Split each row into key,value pair
        d_split = d.split('=')
        param = d_split[0]
        if (param == 'server-type'):
            continue
        if (d == '%s=NULL'%param) or  (d == '%s='%param):
            match = 'false'
            for l in list_latestSnap:
                l_split = l.split('=')
                if param == l_split[0] and ((l == '%s=NULL'%param) or  (l == '%s='%param)):
                    match = 'true'
                    break
            if match == 'true':
                continue
            else:
                if (len(d_split) == 2):
                   value = d_split[1]
                else:
                   value = ''
        else:
            if (len(d_split) == 2):
                value = d_split[1]
            else:
                value = ''
        self.log.info( "Parameter %s differs from its default value, Going to set its value as %s"%(param,value))
        dict_diffParams[param] = value

    self.log.info( " Stored non-matching parameters into dictionary with key as ParameterNames and value as their DefaultValues")

    return dict_diffParams

  def restoreConfig(self):
    '''
    This restores the values of the parameters to its default value.
    The values of the parameters which are to be changed are found by comparing
    default_snapshot.txt and latest_snapshot.txt, and the values are updated from default_snapshot.txt
    '''
    #Bring the latest snapshot of Global Configuration to GEN machine
    self._getFileLatestSnapshot(self.latest_snapshot)

    #Bring the default snapshot of Global Configuration to GEN machine
    self._getFileDefaultSnapshot(self.default_snapshot)

    #Store Default Global Configuration in list or exit if file not found.
    if self._isFileExist(self.default_snapshot):
      list_defaultSnap = self._storeFileInList(self.default_snapshot)
    else:
      self.log.error( " %s doesn't exist" %(self.default_snapshot))
      return

    #Store Latest Snapshot of Global Configuration or exit if file not found.
    if self._isFileExist(self.latest_snapshot):
      list_latestSnap = self._storeFileInList(self.latest_snapshot)
    else:
      self.log.error(" %s doesn't exist" %(self.latest_snapshot))
      return
  
    # Parameters which are different in latest snapshot from default configuration, and
    # Store the parameters with their default configuration in a dictionary.
    paramNameDict = self._diffNxConfigParameters(list_defaultSnap, list_latestSnap)
    
    # Reverse the (key,value) pair of paramNameMap datastructure in nxConfigInterface.MSWConfig class.
    reverseParamNameMap = {}
    for k, v in self.mswConf.paramNameMap.iteritems():
      reverseParamNameMap[v] = k

    # Loop over each parameter which are to be changed to default value
    # and change their value to default.
    for iter in paramNameDict.iteritems():
      defVal = iter[1]

      try:
        nexParamName = reverseParamNameMap[iter[0]]
      except:
        self.log.error (" Parameter %s Not Found in nxConfigInterface file. " %(iter[0]))
        continue
      try:
        if (iter[0] == 'cdrevents'):
           self.mswConf.setMSWConfig(self.mswSession, 'CdrLogHunt', 'False')
           self.mswConf.setMSWConfig(self.mswSession, 'CdrLogEnd2', 'False')
           self.mswConf.setMSWConfig(self.mswSession, 'CdrLogStart1', 'False')
           self.mswConf.setMSWConfig(self.mswSession, 'CdrLogStart2', 'False')
        else:
           self.mswConf.setMSWConfig(self.mswSession, nexParamName, defVal)
        self.log.info(" Parameter %s Changed to default value." %(iter[0]))
      except:
        self.log.error ("Global configuration restore failed for parameter %s, continue to restore other parameters."%(iter[0]))
    self.log.info(" Done Changing Parameter Values to Default.")

  def __del__(self):
    self.mswSession.disconnect()

if __name__ == '__main__':
  server = RestoreConfig('8.1','10.216.85.10')
  server.restoreConfig()
