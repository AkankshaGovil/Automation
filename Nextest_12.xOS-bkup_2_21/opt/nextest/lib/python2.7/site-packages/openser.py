import pexpect,logging,time,os,commands
from session import *
#from session import SessionException
CTRL_C = '\x03'

class openSerProxy(object):

    def __init__(self,ipAddr,domain,auth):
        self.ip = ipAddr
	self.domain = domain
        self.confPath = '/opt/nextest/etc/openser/'
        #self.cmd = 'openser -f %s -n 1 -l %s' %(self.confFile,self.ip)
        self.cmd = 'sudo /opt/nextest/bin/openser'
        self.log = logging.getLogger('nextestlog')
        self.log.debug("Openser proxy init called")
        self.spawnProc = None
        self.allauthConfFile = self.confPath + 'openser-allauth.cfg'
        self.regauthConfFile = self.confPath + 'openser-regauth.cfg'
        self.noauthConfFile = self.confPath + 'openser-noauth.cfg'
	#self.auth = auth    
        self.confFile = self.confPath + 'openser.cfg'
        self.auth_setting=auth
        if((auth == "allauth") or (auth=="AllAuth") or (auth =="ALLAUTH")) :
	    self.auth="on"
            os.system('sudo cp %s %s ' %(self.allauthConfFile, self.confFile))

            self.log.debug("Openser config file modified- All authentication")
        elif((auth == "regauth") or (auth=="RegAuth") or (auth =="REGAUTH")) :
	    self.auth="on"
            os.system('sudo cp %s %s ' %(self.regauthConfFile, self.confFile))

            self.log.debug("Openser config file modified- Registration authentication")
	else:
	    self.auth="off"
            os.system('sudo cp %s %s ' %(self.noauthConfFile, self.confFile))
            self.log.debug("Openser config file modified- No Auth Configuration")

	    
	#If authentication is on then start the mysql process
	if (self.auth != 'off'):
            #check for mysql process
	    #if it isnt running start it
            self.checkMysql()
	
	# Create a new config file for this instance and modify ownership of the file
        os.system('sudo chown -R test:users %s' %self.confFile)
 
    def start(self):

	self.addIpDomain()
	
        try:
            tmpstr1 = commands.getoutput('pgrep -x openser')
            if tmpstr1:
                # Kill the  process if it is already running
                os.system('sudo pkill -9 openser')
                self.log.debug('Proxy.Start: Killed the errant openser process')
	   
	    #If authentication is on then start the mysql process
	    if (self.auth != 'off'):
                #check for mysql process
	        #if it isnt running start it
                self.checkMysql()
		
            self.spawnProc = pexpect.spawn(self.cmd,timeout=60)
            if not self.spawnProc:
                msg = 'Proxy.Start: Failed to spawn command: %s' % self.cmd
                self.log.error(msg)
                raise SessionException(msg)

        except pexpect.TIMEOUT:
            msg = 'Proxy.Start: Timedout while spawning Opensips process!'
            self.log.error(msg)
            raise SessionException(msg)
        except Exception, exc:
            msg = 'Proxy.Start: Caught %s' % exc
            self.log.error(msg)
            raise SessionException(msg)

        match = self.spawnProc.expect(['Listening on',pexpect.EOF,pexpect.TIMEOUT],timeout=30)
        if match != 0:
            msg = 'Proxy.Start: Failed to get prompt - Listening on'
            self.log.error(msg)
            raise SessionException(msg)

        self.log.debug('Proxy.Start: Successfully started openser process')
        self.isConnected = True
        self.pid = self.spawnProc.pid
        self.checkOpenser()
        
    def stop(self):
        if self.spawnProc.isalive():
            self.spawnProc.sendline(CTRL_C)
            time.sleep(2)
            if self.spawnProc.isalive():
                self.log.debug('Proxy.stop: Killing the process using pkill')
                os.system('sudo pkill -9 openser ')
            else:
                tmpstr1 = commands.getoutput('pgrep -x openser')
                if tmpstr1:
                    # Kill the  process if it is already running
                    os.system('sudo pkill -9 openser')
                    time.sleep(2)

                    self.log.debug('Proxy.stop: Successfully stopped openser process')
        else:
            tmpstr1 = commands.getoutput('pgrep -x openser')
            if tmpstr1:
                # Kill the  process if it is already running
                os.system('sudo pkill -9 openser')
                time.sleep(2)
                self.log.debug('Proxy.stop: Successfully stopped openser process')

        # Revert back the original config file
        #os.system('sudo cp %s.cfg %s' %(self.confPath,self.confFile))
	# the database

    def addRouteHdr(self,username):
        #This function is used to add route header in config file in invite method in auth mode
        inpFile = open(self.confFile,'r')
        oldCont = inpFile.readlines()
        inpFile.close()

        cmd = 'mysql -e "select path from location  where username = %s" -u openser -D openser -popenserrw' %(username)
        a = os.popen(cmd).read()
        b = a[a.find('<'):]
        c = b.rstrip()
        line2 = '\t\t\tappend_hf("Route: %s\\r\\n");\n' %(c)
        strToCmp = 'Uncomment this if you want to use digest authentication'
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__(strToCmp):
                found=True
                oldCont.insert(i+11,line2)
                break

        if found:
            outFile = open(self.confFile,'w')
            oldCont = outFile.writelines(oldCont)
            outFile.close()
            self.log.debug('Proxy.addRouteHdr: Successfully modified config file')
            return True
        else:
            self.log.error('Proxy.addRouteHdr: Failed for modify config file')
            return False
        


    def addServiceRouteHdr(self,ip,port='5060'):
        # This function is used to modify the configuration file of  to include
        # Service-Route header field with the given ip in the 200 OK response of REGISTER message
        inpFile = open(self.confFile,'r')
        oldCont = inpFile.readlines()
        inpFile.close() 

        # Check if the information is already present in the config file
        tmpstr1 = commands.getoutput('grep "Service-Route:" ' + self.confFile)
        if tmpstr1.__contains__(ip + ':' + port):
            self.log.error('Proxy.addServiceRouteHdr: Service Route header for the given ip is already added to the config file')
            return False

        # String to be included
        #line1 = '\tif (method=="REGISTER")\n'
        line2 = '\t\tappend_to_reply("Service-Route: <sip:%s:%s;lr>\\r\\n");\n' %(ip,port)

        found = False
	
        #strToCmp = 'if (is_method("REGISTER"))'
        strToCmp = 'if (!save("location"))'
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__(strToCmp):
                found=True
                oldCont.insert(i,line2)
                #oldCont.insert(i+1,line2)
                break

        if found:
            outFile = open(self.confFile,'w')
            oldCont = outFile.writelines(oldCont)
            outFile.close()
            self.log.debug('Proxy.addServiceRouteHdr: Successfully modified config file')
            return True
        else:
            self.log.error('Proxy.addServiceRouteHdr: Failed for modify config file')
            return False

    def deleteServiceRouteHdr(self,header_name):
        print self.confFile
        if((self.auth_setting == "allauth") or (self.auth_setting=="AllAuth") or (self.auth_setting =="ALLAUTH")) :
            os.system('sudo cp %s %s ' %(self.allauthConfFile, self.confFile))

            self.log.debug("Openser config file restored- All authentication")

        elif((self.auth_setting == "regauth") or (self.auth_setting=="RegAuth") or (self.auth_setting =="REGAUTH")) :
	    self.auth="on"
            os.system('sudo cp %s %s ' %(self.regauthConfFile, self.confFile))

            self.log.debug("Openser config file restored- Registration authentication")
	else:
            os.system('sudo cp %s %s ' %(self.noauthConfFile, self.confFile))
            self.log.debug("Openser config file restored- No Auth Configuration")


    def deleteRouteHdr(self):
        if((self.auth_setting == "allauth") or (self.auth_setting=="AllAuth") or (self.auth_setting =="ALLAUTH")) :
            os.system('sudo cp %s %s ' %(self.allauthConfFile, self.confFile))

            self.log.debug("Openser config file restored- All authentication")

        elif((self.auth_setting == "regauth") or (self.auth_setting=="RegAuth") or (self.auth_setting =="REGAUTH")) :
	    self.auth="on"
            os.system('sudo cp %s %s ' %(self.regauthConfFile, self.confFile))

            self.log.debug("Openser config file restored- Registration authentication")
	else:
            os.system('sudo cp %s %s ' %(self.noauthConfFile, self.confFile))
            self.log.debug("Openser config file restored- No Auth Configuration")


    def addPathSupport(self):
        ## This function is used to modify the configuration file of  to include
        # path header field in its requests/responses
        inpFile = open(self.confFile,'r')
        oldCont = inpFile.readlines()
        inpFile.close()

        # Check if the information is already present in the config file
        tmpstr1 = commands.getoutput('grep ' + "'" + 'loadmodule "path.so"' + "' " + self.confFile)
        if tmpstr1:
            self.log.error('Proxy.addPathSupport: Path support already added in config file')
            return False
        # String to be included
        line1 = 'loadmodule "path.so"\n'
        line2 = '# -- Path Header Support --\n'
        line3 = 'modparam("usrloc", "path_column","path")\n'
        line4 = 'modparam("registrar", "use_path",1)\n'
        line5 = 'modparam("registrar", "path_mode",1)\n'

        found = False
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__('loadmodule'):
                found=True
                break

        if found:
            oldCont.insert(i,line1)
        else:
            self.log.error('Proxy.addPathSupport: Failed for modify config file') 
            return False

        found = False
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__('setting module-specific parameters'):
                found=True
                break

        if found:
            oldCont.insert(i+1,line2)
            oldCont.insert(i+2,line3)
            oldCont.insert(i+3,line4)
            oldCont.insert(i+4,line5)
        else:
            self.log.error('Proxy.addPathSupport: Failed for modify config file')
            return False

        outFile = open(self.confFile,'w')
        oldCont = outFile.writelines(oldCont)
        outFile.close()
        self.log.debug('Proxy.addPathSupport: Successfully modified config file')
        return True


    def checkMysql(self):
        tmpstr1 = commands.getoutput('pgrep -x mysqld')
        #print tmpstr1
	try:
	#if tmpStr <= 1:
            if not tmpstr1:
                #print "starting mysq;l"
                os.system("sudo /etc/init.d/mysql restart")
                self.log.debug("checkMysql: Mysql process started")
        except Exception, exc:
            msg = 'Mysql.Start: Caught %s' % exc
            self.log.error(msg)
            raise SessionException(msg)

    def addIpDomain(self):

	self.log.debug("Adding the IP address %s and domain %s in the openser config file %s" %(self.ip,self.domain,self.confFile))
        os.system('sudo perl -pi -e "s/LISTEN_IP/%s/g" %s' %(self.ip,self.confFile))
        os.system('sudo perl -pi -e "s/DOMAIN/%s/g" %s' %(self.domain,self.confFile))
   
    def addRealm(self,realm_ip):
	self.log.debug("Added the ip %s in rewritehostport" %realm_ip)
        os.system('sudo perl -pi -e "s/REALM_IP/%s/g" %s' %(realm_ip,self.confFile))

    def addEndpoint(self,username,password):
        if (self.auth != 'on'):
            msg = "Authentication is Off in the resource, Cannot add endpoint to the db"  
	    raise AssertionError(msg)
	    self.log.error(msg)
	else:
	    try:
                cmd = 'mysql -e "insert into subscriber (username,password,email_address) values (\'%s\',\'%s\',\'%s@%s\')" -u openser -D openser -popenserrw' %(username,password,username,username)
	        os.system(cmd)
	        self.log.debug("Adding endpoint to mysql database")
                self.log.debug(cmd)

            except Exception, exc:
                msg = 'Endpoint add: Caught %s' % exc
                self.log.error(msg)
                raise SessionException(msg)

    def deleteEndpoint(self,username):
        
        if (self.auth != 'on'):
            msg = "Authentication is Off in the resource, Cannot add endpoint to the db"  
	    self.log.error(msg)
	    raise AssertionError(msg)
	else:
	    try:
                cmd = 'mysql -e "delete from subscriber where username=\'%s\'" -u openser -D openser -popenserrw' %username
	        os.system(cmd)
		self.log.debug(cmd)
            except Exception, exc:
                msg = 'Endpoint delete: Caught %s' % exc
                self.log.error(msg)

    def cleanMysqlDb(self):
        if (self.auth == 'on'):
            cmd = 'mysql -e "delete from subscriber" -u openser -D openser -popenserrw'
	    os.system(cmd)
            cmd = 'mysql -e "delete from location" -u openser -D openser -popenserrw'
	    os.system(cmd)
	    

    def checkOpenser(self):
 
        tmpstr1 = commands.getoutput('pgrep -x openser')
        if not tmpstr1:
            msg = "Openser not running currently.Please check"  
            self.log.error(msg)
            raise AssertionError(msg)


	    
def main():
   
    ip="10.216.1.10"
    proxy = openSerProxy(ip,'akanksha.com','on')
    #proxy.addServiceRouteHdr(ip,port='5060')
    #proxy.addPathSupport()
    proxy.start()
    #proxy.addEndpoint('akanksha','akanksha')
    #proxy.deleteEndpoint('akanksha')

#main()
