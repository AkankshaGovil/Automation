import pexpect,logging,time,os,commands
from session import SessionException

class asteriskProxy(object):

    def __init__(self,ipAddr):
        self.ip = ipAddr
        self.cmd = 'sudo asterisk -c'
        self.prompt = 'CLI>'
        self.log = logging.getLogger('nextestlog')
        self.spawnProc = None
 
    def start(self):
        try:
            tmpstr1 = commands.getoutput('pgrep -x asterisk')
            if tmpstr1:
                # Kill the asterisk process if it is already running
                os.system('sudo pkill asterisk')
                self.log.debug('Asterisk.Start: Killed the errant asterisk process')

            # Change the bindaddr parameter in the sip.conf file so that 
            # asterisk would bind to the required ip address
            confFile = '/etc/asterisk/sip.conf'
            cfile=open(confFile,"r")
            fileCont = cfile.readlines()
            cfile.close()

            newStr = "bindaddr=" + self.ip
            oldStr = "bindaddr=[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"
            os.system("sudo perl -pi -e s/'%s'/'%s'/g %s" %(oldStr,newStr,confFile))
 
            tmpstr1 = commands.getoutput('grep -n "bindaddr=" ' + confFile)
            if not tmpstr1.__contains__(newStr):
                self.log.error('Asterisk.Start: sip.conf file does not contain bindaddr information!')
                raise SessionException('Asterisk.Start: sip.conf file does not contain bindaddr information!')
            else:
                self.log.debug('Asterisk.Start: sip.conf file has been updated with the ip address')

            self.spawnProc = pexpect.spawn(self.cmd,timeout=30)
            if not self.spawnProc:
                self.log.error('Asterisk.Start: Failed to spawn command: %s' % self.cmd)
                raise SessionException('Asterisk.Start: Failed to spawn command: %s' % self.cmd)

        except pexpect.TIMEOUT:
            self.log.error('Asterisk.Start: Timeout received while spawning Asterisk process!')
            raise SessionException('Asterisk.Start: Timeout received while spawning Asterisk process!')
        except Exception, exc:
            self.log.error('Asterisk.Start: Caught %s' % exc)
            raise SessionException('Asterisk.Start: Caught %s' % exc)

        match = self.spawnProc.expect([self.prompt, pexpect.TIMEOUT],timeout=30)
        if match != 0:
            self.log.error('Asterisk.Start: Failed to get prompt')
            raise SessionException('Asterisk.Start: Failed to get prompt')

        self.log.debug('Asterisk.Start: Successfully spawned asterisk process')
        self.isConnected = True
        self.pid = self.spawnProc.pid
        
    def stop(self):
        if self.spawnProc:
            self.spawnProc.sendline('stop gracefully')
            time.sleep(10)
            if self.spawnProc.isalive():
                self.spawnProc.sendline('\x03')
                self.log.debug('Asterisk.Stop: Waiting 10 seconds for asterisk to stop...') 
                time.sleep(10)
                if self.spawnProc.isalive():
                    self.log.debug('Asterisk.Stop: Unable to stop gracefully! Killing the process...')  
                    os.system('sudo kill -9 %s' %self.pid)
                else:
                    self.log.debug('Asterisk.Stop: Successfully stopped asterisk')
            else:
                self.log.debug('Asterisk.Stop: Successfully stopped asterisk')
        else:
            self.log.debug('Asterisk.Stop: Already stopped') 

    def addEndpoint(self,number,**properties):
        # Check whether the endpoint is already added in the configuration file
        # If so, delete the existing entries and create a new entry
        confFile = '/etc/asterisk/sip.conf'
        cfile=open(confFile,"r")
        fileCont = cfile.readlines()
        cfile.close()

        newCont = []
        tmpstr1 = commands.getoutput('grep -n "\[' + number + '\]" ' + confFile)
        if tmpstr1:
            tmpList = tmpstr1.split(':')
            pos = int(tmpList[0])
            newCont.extend(fileCont[:pos-1])
            ind = -1
            for i in range(pos,len(fileCont)):
                if fileCont[i].__contains__('[') and fileCont[i].__contains__(']'):
                    ind = i
                    break

            if (ind != -1):
                newCont.extend(fileCont[ind:])
        else:
            newCont.extend(fileCont)

        # Endpoint information to be entered in the file
        epInfo = ['[' + number + ']\n']
        if properties:
            if not properties.has_key('type'):
                epInfo.extend('type=friend\n')
            if not properties.has_key('host'):
                epInfo.extend('host=dynamic\n')
            for k in properties.keys():
                epInfo.extend(k + '=' + properties[k] + '\n')
        else:
            epInfo.extend('type=friend\n')
            epInfo.extend('host=dynamic\n') 

        newCont.extend(epInfo)  

        cfile = open(confFile,"w")
        cfile.writelines(newCont)
        cfile.close()
        self.log.debug('Asterisk.addEndpoint: Successfully updated sip.conf file') 

        # Write ep info in /etc/extensions  
        confFile = '/etc/asterisk/extensions.conf'
        cfile=open(confFile,"r")
        fileCont = cfile.readlines()
        cfile.close()

        newCont = []
        tmpstr1 = commands.getoutput('grep -n "' + number + ',1,Dial" ' + confFile)
        if not tmpstr1:
            newStr = 'exten => ' + number + ',1,Dial(SIP/' + number +')\n' 
            fileCont.extend(newStr)
            cfile=open(confFile,"w")
            cfile.writelines(fileCont)
            cfile.close()
            self.log.debug('Asterisk.addEndpoint: Successfully updated extensions.conf file') 

    def reloadConfig(self):
        """ After modifying the sip.conf and extensions.conf files , execute command to 
        reload the files for the changes to take effect"""
        self.spawnProc.sendline('sip reload')
        match = self.spawnProc.expect(['Reloading SIP', pexpect.TIMEOUT],timeout=30)

        # If there is no change in the config files, then the prompt does not return
        # So, send carriage return to get the prompt 
        self.spawnProc.sendline('')
        match = self.spawnProc.expect([self.prompt, pexpect.TIMEOUT],timeout=30)
        if match != 0:
            self.log.error('Asterisk.ReloadConfig: Failed to reload config files')
            raise SessionException('Asterisk.ReloadConfig: Failed to reload config files')

        self.log.debug('Asterisk.reloadConfig: Config File reloaded')


    #45300
    def setMaxExpiry(self,newValue):
        """ This function is used to configure the max expiry value in sip.conf file"""
        confFile = '/etc/asterisk/sip.conf'
        oldStr = commands.getoutput('grep "maxexpiry=" ' + confFile)
        if newValue == '3600':
            newStr = ";maxexpiry=" + newValue
        else:
            newStr = "maxexpiry=" + newValue
        os.system("sudo perl -pi -e s/'%s'/'%s'/g %s" %(oldStr,newStr,confFile)) 
        tmpstr1 = commands.getoutput('grep "maxexpiry=" ' + confFile)
        if not tmpstr1.__contains__(newStr):
            self.log.error('Asterisk.Start: sip.conf file is not updated with maxexpiry value')
            raise SessionException('Asterisk.Start: sip.conf file is not updated with maxexpiry value!')
        else:
            self.log.debug('Asterisk.Start: sip.conf file has been updated with the maxexpiry value')

