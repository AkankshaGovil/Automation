"Debugging aids."
from types import *
import os
import string
import unittest

# TODO  Note that the use of dlog() statements incurs a performance
# TODO  hit whether debug output is enabled or not - every call gets
# TODO  the environment!  Probably better to use __debug__ and
# TODO  optimization for general release.

__version__ = "$Id: dlog.py,v 1.1.1.1 2004/03/09 03:12:43 slowrey Exp $"

debugSwitch = 'NEXTEST_DEBUG'

def dlog(input):
    """Write a message to stdout if debugging is enabled.

    Debugging is turned on for Python scripts by default unless -O is
    specified (optimize).  This is the opposite of what I want to do:
    leave debugging off by default.  So I use an environment var
    instead.

    This function takes a string or a list of strings as input.
    """
    if os.environ.has_key(debugSwitch):
        iType = type(input)
        if iType is ListType:
            message = string.join(input)
        elif (iType is StringType) or (iType is UnicodeType):
            message = input
        else:
            print 'ERROR: unknown input type: %s', iType
            return
            
        print "debug: %s" % message

## uncomment the following to unit test, otherwise messes up output of
## other unit tests.
## class TestDlog(unittest.TestCase):
##     def setUp(self):
##         os.environ[debugSwitch] = '1'
        
##     def testIt(self):
##         alist = ['this', 'is', 'a', 'list']
##         dlog('A regular message')
##         dlog(alist)

##     def tearDown(self):
##         del os.environ[debugSwitch]

## class TestNoOutput(unittest.TestCase):
##     "TODO  this test turns off debugging - turn it back on"
##     def setUp(self):
##         if os.environ.has_key(debugSwitch):
##             del os.environ[debugSwitch]

##     def testIt(self):
##         print "You should see no output following this line."
##         alist = ['this', 'is', 'a', 'list']
##         dlog('A regular message')
##         dlog(alist)

##if __name__ == '__main__':
##    unittest.main()
