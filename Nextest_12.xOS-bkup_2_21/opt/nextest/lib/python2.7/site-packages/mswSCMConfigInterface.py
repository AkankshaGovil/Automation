import session
import time 
import globalVar
import nxConfigInterface
class mswSCMConfig(object):

    """ Class that is used to configure the MSW in SCM mode"""

    def __init__(self,ifaceName,nxConfSupport):

        """ This method initialises the mswSCMConfig object

        ifaceName      -  Control Interface Name to be used while configuring the MSW in SCM mode 
        nxConfSupport  -  Specifies whether nxconfig utility is supported on the MSW or not
                          sconfig utility will be used if this is set to False
        """

        self.iface = ifaceName
        self.nxConf = nxConfSupport

    def configMSW(self,mswObj,bkup):

        """ This method is used to configure the MSW in SCM mode by running the
        sconfig utility on the remote machine and providing appropriate inputs to 
        the SCM comfiguration parameters.

        mswObj  --  MSW Session object
        bkup    --  Indicates whether the MSW needs to be configured as backup or primary. 
                    MSW will be configured as Backup if this parameter is set to True and 
                    as Primary if this is set to False

        This function returns the status of the configuration (True or False) and a Error
        message string which will be empty incase the configuration succeeded.
        """

        try:
            # 32553 - Use setupRedundancy script for configuring the iserver 
            # if version greater than 4.2
            if self.nxConf:
                mswObj.assertCommand('iserver all stop',timeout= int (globalVar.iserverStopTimeout))
                if bkup:
                    # 38397- code to handle 'cli db clean all' cmd in setupRedundancy.sh slave
                    mswObj.issueCommand('/usr/local/nextone/bin/setupRedundancy.sh slave')
                    mswObj.assertOutput('\n',timeout=30)
                    mswObj.issueCommand('y')
                else:
                    mswObj.issueCommand('/usr/local/nextone/bin/setupRedundancy.sh master')
                mswObj.assertOutput('control-interface',timeout=30)

                expStr = "\) => " + self.iface
                expStrList = ['a' + expStr, 'b' + expStr, 'c' + expStr, 'd' + expStr ,'e' + expStr, 'f' + expStr, 'g' + expStr] 
                mapDict = {0:'a',1:'b',2:'c',3:'d',4:'e',5:'f',6:'g'}
                matchNum = mswObj.assertOutputList(expStrList,timeout=30)
                mswObj.issueCommand(mapDict[matchNum])
                mswObj.assertOutput('peer control IP address',timeout=30)
                if bkup:
                    mswObj.issueCommand('10.10.10.20')
                else:
                    mswObj.issueCommand('10.10.10.21')
                mswObj.assertOutput('interface-monitor-list',timeout=30)
                mswObj.issueCommand('a')
                mswObj.assertCommand('q',timeout=60)

                return True,''

            # Use sconfig utility if the version is less than 4.2
            else:
                # Configure the MSW by running sconfig utility
                mswObj.issueCommand('/usr/local/nextone/bin/sconfig')
                mswObj.assertOutput('server.cfg]:',timeout=1)
                mswObj.issueCommand('/usr/local/nextone/bin/server.cfg')
                mswObj.assertOutput('MSW Name',timeout=1)
                recur = 0
                reached = False
                while((not reached) and (recur < 40)):
                    recur = recur + 1
                    try:
                        mswObj.issueCommand('')
                        mswObj.assertOutput('iServer Peering Configuration:',timeout=1)
                        reached = True
                    except AssertionError:
                        continue
        
                if not reached:
                    return False,'TimedOut Waiting for iServer Peering Configuration section while running sconfig'

                mswObj.assertOutput('Redundant Peer Configuration?',timeout=1)
                mswObj.issueCommand('enable')

                # 26333 - 'bonded interface' is not displayed on 4.0
                # but is displayed on 4.2.
                list1 = ['bonded interface for redundancy?','interface name'] 
                match = mswObj.assertOutputList(list1,timeout=1)
                if match == 0: 
                    mswObj.issueCommand('n')
                    mswObj.assertOutput('interface name',timeout=1)

                # Verify whether the interface name is shown in the list
                mswObj.assertOutput(self.iface,timeout=1)
                mswObj.issueCommand(self.iface)

                mswObj.assertOutput('iServer peer',timeout=1)
                if bkup:
                    mswObj.issueCommand('10.10.10.20')
                else:
                    mswObj.issueCommand('10.10.10.21')
                mswObj.assertOutput('iServer peer',timeout=1)
            
                while(1):  
                    try:
                        mswObj.issueCommand('')
                        mswObj.assertOutput('iServer peer',timeout=1)
                    except AssertionError:
                        break

                mswObj.issueCommand('y')
             
                while(1):
                    try:
                        mswObj.assertOutput('Monitor interface',timeout=1)
                        mswObj.issueCommand('n')
                    except AssertionError:
                        break

                mswObj.issueCommand('n')
                mswObj.assertOutput('stateful call migration?',timeout=1)
                mswObj.issueCommand('enable')
                mswObj.assertOutput('Replication Server Configuration?',timeout=1)
                mswObj.issueCommand('enable')
                mswObj.assertOutput('interface name',timeout=1)

                # Verify whether the interface name is shown in the list
                mswObj.assertOutput(self.iface,timeout=1)
                mswObj.issueCommand(self.iface)
                mswObj.assertOutput('multicast address',timeout=1)
                mswObj.issueCommand('')
                mswObj.assertOutput('multicast port',timeout=1)
                mswObj.issueCommand('')
                mswObj.assertOutput('priority for database controller?',timeout=1)
                if bkup:
                    mswObj.issueCommand('0')
                else:
                    mswObj.issueCommand('1')

                mswObj.assertOutput('Cmd Execution Server',timeout=1)
                mswObj.issueCommand('')
                mswObj.assertOutput('Management Interface Address',timeout=1)
                mswObj.issueCommand('')
                mswObj.assertOutput('to activate the changes',timeout=1)
                # Eat the prompt
                mswObj.assertOutput('')

                # sconfig utility has been run successfully and hence return True 
                return True,''

        # Whenever any exception happens, return False along with the error that occured
        except Exception,e:
           return False,str(e)

    def checkSCM(self,mswObj,bkup):

        # Use appropriate commands depending upon the iserver version
        if self.nxConf:
            cmd = 'cli db status'
        else:
            cmd = 'cli rsd list'
 
        # Verify whether MSW is already configured in SCM mode
        rsdStr = mswObj.filter(cmd)
        #S9 modification to remove hardcoded IP validation, It should be valid for all scenarios.
        if (rsdStr.__contains__('Master') and rsdStr.__contains__('Slave')) :
                # Verify whether the signalling state output is proper
                scmStr = mswObj.filter('cli scm')
	        #48508 make cli scm check case insensitive
	        scmStr = scmStr.lower()
                if ((bkup and scmStr.__contains__('standby')) or (not bkup and scmStr.__contains__('active'))) :
                    return True
                else:
                    return False
        else: 
            return False


# Adding the variable to clean the /var/cdrs/RADACCT/ directory to avoid unneccessary radius requests
def restartSCM(mswObj,cleanRadius='OFF'):

    # 29725 - Time out value changed
    # Create a Back up MSW session object
    backupObj = session.SSH(['root@bkupmsw'])

    # Ticket 33859 - start the primary, give it some time to come up and after making sure that primary
    # is UP, start the secondary

    mymswConf = nxConfigInterface.MswConfig('mymsw','ON')
    mymswConf.msw = mswObj

    # Verify whether the msw supports nxconfig
    nxConfSupport = mymswConf._isNxConfigSupported()

    confObj = mswSCMConfig('eth2',nxConfSupport)
   

    # Stop Backup MSW and Primary MSW
    backupObj.assertCommand('iserver all stop',timeout=int(globalVar.iserverStopTimeout))
    mswObj.assertCommand('iserver all stop',timeout= int (globalVar.iserverStopTimeout))
    time.sleep(5)



    # 44728 - Added code to confirm whether all the processes are stopped before starting iserver 
    masterStopFlag = False
    slaveStopFlag = False
    iterations = 0
    while iterations<20 and not (masterStopFlag and slaveStopFlag):
        iterations = iterations + 1
        time.sleep(2)
        if not masterStopFlag:
            # Ticket $ 51478 added -x option to pgrep command
            masterStatus = mswObj.filter("pgrep -x 'reportingdaemon|gis_sa|gis|naf|dbsync|execd|pm'") 
            masterStatus = masterStatus.strip('|')
            if not masterStatus:
                masterStopFlag = True

        if not slaveStopFlag:
            slaveStatus =  backupObj.filter("pgrep -x 'reportingdaemon|gis_sa|gis|naf|dbsync|execd|pm'")
            slaveStatus = slaveStatus.strip('|')
            if not slaveStatus:
                slaveStopFlag = True

    if not masterStopFlag:
        resString = "NEXTEST_ERROR: iserver all stop failed on Master"
        raise AssertionError(resString)
    elif not slaveStopFlag:
        resString = "NEXTEST_ERROR: iserver all stop failed on Backup"
        raise AssertionError(resString)

    #clear the current and backlog directories
    if (cleanRadius=='ON'):
        mswObj.assertCommand('rm -rf /var/cdrs/RADACCT/')
        backupObj.assertCommand('rm -rf /var/cdrs/RADACCT/')
        time.sleep(2)


    # Start Primary MSW 
    mswObj.assertCommand('iserver all start',timeout=int(globalVar.iserverStartTimeout))
    retries=0
    primaryUp=False
    while retries<40 and not primaryUp:
        retries = retries + 1
        time.sleep(12)

        # 34440 - Use iserver all status command to find whether primary is up
        priStatus = mswObj.filter("iserver all status | grep -i 'no such process'")
        if priStatus.lower().__contains__('no such process'):
            scmResultString = "NEXTEST_ERROR: SCM restart on Primary MSW Failed"
            primaryUp = False
        else:
            # 42190 - Wait for the state on the primary to be updated
            priStatus = mswObj.filter("cli scm")
	    #48508 make cli scm check case insensitive
            priStatus = priStatus.lower()
            if priStatus.__contains__('active'): 
                primaryUp = True
            else:
                scmResultString = "NEXTEST_ERROR: SCM state check on Primary MSW Failed after restart"
                primaryUp = False

    if(not primaryUp):
        raise AssertionError(scmResultString)

    # PR 151232 - handling in case secondary msx takes more time to come up(same way as in case of primary MSX)
    # Start Backup MSW
    backupObj.assertCommand('iserver all start',timeout=int(globalVar.iserverStartTimeout))
    #time.sleep(20)
    retries=0
    secondaryUp=False
    while retries<40 and not secondaryUp:
        retries = retries + 1
        time.sleep(12)

        # 34440 - Use iserver all status command to find whether secondary is up
        secStatus = backupObj.filter("iserver all status | grep -i 'no such process'")
        if secStatus.lower().__contains__('no such process'):
            scmResultString = "NEXTEST_ERROR: SCM restart on Secondary MSW Failed"
            secondaryUp = False
        else:
            # 42190 - Wait for the state on the secondary to be updated
            secStatus = backupObj.filter("cli scm")
            #48508 make cli scm check case insensitive
            secStatus = secStatus.lower()
            if secStatus.__contains__('standby'):
                secondaryUp = True
            else:
                scmResultString = "NEXTEST_ERROR: SCM state check on backup MSW Failed after restart"
                secondaryUp = False

    if(not secondaryUp):
        raise AssertionError(scmResultString)


    # 34440 - Verify SCM status on primary
    if not confObj.checkSCM(mswObj,False):
        scmResultString = "NEXTEST_ERROR: SCM restart on Primary MSW Failed"
        raise AssertionError(scmResultString)
    time.sleep(10) 
    if not confObj.checkSCM(backupObj,True):
        scmResultString = "NEXTEST_ERROR: SCM restart on Backup MSW Failed"
        raise AssertionError(scmResultString)


    # Disconnect and Clean up the Backup MSW session
    backupObj.disconnect() 

def updateMdevices():

    # Create a Back up MSW session object
    backupObj = session.SSH(['root@bkupmsw'])

    backupObj.assertCommand("export CALLERSCRIPT='True'")
    backupObj.assertCommand('cd /usr/local/nextone/bin')
    backupObj.assertCommand('nxconfig.pl -m',timeout=5)

    # Disconnect and Clean up the Backup MSW session
    backupObj.disconnect() 
