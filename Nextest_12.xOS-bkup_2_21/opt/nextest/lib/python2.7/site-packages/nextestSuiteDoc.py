#!/usr/bin/python

from xml.sax.handler import ContentHandler
import xml.sax
import sys
import os
import tempfile
from nextestXmlParser import NextestParser
from nextestWordWrapper import WordDocument


def shellCommand(command=None):
  """Executes a shell command and captures standard output and standard error. The captured
     lines are returned to the caller.
  """
  outfile=tempfile.mktemp()
  errfile=tempfile.mktemp()
  errorlevel=os.system("( %s ) > %s 2> %s" %
                       (command,outfile,errfile)) >> 8
  out = open(outfile,"r")
  err = open(errfile,"r")
  outlines = out.readlines()
  errlines = err.readlines()
  out.close()
  err.close()
  os.remove(outfile)
  os.remove(errfile)
  return outlines, errlines

class NextestSuite:
  """This class is a collection of testCase objects under one class of QMTest TDB test
     cases. It provides a useful interface for operations required across the entire
     test suite. At init time, it gets the complete list of test cases under a class 
     by doing a qmtest list command.

     It offers interfaces to parse, print document or generate word document for the
     entire test suite.
  """
  testCaseList = []

  def __init__(self, component='production_components'):
    """Get the collection of test cases from qmtest.
    """

    command = 'qmtest list %s' % component
    outlines, errlines = shellCommand(command)

    for line in outlines:
        testName = line.replace('\n','')
        testFile = testName.replace('.','.qms/')
        testFile = '/var/opt/nextest/tdb/' + testFile + '.qmt'
        testObject = NextestCase(testName, testFile)
        self.testCaseList.append(testObject)

  def printSuite(self):
    """Print the test Suite.
    """
    for testObject  in self.testCaseList:
      testObject.printTest()

  def parseSuite(self):
    """Parse the test suite.
    """
    for testObject  in self.testCaseList:
      testObject.parseTest()

  def printSuiteDoc(self, wordFile=None):
    """print test suite into a word document.
    """
    try:
      myWordDoc = WordDocument(wordFile) 
    #14000
    except Exception, e:
      msg = "Exception Caught: %s" %str(e)
      self.log.error(msg)
      print "Error in opening word file %s\n" % wordFile
      return
    
    for testObject  in self.testCaseList:
      testObject.printTestDoc(myWordDoc)


class NextestCase:
  """A test case object defined in QMTest TDB.
  """
  def __init__(self, testName=None, testFile=None):
      self.testName = testName
      self.testFile = testFile
      self.docString = ''

  def printTest(self):
    """A trivial function to print test name and test file.
    """
    print '%s:%s' % (self.testName, self.testFile)

  def printTestDoc(self, myWordDoc):
    """Print test documentation into a word file.
    """
    if (self.docString != ''):
      myWordDoc.writeTestCase(self.docString, self.testName)

  def parseTest(self):
    """Parse the test case to extract docstring along with other useful information.
    """
    self.parser = NextestParser(self.testFile)
    self.docString = self.parser.parse()
    


if __name__ == '__main__':
  testSuite = 'production_components'
  wordDocument = 'myTestSuite.doc'
  if (len(sys.argv) > 1):
    testSuite = sys.argv[1]
  if (len(sys.argv) > 2):
    wordDocument = sys.argv[2]

  p = NextestSuite(testSuite)
  p.parseSuite()
  p.printSuiteDoc(wordDocument)
