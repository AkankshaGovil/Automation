import os
import logging
from time import *
import session
import globalVar
#44587
import commands

class MswConfig(object):

    ################  MAPPING USED FOR JAVA SetiServerConfig UTILITY  ###############
    # Construct lists containing all the configuration parameters that belong to a particular Subsystem
    BillingList = ['CdrLogHunt','CdrLogEnd2','CdrLogStart1','CdrLogStart2','Directory','CdrType','CdrInterim']
    # 30817 Added RemoveT38 in the SystemConfigList 
    # Ticket-31353: Added DNISPrefix in SystemConfigList
    # 28799 - Added HairpinCallsAllowed to set the global configuration parameter hairpin
    # 38416 - Added the value of ObpLevel parameters to set obpxfactor
    # 36319 - Added Fast Start and Tunneling parameters
    H323ConfigList = ['MaxCalls','GkId','H245TunnelEnabled','FastStartEnabled','Q931ResTimeout','RasResTimeout','RasMaxTry','AllowDestArqEnabled']
    # 38080 - Added RemoveRFC2833 and Always2833
    #41488 - Added AllowDestArqEnabled parameter
    # 43888 - Added the value of ObpLevel parameters to set obpxfactor
    #46173 - Added SIP Option Ping
    #56430 - Added X-Route-Tag
    # 56701 - Added XRouteTag to SystemConfigList
    #55251 - Added IP layer ratelimiting and IP layer dropped packetlog 
    # 58253 - Added TypeofNumSupport and LeadingPlusSignInUri
    # 183332 - Added DBL
    SystemConfigList = ['MaxHunts','MapIsdncc','MswName','CacheTimeout','MaxHuntsAllowableDuration','MaxCallDuration','AllSrcAllowed','SrcAddrForwarded','UseCodeMap','RemoveT38','DNISPrefix','HairpinCallsAllowed','RemoveRFC2833','ObpLevel','XRouteTag','ANI-DNIS-Loopdetect','ANI-DNIS-LoopInstances','SessionLayerRateLimiting','IpLayerRateLimiting','IpLayerFirewall','IpLayerDroppedPktsLog','TypeofNumSupport','LeadingPlusSignInUri','DBL']
    #56749 - Added ANI-DNIS Loop detect and ANI-DNIS Loop instances
    # 183332 - Added SipByeGap, SipByeBurstLimit, SdpSessionPassThru and PassAllPrivacyValues
    SipConfigList = ['SipTimerC','OBPEnabled','DynamicEPAllowed','SipQlen','Authentication','Always2833','SipPing','SipTimerShorthunt','SipByeGap','SipByeBurstLimit','SdpSessionPassThru','PassAllPrivacyValues']
    #56749 - Added ANI-DNIS Loop detect and ANI-DNIS Loop instances
    # 57151 - Added RetryAfterDuration
    # 43008 Commentted below line 
    # H323ConfigList = ['MaxCalls','GkId','Q931ResTimeout','RasResTimeout','RasMaxTry']
    RadiusConfigList = ['Timeout','Retry','DeadTime','SendAccountingMsg','Servers','Secrets']
    # 37334 - added H323 debug level
    LoggingConfigList = ['sLogDebugPath','sLogErrPath','hDebug-Level']
    FceConfigList = ['FirewallName','NetIf','Pool','InternalIfs']

    # 44435 - added MQM parameter in QosList
    QosList = ['MQM']

    # Create a list containing all the parameters
    paramList = [BillingList,SystemConfigList,SipConfigList,H323ConfigList,RadiusConfigList,LoggingConfigList,FceConfigList,QosList]
    subSystemList = ['BillingConfig','SystemConfig','SipConfig','H323Config','RadiusConfig','LoggingConfig','FceConfigNew']

    ###############  MAPPING USED FOR nxconfig UTILITY #############
    paramNameMap = {}
    paramNameMap['MaxCalls']                  = 'h323-maxcalls'
    # 48354 - Added parameter sipnoegressrefresher to enable or disable on MSX
    paramNameMap['SipNoEgressRefresher']      = 'sipnoegressrefresher'	
    paramNameMap['GkId']                      = 'gkid'
    paramNameMap['Timeout']                   = 'radtimeout'
    paramNameMap['Retry']                     = 'radretries'
    paramNameMap['DeadTime']                  = 'raddeadtime'
    paramNameMap['SendAccountingMsg']         = 'radacct'
    paramNameMap['FirewallName']              = 'fwname'
    paramNameMap['CdrType']                   = 'cdrtype' # Valid values - fixed,daily,seq,time
    paramNameMap['MaxHunts']                  = 'maxhunts'
    #PR	188112
    paramNameMap['3xxCodemapHuntControl']    = '3xx-codemap-hunt-control'
    paramNameMap['MapIsdncc']                 = 'mapisdncc'
    paramNameMap['MswName']                   = 'mswname'
    paramNameMap['CacheTimeout']              = 'age-timeout' 
    paramNameMap['MaxHuntsAllowableDuration'] = 'maxhuntallowdur'
    paramNameMap['MaxCallDuration']           = 'maxcallduration'
    paramNameMap['AllSrcAllowed']             = 'allow-src-all'
    paramNameMap['SipTimerC']                 = 'siptimer-C'
    paramNameMap['SipTimerShorthunt']         = 'siptimer-shorthunt'
    paramNameMap['OBPEnabled']                = 'obp'
    # Changes made for ticket 38416
    paramNameMap['ObpLevel']                  = 'obpxfactor'
    paramNameMap['MinExpires']                = 'min-expires'
    paramNameMap['DynamicEPAllowed']          = 'allow-dynamicendpoints'
    paramNameMap['SipQlen']                   = 'sipqlen'
    paramNameMap['Authentication']            = 'sipauth' # Valid values - none,local,radius
    paramNameMap['CdrLogHunt']                = 'cdrevents'
    paramNameMap['CdrLogEnd2']                = 'cdrevents'
    paramNameMap['CdrLogStart1']              = 'cdrevents'
    paramNameMap['CdrLogStart2']              = 'cdrevents'
    paramNameMap['SrcAddrForwarded']          = 'forward-src-addr'
    paramNameMap['UseCodeMap']                = 'usecodemap'
    paramNameMap['SipSession']                = 'sipsess' #27597 - Add mapping
    paramNameMap['SipMinSession']             = 'sipminse' #33235 - Add mapping
    paramNameMap['RemoveT38']                 = 'h323-removetcst38' # 30817
    # 30978 - Add the POD parameters - CAN BE SET ONLY ON 4.2 AND LATER VERSIONS OF ISERVER
    paramNameMap['PodSupport']                = 'podsupport'
    paramNameMap['PodPort']                   = 'podport'
    paramNameMap['PodUserName']               = 'podusername'
    paramNameMap['PodServerKey']              = 'podserverkey'
    # 32141 - Add the interim cdr
    paramNameMap['CdrInterim']                = 'interimcdrtimer'
    paramNameMap['EnumDomain']                = 'enumdomain' #31291 Can be updated only for 4.2 and above
    # 32362 - Add parameter pass displayname unchanged
    paramNameMap['PassDisplayName']           = 'pass-display-name-unchanged'
    # 39310 Add parameter for SBB
    paramNameMap['SBBPassDisplayName']        = 'pass-display-name'
    paramNameMap['SignalingTrump']            = 'signaling-trumps-clid'
    #39987 - Add SBB parameter 'trust-ext-global'
    paramNameMap['TrustGlobal']               = 'trust-ext-global'
    # 40202 - Add parameter outgoing rsa for ani
    paramNameMap['OutgoingRsaAni']            = 'outgoing-rsa-for-ani'
    # 32163 - Modify Billing Configuration - CAN BE SET ONLY ON 4.2 AND LATER VERSIONS OF ISERVER
    paramNameMap['BillingType']               = 'billingtype'
    paramNameMap['FirstAuthUser']             = 'first-authuser'
    paramNameMap['FirstAuthPwd']              = 'first-authpass'
    paramNameMap['SecondAuthUser']            = 'second-authuser'
    paramNameMap['SecondAuthPwd']             = 'second-authpass'
    # 33858 - memwrapper parameter - CAN BE SET ONLY ON 4.2 AND LATER VERSIONS OF ISERVER
    paramNameMap['MemWrapper']                = 'memwrapper'
    # Ticket-31353: Added the SBB parameter DNISPrefix
    paramNameMap['DNISPrefix']                = 'DNISPrefix'
    # 31356 - Add the SBB Parameters
    paramNameMap['Customer']                  = 'customer'
    paramNameMap['SipToTel']                  = 'allow-sip-to-tel'
    paramNameMap['TelToSip']                  = 'allow-tel-to-sip'
    paramNameMap['TelUriPrefix']              = 'telUriPrefix'
    # 28799 - Added HairpinCallsAllowed to set the global configuration parameter hairpin
    paramNameMap['HairpinCallsAllowed']       = 'hairpin'
    # 32141 - Add the interim cdr
    #36909 - sdebuglevel parameter
    paramNameMap['SdebugLevel']               = 'sdebug-level'
    paramNameMap['FastStartEnabled']          = 'faststart'
    paramNameMap['H245TunnelEnabled']         = 'h245-tunneling'
    paramNameMap['CdrInterim']                = 'interimcdrtimer'
    # 37334 - Add H323 Debug level
    paramNameMap['hDebug-Level']              = 'hdebug-level'
    # 38139 - Added Q931 parameters
    paramNameMap['Q931ResTimeout']            = 'q931resptimeout'
    paramNameMap['RasResTimeout']             = 'rasresptimeout'
    paramNameMap['RasMaxTry']                 = 'rasmaxretries'  
    # 39538 - Added nosrcdnisrouteonlcf - CAN BE SET ONLY ON 4.2 AND LATER VERSIONS OF ISERVER
    paramNameMap['NoSrcDNISRouteOnLCF']       = 'nosrcdnisrouteonlcf' 
    # 38080 - Added RemoveRFC2833 and Always2833
    paramNameMap['RemoveRFC2833']        = 'h323-removetcs2833'
    paramNameMap['Always2833']                 = 'always2833'
    # 39552 - Added QoS parameters
    paramNameMap['tagging']                   = 'tagging' 
    paramNameMap['policing']                  = 'policing' 
    paramNameMap['jitter-buffer']             = 'jitter-buffer' 
    #41168
    paramNameMap['NoCdrOnLCF']       = 'nocdronlcf'
    paramNameMap['StopHuntRxLCF']    = 'stophuntrxlcf'
    #41348
    paramNameMap['LeadingPlusRemoval'] = 'leading-plus-sign-in-uri'
    # 41488 - Added allowdestarqall 
    paramNameMap['AllowDestArqEnabled'] = 'allow-destarq-all'
    #41168
    paramNameMap['NoCdrOnLCF']       = 'nocdronlcf'
    paramNameMap['StopHuntRxLCF']    = 'stophuntrxlcf'
    # 39542 - Added E911 parameters max911vports and max911MRports
    paramNameMap['Max911Vports']              = 'max911vports'
    paramNameMap['Max911MRports']             = 'max911MRports'
    # 38485 - Added obp parameter for enable-natdetection
    # 38969 - Enable dynamic nat detection
    paramNameMap['EnableNATDetection']        = 'enable-natdetection'
    # 50734 - Enable Tel Uri
    paramNameMap['EnableTelUri']        = 'enableteluri'
    # 44435 - Added mqm parameter
    paramNameMap['MQM']                       = 'mqm'
    #52678 - Added for overlappingrealms and sctp
    paramNameMap['OverLappingRealms']       = 'overlappingrealms'
    paramNameMap['SctpOutStreams']          = 'sctp-outstreams'
    paramNameMap['SctpInStreams']           = 'sctp-instreams'
    paramNameMap['SctpNoDelay']             = 'sctp-nodelay'
    paramNameMap['SctpAsocMaxRxt']          = 'sctp-asocmaxrxt'
    paramNameMap['SctpHbpathMaxRxt']        = 'sctp-hbpathmaxrxt'
    paramNameMap['SctpHbInterval']          = 'sctp-hbinterval'
    
    #45468
    paramNameMap['RogueRTPDetect']         ='roguertpdetect'
    # 51005: Added RegStabilityCounter OptimalRegDetermination and MinObpXfactor 
    paramNameMap['RegStabilityCounter']      = 'regstabilitycounter'
    paramNameMap['OptimalRegDetermination']      = 'optimalregdetermination'
    paramNameMap['MinObpXfactor']      = 'minobpxfactor'
    #46173
    paramNameMap['SipPing'] = 'sip-ping'
    # 46857 - Added enableheaderpolicy and debug-modhpol for pass unknow header feature
    paramNameMap['EnableHeaderPolicy']     ='enableheaderpolicy'
    paramNameMap['DebugModhpol']      = 'debug-modhpol'
    # 48913 - Added rtp and rtcp timeout parameter
    paramNameMap['RtpTimeout']             ='rtptimeout'
    paramNameMap['RtcpTimeout']             ='rtcptimeout' 
    # 50238 - Added UseIpAniAuth to enable use-ip-ani-auth for H323 Radius
    paramNameMap['UseIpAniAuth']      ='use-ip-ani-auth'
    # 56701 - Added XRouteTag to change x-route-tag on MSX
    paramNameMap['XRouteTag']      ='x-route-tag'

    # 58253 - Added TypeofNumSupport and LeadingPlusSignInUri
    paramNameMap['TypeofNumSupport'] = 'typeofnumsupport'
    paramNameMap['LeadingPlusSignInUri'] = 'leading-plus-sign-in-uri'

    #52339
    paramNameMap['ImUriSupport'] = 'im-uri-support'
    paramNameMap['PresUriSupport'] = 'pres-uri-support'
    paramNameMap['PresenceSupport'] = 'presence-support'
    paramNameMap['InstantMessagingSupport'] = 'instant-messaging-support'
    # 56430
    paramNameMap['XRouteTag'] = 'x-route-tag'
    # 56749 Ani-loopdetect, Ani-loopdetect
    paramNameMap['ANI-DNIS-Loopdetect']= 'anidnisloopdetect'
    paramNameMap['ANI-DNIS-LoopInstances']= 'anidnisloopinstances'

    # 57151 RetryAfterDuration SessionLayerRateLimiting IpLayerRateLimiting
    paramNameMap['RetryAfterDuration'] = 'retry-after-duration'
    paramNameMap['SessionLayerRateLimiting'] = 'session-layer-rate-limiting'
    paramNameMap['IpLayerRateLimiting'] = 'ip-layer-rate-limiting'
    #55251
    paramNameMap['IpLayerFirewall'] =  'ip-layer-firewall'
    paramNameMap['IpLayerDroppedPktsLog'] = 'ip-layer-dropped-pkts-log'
    # 158101 Added for the global flag maddr-domain-routing-support
    paramNameMap['MaddrDomainRoutingSupport'] = 'maddr-domain-routing-support'

    # 183332 DBL SipByeGap SipByeBurstLimit SdpSessionPassThru PassAllPrivacyValues
    paramNameMap['SipByeGap'] = 'sip-bye-gap'
    paramNameMap['SipByeBurstLimit'] = 'sip-bye-burst-limit'
    paramNameMap['DBL'] = 'dynamic-blacklisting'
    paramNameMap['SdpSessionPassThru'] = 'sdp-session-pass-thru'
    paramNameMap['PassAllPrivacyValues'] = 'pass-all-privacy-values'

    # PR 1330008 Added the new parameters for radius configuration change for 6.0 CDR streaming feature - from cdrformat till aaa-status-check-retries
    paramNameMap['Cdrformat']='cdrformat'
    paramNameMap['RadMaxBufferSize']='AAA-max-buffer-size'
    paramNameMap['MaxRadiusServers']='max-aaaservers'
    paramNameMap['RadClearBufferTrap']='AAA-clear-buffer-trap'
    paramNameMap['RadStatusCheckTimeout']='aaa-status-check-timeout'
    paramNameMap['RadStatusCheckRetries']='aaa-status-check-retries' 

    #PR 139239 Parameter namedCacheInterval for multiple DNS feature
    paramNameMap['NamedCacheInterval']='namedCacheInterval'
    
    #Flag PassOutOfDialogInfo added to support ayt_info_message feature PR188690
    paramNameMap['PassOutOfDialogInfo']='pass-out-of-dialog-info'

    #175674 Two parameters added for media_cac feature
    paramNameMap['maxMRchannels'] = 'maxMRchannels'
    paramNameMap['max911MRchannels'] = 'max911MRchannels'

    #PR179949 Parameter disable-phone-context-stripping for VM-phone-context ;boolean 
    paramNameMap['DisablePhoneContextStripping']='disable-phone-context-stripping'
    #Adding Parameter for the feature interim CDR Enhancements - 8.2
    paramNameMap['InterimCdrFile'] ='interimcdrfile'
    paramNameMap['outOfDialogHuntingSupport']='outofdialog-hunting-support'
 
    #Adding forward-OPTIONS for out-of-dialogue sip option feature
    paramNameMap['ForwardOptions'] = 'forward-OPTIONS'
       
    # List of all parameters that are boolean
    # 34044 - Add SrcAddrForwarded to the list of boolean parameters
    # 28799 - Added HairpinCallsAllowed to the list of boolean parameters
    # 38969 - Added EnableNATDetection to the list of boolean parameters
    # 38416-  Added the parameter ObpLevel to the list of boolean parameters
    #46173 - Added the parameter SIP Options Ping to the list of booleand parameters
    # 46857 - Added EnableHeaderPolicy to the list of boolean parameters
    # 56430
    # 56701 - Added XRouteTag to the list of boolean parameters
    # 56749 - Added ANI-DNIS-Loopdetect to the list of boolean parameters
    # 58253 - Added TypeofNumSupport and LeadingPlusSignInUri to the list of boolean parameters
    # 158101 - Added MaddrDomainRoutingSupport to the list of the boolean parameters
    # 183332 - Added SdpSessionPassThru and PassAllPrivacyValues
    boolList = ['SendAccountingMsg','MapIsdncc','AllSrcAllowed',\
                'OBPEnabled','ObpLevel','DynamicEPAllowed','RemoveT38','PassDisplayName',\
                'SrcAddrForwarded','HairpinCallsAllowed','FastStartEnabled',\
                'H245TunnelEnabled','RemoveRFC2833','Always2833','AllowDestArqEnabled','EnableNATDetection','MQM',\
                'RogueRTPDetect','SipPing','EnableHeaderPolicy','EnableTelUri','ImUriSupport','PresUriSupport',\
                'PresenceSupport','InstantMessagingSupport','XRouteTag','ANI-DNIS-Loopdetect','TypeofNumSupport','LeadingPlusSignInUri','SipNoEgressRefresher','MaddrDomainRoutingSupport','DisablePhoneContextStripping','SdpSessionPassThru','PassAllPrivacyValues','ForwardOptions']

    # List of all parameters that require iserver restart
    # 52678 Added OverLappingRealms and sctp global configuration
    # PR 1330008 Added the new parameters for radius configuration change for 6.0 CDR streaming feature - from cdrformat till aaa-status-check-retries
    #PR 139239 Added Parameter namedCacheInterval for multiple DNS feature
    #PR 183332 Added Parameter DBL
    resList = ['Timeout','Retry','DeadTime','SendAccountingMsg','MaxCalls',\
               'PodSupport','PodPort','PodUserName','PodServerKey','Customer',\
               'Q931ResTimeout','RasResTimeout','RasMaxTry','OverLappingRealms','SctpOutStreams',\
               'SctpInStreams','SctpNoDelay','SctpAsocMaxRxt','SctpHbpathMaxRxt','SctpHbInterval',\
               'SessionLayerRateLimiting','IpLayerRateLimiting','IpLayerFirewall','IpLayerDroppedPktsLog',\
               'Cdrformat','RadMaxBufferSize','MaxRadiusServers','RadClearBufferTrap','RadStatusCheckTimeout',\
               'RadStatusCheckRetries','NamedCacheInterval','Max911Vports','Max911MRports','DBL' ]

    interimcdrfileMap ={}
    interimcdrfileMap['interim']='a'
    interimcdrfileMap['end1']='b'
    
    outOfDailogueHuntMap = {}
    outOfDailogueHuntMap['NONE'] = 'a'
    outOfDailogueHuntMap['OPTIONS'] = 'b'
    #Added for Info based reachability
    outOfDailogueHuntMap['INFO'] = 'c'
    outOfDailogueHuntMap['QUIT'] = 'q'

     
    cdrEvtMap = {}
    cdrEvtMap['CdrLogHunt']    = 'hunt'
    cdrEvtMap['CdrLogEnd2']    = 'end2'
    cdrEvtMap['CdrLogStart1']  = 'start1'
    cdrEvtMap['CdrLogStart2']  = 'start2'

    cdrOptMap = {}
    cdrOptMap['start1'] = 'a'
    cdrOptMap['start2'] = 'b'
    cdrOptMap['end2']   = 'c'
    cdrOptMap['hunt']   = 'd'
    cdrOptMap['end1']   = 'e'

    cdrTypeMap = {}
    # 28334 - Since CDR Type can only be passed as numeric  
    # for iserver version 3.0, modified to make to work on 
    # all the versions of iserver
    cdrTypeMap['1'] = 'a'
    cdrTypeMap['2'] = 'b'
    cdrTypeMap['4']  = 'c'
    cdrTypeMap['3']   = 'd'

    #PR 1330008 Added cdrformat type to support 6.0 cdr streaming feature.
    cdrFormatMap={}
    cdrFormatMap['text'] = 'a'
    cdrFormatMap['radius'] = 'b'
    cdrFormatMap['both']   = 'c'

    sipAuthMap = {}
    sipAuthMap['0'] = 'a'    # none
    sipAuthMap['1'] = 'b'    # local
    sipAuthMap['2'] = 'c'    # radius

    # MSX iServer 4.2 and above have a reverse mapping for fwname.
    # This mapping is swapped in setMSWConfig for iServer Version 
    # greater than 4.2
 
    fwnameMap = {}
    fwnameMap['none'] = 'a'
    fwnameMap['MS']   = 'b'

    # 32163 - Add Billing Type Map 
    btMap = {}
    btMap['none'] = 'a'
    btMap['prepaid'] = 'b'
    btMap['ciscoprepaid'] = 'c'
    btMap['postpaid'] = 'd' 
    
    # adding sdebug-level to the modMap list
    # 43857 - Adding debug-modhpol to modMap list
    modMap = ['','debug-modreg','debug-modfind','debug-modage','debug-modcache','debug-modinit','debug-modsel','debug-modpkt','debug-moddb','debug-modshm','debug-modcdr','','','debug-modtmr','debug-modredund','debug-modxml','','debug-modlmgr','','debug-modh323','debug-modlrq','debug-modrrq','debug-modarq','debug-modsip','debug-modq931','debug-modscc','debug-modiwf','debug-modbridge','debug-modfce','debug-modradc','debug-modispd','','','','','','debug-modscm','sdebug-level','debug-modhpol']
 
    commandString = '/usr/local/nextone/bin/nxconfig.pl'
 
    def __init__(self,mswIP,scmConf="OFF"):

        """Construct a new MswConfig object used for reading and modifying 
        certain configuration parameters of the MSW.

        mswVersion -- Version of the MSW
        mswIP      -- IP of the MSW
        scmConf    -- Value of context variable 'nextest.scm_configuration'
        """

        self.logObj = logging.getLogger('nextestlog')
        self.mswVersion = ""
        self.msw = None  
        self.mswIP = mswIP
        self.localShell = session.LocalShell()

        # 26333 - Get the SCM configuration information and store it
        if scmConf == "ON":  
            self.scm = True
        else:
            self.scm = False
    
    def setMSWConfig(self,msw,paramName,paramValue):
    
        """Function used to update the different configuration parameters
        of MSW

        msw        -- MSW Session Object (used to execute commands on the MSW)
        paramName  -- Name of the MSW configuration parameter
        paramValue -- Value to which the MSW configuration parameter is to be set
        """

        self.msw = msw
        if (self._isNxConfigSupported() == True):

            # 21059 - If the paramValue is Null set it to ''
            if (paramValue == ''):
                paramValue = "''"

            self.logObj.info('setMswConfig: Parameter %s Value %s' %(paramName,paramValue))
            # Handle Special cases
            # 28984 - Cannot set the Errorlogpath and debugpath on iserver
            # versions 4.2 and above
            if (paramName == 'sLogDebugPath' or paramName == 'sLogErrPath'):
                self.logObj.debug('setMswConfig: Cannot set sLogErrPath '+\
                   'and sLogDebugPath on iserver versions 4.2 and above')
            elif ((paramName == 'CdrLogHunt') or (paramName == 'CdrLogStart1') \
                   or (paramName == 'CdrLogStart2') or (paramName == 'CdrLogEnd2')):
                self._setCDREvents(msw,paramName,paramValue)
            elif ((paramName == 'Servers') or (paramName == 'Secrets')):
                # The value for these parameters will be entered as {'1.1.1.1','2.2.2.2'} as SetiServerConfig requires 
                # it to be entered in that format
                tmpStr1 = paramValue.strip('{').strip('}')
                tmpList = tmpStr1.split(',')

                str1 = 'server'
                if (paramName == 'Secrets'):
                    str1 = 'secret'

                # update the primary radius server/secret and secondary radius server/secret
                # This parameter requires iServer to be restarted and hence prompt will not be returned
                msw.issueCommand(self.commandString + ' -e first-rad' + str1 + ' -v ' + tmpList[0])
                msw.assertOutput('Restart now')
                msw.issueCommand('n')
                msw.issueCommand(self.commandString + ' -e second-rad' + str1 + ' -v ' + tmpList[1])
                msw.assertOutput('Restart now')
                msw.issueCommand('n')

            elif (paramName == 'CdrType'):
                # update the CdrType by entering the appropriate option string
                # 28334 - CdrType is passed as numeric it is 
                # not required to convert it in to lowercase.
                # Hence modified the following code
                msw.issueCommand(self.commandString + ' -e cdrtype')
                #33924 - Given support for setting the CdrType on 
                #iserver version 4.2 
                msw.assertOutput('Select your choice')
                msw.assertCommand(self.cdrTypeMap[paramValue])
	    
            elif (paramName == 'outOfDialogHuntingSupport'):
                msw.issueCommand(self.commandString + ' -e outofdialog-hunting-support')
                #Given support for setting the outofdialog-hunting-support
                msw.assertOutput('Select your choice:')
                msw.issueCommand(self.outOfDailogueHuntMap[paramValue])
                msw.assertOutput('Select your choice:')
                msw.issueCommand('q')

            elif (paramName.find('JServerModuleEnabled') != -1):
                self.logObj.error('setMSWConfig: Parameter %s does not exist in this version of iServer' %paramName)
            #PR 1330008 adding cdrparam type
            elif (paramName == 'Cdrformat'):
                verCheck_6_0 = self._compareMSWVersion('6.0')
                if (verCheck_6_0 >=0):
                    msw.issueCommand(self.commandString + ' -e cdrformat')
                    msw.assertOutput('Select your choice:')
                    msw.issueCommand(self.cdrFormatMap[paramValue])
                    #msw.assertOutput('Restart now (y/n) [n]:')
                    msw.issueCommand('n') 
                 

            # 36950 - adding a check for sdebug-level, for 4.3 builds sdebug level stays 0 because the file gets too big

            elif (paramName.find('GisModuleEnabled') != -1):
                verCheck_4_3 = self._compareMSWVersion('4.3')
                try: 
                    modList = paramName.split(' ')
                    modName = self.modMap[int(modList[1])]
                    if (modName != ''):
                        if (paramValue.lower() == 'true'):
			    if(modName == 'sdebug-level'):
                                if (verCheck_4_3 >= 0):
                                    cmd = self.commandString + ' -e %s -v %s' %(modName,'0')
                                else:
                                    cmd = self.commandString + ' -e %s -v %s' %(modName,'3')   
                            else:
                                cmd = self.commandString + ' -e %s -v %s' %(modName,'4')
                        else:
                            cmd = self.commandString + ' -e %s -v %s' %(modName,'0')
                        self.msw.assertCommand(cmd)

                except Exception,e:
                    self.logObj.error('setMSWConfig: Cannot set value for parameter %s' %paramName)

            elif (paramName.find('PmModuleEnabled') != -1):
                if (paramValue.lower() == 'true'):
                    cmd = self.commandString + ' -e debug-modpmgr -v 4'
                else:
                    cmd = self.commandString + ' -e debug-modpmgr -v 0'
                msw.assertCommand(cmd)
            elif (paramName == 'Authentication'):
                cmd = self.commandString + ' -e sipauth'
                msw.issueCommand(cmd)
                msw.assertOutput('choice:')
                msw.assertCommand(self.sipAuthMap[paramValue])
            elif (paramName == 'FirewallName'):

                # Ticket 32440 - The fwname in nxconfig.pl is flipped in 4.2c2-1 and above
                # due to a installation script change. Modified the test to correspond
                # to the change.
		# Ticket 33245- The fwname in nxconfig.pl is flipped in 4.2 and above builds, so changed the version and the variable name from 4.2c2 to 4.2
	 
                verCheck_4_2 = self._compareMSWVersion('4.2')
                if (verCheck_4_2 >= 0):
                    self.fwnameMap['none'] = 'b'
                    self.fwnameMap['MS']   = 'a'

                cmd = self.commandString + ' -e fwname'
                msw.issueCommand(cmd)
                msw.assertOutput('choice:')
                msw.assertCommand(self.fwnameMap[paramValue])

            #Adding option for Itnerim CDR enhancement feature 
            elif (paramName == 'InterimCdrFile'):
                    msw.issueCommand(self.commandString + ' -e interimcdrfile')
                    msw.assertOutput('Select your choice:')
                    msw.issueCommand(self.interimcdrfileMap[paramValue])


            # 32163 - Add code for setting parameter billing type
            elif (paramName == 'BillingType'):
                cmd = self.commandString + ' -e billingtype'
                msw.issueCommand(cmd)
                msw.assertOutput('choice:')
                msw.assertCommand(self.btMap[paramValue])
            else:
                # 21386 - If the parameter is a boolean parameter, then the value should be 0/1
                # and not false/true
                # 30187 Added RemoveT38
                # 32362 - Verify whether the parameter is boolean by comparing
                # against the list defined
                if paramName in self.boolList:
                    if (paramValue.lower() == 'true'):
                        paramValue = 1
                    elif (paramValue.lower() == 'false'):
                        paramValue = 0

                try:
                    cmd = self.commandString + ' -e %s -v %s' %(self.paramNameMap[paramName],paramValue)
                    # Verify whether the command requires a reboot
                    # 30978 - Check whether the parameter is present in the list
                    if paramName in self.resList:
                        msw.issueCommand(cmd)
                        msw.assertOutput('Restart now')
                        msw.assertCommand('n') 
                    else:
                        # Execute the command to edit the configuration   
                        msw.assertCommand(cmd)
                except Exception,s:
                    # 30978 - Log the Exception
                    self.logObj.error('setMSWConfig: Cannot set value for parameter %s' %str(s))
        else:
            subsys = self._getSubSystem(paramName)
            if subsys == '':
                self.logObj.error('setMSWConfig: Parameter %s does not belong to any sub system!' %paramName) 
            else:
                if paramName == 'UseCodeMap':
                    cmd = 'java SetiServerConfig %s %s set %s "%s"' %(self.mswIP,subsys,paramName,paramValue)
                    # 26333 - Form the command to be executed on bkup
                    cmd1 = 'java SetiServerConfig bkupmsw %s set %s "%s"' \
                              %(subsys,paramName,paramValue)
                else:
                    cmd = 'java SetiServerConfig %s %s set %s %s' %(self.mswIP,subsys,paramName,paramValue)
                    # 26333 - Form the command to be executed on bkup
                    cmd1 = 'java SetiServerConfig bkupmsw %s set %s %s' \
                              %(subsys,paramName,paramValue) 
                # 29725 - Added timeout argument
                self.localShell.assertCommand(cmd, timeout = int(globalVar.jServerTimeout))

                # 26333 - If MSW is configured in SCM mode, then the
                # configuration steps need to performed on the backup
                if self.scm:
                    # 29725 - Added timeout argument
                    self.localShell.assertCommand(cmd1, timeout = int(globalVar.jServerTimeout))

                # No need to sleep if the logging configuration is changed 
                if (subsys != 'LoggingConfig'): 
                    sleep(10)
                  
    
    def getMSWConfig(self,msw,paramName):
    
        """Function used to get the value of the different configuration parameters
        of MSW. Returns the value of the MSW configuration parameter.

        msw        -- MSW Session Object (used to execute commands on the MSW)
        paramName  -- Name of the MSW configuration parameter
        """

        self.msw = msw
        # Verify whether SetiServerConfig utility or nxConfig utility is to be used
        if (self._isNxConfigSupported() == True):
            # CDR Directory and log file path are not configurable from 4.2 version of iserver    
            if paramName == 'Directory':
                return '/var/cdrs'
            # 28984 - Error path is not configurable from 4.2 version of iserver 
            elif paramName == 'sLogDebugPath' or paramName == 'sLogErrPath':
                return '/var/log/iserver.log'

            self.logObj.info('getMSWConfig: Parameter Name is %s' %paramName)
            resultString = self.msw.filter(self.commandString + ' -s %s' %self.paramNameMap[paramName])
            # Parse the result string
            tmpLoc = resultString.find('Attr. Value')
            value = ''
            if (tmpLoc!= -1):
                tmpL1 = resultString[tmpLoc:].split('\n')
                tmpL2 = tmpL1[0].split(':')
                value = tmpL2[1].strip(' ').strip('\r')

            # 28887 - If Attr Value is NULL then Attr. Default value should be returned
            if value == 'NULL':
                tmpLoc = resultString.find('Attr. Default')
                value = ''
                if (tmpLoc!= -1):
                    tmpL1 = resultString[tmpLoc:].split('\n')
                    tmpL2 = tmpL1[0].split(':')
                    value = tmpL2[1].strip(' ').strip('\r')

            self.logObj.info('getMSWConfig: Value of Parameter %s is %s' %(paramName,value))
            return value
        else:
            subsys = self._getSubSystem(paramName)
            if subsys == '':
                self.logObj.error('getMSWConfig: Parameter %s does not belong to any sub system!' %paramName)
                return '' 
            else:
                cmd = 'java SetiServerConfig %s %s get %s' %(self.mswIP,subsys,paramName)
                try:
                    # 44587 - Since getMSWConfig method returns incorrect value on 4.0 builed for 
                    # some of the parmeters changed the following code
                    value = commands.getoutput(cmd).split('\n')[0]
                    self.logObj.info('getMSWConfig: Command = %s - Value = %s' %(cmd,value))
                except Exception,e:
                    self.logObj.error('getMswConfig: Error while executing the java command!') 
                    value='' 
    
                return value
    
    # 57151 Added getDefaultMSWConfig
    def getDefaultMSWConfig(self,msw,paramName):

        """Function used to get the default value of the different configuration parameters
        of MSW. Returns the value of the MSW configuration parameter.

        msw        -- MSW Session Object (used to execute commands on the MSW)
        paramName  -- Name of the MSW configuration parameter
        """

        self.msw = msw
        # Verify whether SetiServerConfig utility or nxConfig utility is to be used
        if (self._isNxConfigSupported() == True):
	    self.logObj.info('getDefaultMSWConfig: Parameter Name is %s' %paramName)
            resultString = self.msw.filter(self.commandString + ' -s %s' %self.paramNameMap[paramName])
            # Parse the result string
            tmpLoc = resultString.find('Attr. Default')
            value = ''
            if (tmpLoc!= -1):
                tmpL1 = resultString[tmpLoc:].split('\n')
                tmpL2 = tmpL1[0].split(':')
                value = tmpL2[1].strip(' ').strip('\r')
            self.logObj.info('getDefaultMSWConfig: Default Value of Parameter %s is %s' %(paramName,value))
            return value
	else:
	    self.logObj.error('getDefaultMSWConfig: Parameter %s is not supported ' %paramName)
	    return ''

    # 57151 Added setMSWConfigPrompt
    def setMSWConfigPrompt(self,msw,paramName,paramValue):

        """Function used to update the different configuration parameters
        of MSW. Value is provided at the prompt.

        msw        -- MSW Session Object (used to execute commands on the MSW)
        paramName  -- Name of the MSW configuration parameter
        paramValue -- Value to which the MSW configuration parameter is to be set
        """

        self.msw = msw
        if (self._isNxConfigSupported() == True):
		cmd = self.commandString + ' -e %s' %(self.paramNameMap[paramName])
		try:
                   msw.issueCommand(cmd)
                   msw.assertOutput('%s'%self.paramNameMap[paramName])
                   msw.issueCommand(paramValue)
		except Exception,e:
                   self.logObj.error('setMSWConfigPrompt: Error while setting the value of parameter %s'%self.paramNameMap[paramName])
	else:
		self.logObj.error('setMSWConfigPrompt: Parameter %s is not supported ' %paramName)
            	return ''


    def __del__(self):
        """ Destroy the localShell session that was created
        """
        self.localShell.disconnect() 

    #######################################################################################
    #  INTERNAL METHODS           
    #######################################################################################   
    
    def _getSubSystem(self,configParam):
        """ Function used to find the SubSystem to which the configuration parameter belongs.
        Returns the name of the Subsystem

        configParam -- Name of the MSW Configuration Parameter
        """
        for i in range(len(self.paramList)):
            if configParam in self.paramList[i]:
                return self.subSystemList[i]

        # Verify whether it is for enabling logging
        # The parameter name in this case would be 'GisModuleEnabled 0'....'GisModuleEnabled 27' or 'JServerModuleEnabled 0'....'JServerModuleEnabled 27' or 'PmModuleEnabled 0'....'PmModuleEnabled 27'
        # Hence we will need to add 28X3 = 84 entries in the List. Instead, just verify whether the
        # parameter name contains the string. 
        if ((configParam.find('GisModuleEnabled') != -1) or (configParam.find('JServerModuleEnabled') != -1) or (configParam.find('PmModuleEnabled') != -1)):
            return 'LoggingConfig'

        # Return None if the parameter name does not belong to any subsystem
        return ''

    def _isNxConfigSupported(self):
        """ Function used to verify whether the MSW version supports nxConfig utility. 
        MSW versions greater than or equal to 4.2 support nxConfig utility and do not support SetiServerConfig 
        java application.
        Returns true if the MSW version is greated than 4.2 and False if not. 
        """

        if (self.mswVersion==''):
            self.mswVersion = self._getMSWVersion()
        verList = self.mswVersion.split('.')

        try:
            # Compare the major and minor version numbers and verify whether
            # the version is greater than or equal to 4.2
            if (int(verList[0]) > 4):
                return True
            elif (int(verList[0]) == 4):
                if (int(verList[1]) >= 2):
                    return True
                else:
                    return False  
            else:
                return False  
        except Exception,e:
            self.logObj.error('MSWConfig:__isNxConfigSupported: ERROR - %s' %str(e))
            return False

    def _getMSWVersion(self): 
        """ Function used to retrieve the MSW version information
        """
        verCmd = "cli -v  | grep 'Command Line'"
        verStr = self.msw.filter(verCmd)      
    
        if (verStr.__contains__('Command Line Provisioning')):
         verSplit = verStr.strip().split()    
         for i in range(len(verSplit)):       
            if (verSplit[i].__contains__('.') ):
                if (verSplit[i].startswith('v,')):
                    return verSplit[i][2:-1]  
                elif (verSplit[i].startswith('v')):
                    return verSplit[i][1:-1]
                else:
                    return verSplit[i][:-1]

    # Ticket 32440 - Compare iServer version is required to be able to check for specific versions.
    # This is a duplicate of the compareiServerVersion() that can be found in the mswinfo class
    # since python does not allow modules to import each other.

    def _compareMSWVersion(self,relVersion):
        """

        WARNING: This is a duplicate of compareiServerVersion() which can be found in msw.py

        Compare the iServer version numbers. The number of levels of comparison will depend
        on the input Release version string. For example, if 4 is entered, then only the first version
        number will be compared, if 3.1.1 is entered then the first three levels would be
        individually compared.
        Release name is passed as the argument and it takes values as 4.0, 4.0c3-10, 4.2, 4.2c1-3 etc.
        MSW Version is currently running on msw is of form 4.2 or 4.2.c1-10 etc, which
        we get with command "gis -v"

        Returns 0 if the versions match, 1 if the MSW version is greater than the
        the given Release version, -1 if the MSW version is less than the given Release version
        and -99 if there was an error

        relVersion -- Release version string against which the MSW iServer version is to be compared
        """
        # 28762
        # c-releases being the customer release given the value -1, the highest value
        # t-releases being the trial version given the value of -2
        # and d-releases the developer release given the value of -3. as d<t<c

        # The supplied release number with characters can be of form 4.2d1-3, 4.2t1-3,4. 2c1-3 etc.
        # with values -, d, t and c in release name are replaced by '.', '.-1.', '.-2.' and '.-3.' resp.
        # A release name can't be of form 4.2.d1-3 etc.
        relVersion = relVersion.replace('-','.').replace('rc','.-5.').replace('c','.-1.').replace('t','.-2.').replace('d','.-3.').replace('m','.-4.')

        # The msw version number with characters can be of form 4.2.d1-3, 4.2.t1-3, 4.2.c1-3 etc.
        # Values -, d, t and c in msw version number are replaced by '.', '-1.', '-2.' and '-3.' resp.
        # A msw version number can't be of form 4.2d1-3 etc.
        # 46485 reuse the msw version
        if (self.mswVersion==''):
            self.mswVersion = self._getMSWVersion()

        mswVersion = self.mswVersion.replace('-','.').replace('rc','-5.').replace('c','-1.').replace('t','-2.').replace('d','-3.').replace('m','-4.')
        # Using the split method for splitting the  msw version and release version with '.' as splitter
        verInputList = relVersion.split('.')
        verList = mswVersion.split('.')
        result = 0

        try:
            # Compare the MSW Version with Release Version number
            for i in range(len(verInputList)):
                if (int(verList[i]) < int(verInputList[i])):
                    self.logObj.debug('checkiServerVersion: Release Version %s is greater than iServer Version %s' %(relVersion,mswVersion))
                    result = -1
                    break
                elif (int(verList[i]) > int(verInputList[i])):
                    self.logObj.debug('checkiServerVersion: Release Version %s is less than iServer Version %s' %(relVersion,mswVersion))
                    result = 1
                    break
           # Handle the case when the input Release version contains lesser number
           # of numeric values compared to actual. Example: 4.2 and 4.2.1
            if (result==0):
                if (i+1) <= (len(verList)-1):
                    if int(verList[i+1]) > 0:
                       self.logObj.debug ('checkiServerVersion: iServer Version %s is greater than Release Version %s' %(mswVersion,relVersion))
                       return 1
                self.logObj.debug ('checkiServerVersion: iServer Version %s matches Release Version %s' %(mswVersion,relVersion))

            return result


        except IndexError:
            # If the version matched in the comparison made so far,then return
            # -1. This is because, in this case the actual version is less than
            # the supplied Release version and they are not equal.
            # For ex: 4.2(actual) is less than 4.2.1(supplied) and not equal
            if result == 0:
                return -1
            else:
                return result



        except ValueError:
            # If the iServer Version if something like 4.1.m4 and the input string is 3.1.2, then while comparing
            # the third level, an Exception will be thrown as m4 is not an integer. Process such errors.
            self.logObj.error("Error in checkiServerVersion: The Release version %s supplied is wrong"  %relVersion)
            return -99


        except Exception,e:
            # To catch any other exception
            self.logObj.error("ERROR comparing iServer versions - %s" %str(e))
            return -99


    def _setCDREvents(self,msw,paramName,paramValue):
        """ Function used to update the cdrevents parameter
        """
        # Get the value of cdrevents - while enabling or disabling a particular event, care should be
        # taken not to modify the value of the other events.
        curValue = self.getMSWConfig(msw,paramName)

        # Strip the leading and trailing spaces, if any
        curValue = curValue.strip()

        ValueList = curValue.split(' ')
        found = ValueList.__contains__(self.cdrEvtMap[paramName])
        if (paramValue.lower() == 'true'):
            enable = True
        elif (paramValue.lower() == 'false'):
            enable = False 

        # Check whether updation of the parameter is required and form the new list accordingly
        if (found and enable):
            self.logObj.info('_setCDREvents: %s is already enabled' %paramName)
            return
        elif (not found and not enable):
            self.logObj.info('_setCDREvents: %s is already disabled' %paramName)
            return
        elif (not found and enable):
            # Since the event is to be enabled, add it to the existing list, if not present
            ValueList.append(self.cdrEvtMap[paramName])
        elif (found and not enable):
            # Since the event is to be disabled, remove it from the existing list, if present
            ValueList.remove(self.cdrEvtMap[paramName])

        # Run the nxconfig utility and add all the options that are in the list
        msw.issueCommand(self.commandString + ' -e cdrevents')
        msw.assertOutput('Select your choice')
        for i in ValueList:
            msw.issueCommand(self.cdrOptMap[i])
            msw.assertOutput('Select your choice')

        # Exit out
        msw.assertCommand('q') 
        self.logObj.info('_setCDREvents: Modified the CDR Events and enabled %s' %ValueList)
       

    def getCDRCount(self,msw,type,filename):
        

        cmd="'grep '+ type + ' ' +filename+'| wc -l'"
        "cli -v  | grep 'Command Line'"
        cmd="grep '%s' %s | wc -l" %(type,filename)

        temp=msw.filter(cmd)

        count=temp.split('|')[1].strip('\r\n')
        return count


       
 
       
    def _setOODHuntSupport(self,msw,paramName,paramValue):
        """ Function used to update the cdrevents parameter
        """
 	
	ValueList = [paramValue]
        # Run the nxconfig utility and add all the options that are in the list
        msw.issueCommand(self.commandString + ' -e outofdialog-hunting-support')
        msw.assertOutput('Select your choice')
        for i in ValueList:
            msw.issueCommand(self.outOfHuntOptMap[i])
            msw.assertOutput('Select your choice')
       
 
