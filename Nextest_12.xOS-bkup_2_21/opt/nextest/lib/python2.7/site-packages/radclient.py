from pyrad import client,dictionary,packet
import pexpect, sys, os
import socket, time
import logging

POD_ACCEPTED      = 1
POD_REJECTED      = -1
POD_TIMEOUT       = -2  
POD_SOCKET_ERROR  = -3

class RadserverException(Exception):
        """ This class used to raise error in starting the RADIUS server
                """

class RadiusClient(client.Client):
    def __init__(self, addr, svraddr, secret, port=1700, svrport=1700):
        """
        This initialize the RADIUS server.
        addr: IP address of the server
        dict: instance of dictionary.Dictionary
        """
        self.addr = addr
        self.svraddr = svraddr
        self.secret=secret
        #self.log=logging.getLogger('nextestlog')

        self.client=client.Client(server=svraddr,secret=self.secret,dict=dictionary.Dictionary("/opt/nextest/lib/python2.3/site-packages/dictionary-pod"),authport=svrport)
        self.client.bind((addr,port))

    def SendAuthPacket(self,**attributes):
        """
        This method binds and run the server by forking.
        The forked process id is stored for stopping the server.
        Before going to start, it is checked whether it is started already.
        """
        req=self.client.CreateAuthPacket(code=packet.AccessRequest,
                                           **attributes)

        # Encrypt Password
        if req.has_key('User-Password'): 
            pwd = req['User-Password'][0]
            cpwd = req.PwCrypt(pwd)
            req['User-Password'] = cpwd

        try:
            print "Sending authentication request"
            reply=self.client.SendPacket(req)
            if reply.code==packet.AccessAccept:
                print "Access accepted"
                return POD_ACCEPTED
            elif reply.code==packet.AccessReject:
                print "Access denied"
                return POD_REJECTED
            for i in reply.keys():
                print "%s: %s" % (i, reply[i])

        except client.Timeout:
            print "RADIUS server does not reply"
            return POD_TIMEOUT
        except socket.error, error:
            print "Network error: " + error[1]
            return POD_SOCKET_ERROR

    def CloseSocket(self):
        self.client._CloseSocket()
