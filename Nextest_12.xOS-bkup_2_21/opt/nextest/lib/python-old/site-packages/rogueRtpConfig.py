"""
Rtpsend specific class.

"""

import session 
import os, sys
import unittest
import logging
import string
from time import *
import data

# PR 152102, Invoked by endLocalTethereal()
import msw

class RogueRtpError(Exception):
    "An error occurred while configuring the rtpsend tool "
    
class RogueRtp(object):
    """
    Class encapsulating the rtpsend utility.wrapping the software into this class, allows
    others to use the software as an object without bothering about the exact commands. 
    """
    def __init__(self, rtpsendAddr, file,ctxt=None):
        """
          In this function we initialize all the variables to be used in the 
          class RogueRtp
          Parameters supplied to the __init__ functions are.

          rtpsendAddr ---- The IP address of machine from where we inject rogue rtp packets
	  serverAddr  ---- IP address of the SUT machine.
	  file        ---- Input file for the tool having the rtp packets to be sent

        """
	self.rtpfile=file + '.tmp'
	
        self.myAddr = rtpsendAddr
	self.myPort = '50000' 
        self.log = logging.getLogger('nextestlog')
        self.localShell = session.LocalShell()
	self.pktsInFile = 0
	if os.path.isfile(self.rtpfile):
            self.pktsInFile = self.readNum()
	else:
	    replaceIpPort(file,rtpsendAddr)
            self.pktsInFile = self.readNum()
	
	self.context=ctxt
	try:
	    if self.context.has_key('msw'):
	        self.msw=self.context['msw']
	except Exception ,e:
            raise RogueRtpError("Context variable 'msw' not defined")
        if (self.context['nextest.scm_configuration'] == 'ON'):
	    self.scmConfig = True
	    if self.context.has_key('bkupmsw'):
	        self.bkmsw=self.context['bkupmsw']
        else:
	    self.scmConfig = False
		

    def __del__(self):
        self.localShell.disconnect()
       

    # PR 152102, Enable rtpsend inject rogue rtp packages into the session setup by bkupmsw
    #def start(self, ep_ip):
    def start(self, ep_ip, bkup=False):
        """
	Start rtpsend tool to inject the rtp packets.
	   
        """
	msg = "Unable to start rtpsend tool"	
        # PR 152102, scm changes
        if bkup is None:
            bkup = False

	try:
	    if (self.pktsInFile == 0):
                msg = 'Invalid input file for rtpsend tool '
                self.log.error(msg)
                # Ticket 46477
                return False,msg
	        
		    
            # PR 152102, scm changes
            #list_ip = self.getMediaPorts(ep_ip)
            list_ip = self.getMediaPorts(ep_ip, bkup)
            if len(list_ip) == 0:
	       msg = "Media ports not opened on MSX"
               self.log.error(msg)
                # Ticket 46477
               return False,msg
	       
	    server = list_ip[0]
		
            rtpsendPath = '/opt/nextest/bin/rtpsend'
            if not (os.path.isfile('/opt/nextest/bin/rtpsend')):
                msg = 'rtpsend tool not found'
                self.log.error(msg)
                # Ticket 46477
                return False,msg
                
            else:
                msg = "rtpsend tool successfully started"
                rtpSendToolCommand = rtpsendPath
                rtpSendToolCommand += ' -s %s ' %self.myPort
                rtpSendToolCommand += ' -f %s ' %self.rtpfile
                rtpSendToolCommand += ' %s/%s' %(server[0], server[1])
	

                self.log.debug('rtpSendToolCommand: start command: %s' % rtpSendToolCommand)
                self.localShell.assertCommand(rtpSendToolCommand)
                # Ticket 46477
		return True, msg
		
        except:
            # PR 152102, Met error get the package file for debugging
            self.endLocalTethereal()
            raise RogueRtpError(msg)
		

    # PR 152102, scm changes
    #def getMediaPorts(self,ep_ip):
    def getMediaPorts(self,ep_ip,bkup):
        """
	This function returns the media ports used for the session.
	It finds the value from the statclient command based on the 
	endpoint ip address

        """
        # Not sure about the way the output if statclient hkipnat is displayed
        # PR 152102, scm changes
        if bkup is None:
            bkup = False

        chngList = []
	    
        if self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'HKNIFE':
	    tmpList = ep_ip.split('.')
            for j in range(0,len(tmpList)):
               tmpList[j] = tmpList[j].zfill(3)
            ep_ip = '.'
            ep_ip = ep_ip.join(tmpList)
	    cmd = "statclient dumpRedir | grep " + ep_ip + " | awk '{print $4}'"
            try:    
                # PR 152102, scm changes
                #output = self.msw.filter(cmd)
                if ((self.scmConfig == True) and (bkup == True)):
                    output = self.bkmsw.filter(cmd)
                else:
                    output = self.msw.filter(cmd)

                output = output.strip('|')
                a = output.split('\r\n')
                ip = []
        	
                for i in range(0,len(a)):
                    if a[i].__contains__(':'):
                        str = a[i].split(':')
                        ip.append(str)
    	
                for x in range(0,len(ip)):
                    tmp = ip[x]
                    tmpList = tmp[0].split('.')
                    for j in range(0,len(tmpList)):
                        tmpList[j] = tmpList[j].lstrip('0')
		        if (tmpList[j]==''):
                            tmpList[j]='0'
                        tmp[0] = '.'
                        tmp[0] = tmp[0].join(tmpList)
                    chngList.append(tmp)
            except Exception,e:
                    self.log.error("Error in statclient command execution on MSx")
                    self.log.error("Exception - %s" %str(e))
                    raise RogueRtpError(e)

        elif self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'Cavium':
          
            chngList.append(ep_ip)
            # PR 151995, correct the command
            #cmd = "statclient hkipnat | grep " + ep_ip + " | awk '{print $8}'"
            cmd = "statclient showredir | grep " + ep_ip + " | awk '{print $8}'"
            try:
                #output = self.msw.filter(cmd)
                # PR 152102, scm changes
                if ((self.scmConfig == True) and (bkup == True)):
                    self.log.debug('Execute the command %s on the session bkmsw' %cmd)
                    output = self.bkmsw.filter(cmd)
                else:
                    self.log.debug('Execute the command %s on the session msw' %cmd)
                    output = self.msw.filter(cmd)

                output = output.strip('|')
                a = output.split('\r\n')
                ip = []
        	
                for i in range(0,len(a)):
                    if a[i].__contains__(':'):
                        str = a[i].split(':')
                        ip.append(str)
    	
                chngList = []
                for x in range(0,len(ip)):
                    tmp = ip[x]
                    tmpList = tmp[0].split('.')
                    for j in range(0,len(tmpList)):
                        tmpList[j] = tmpList[j].lstrip('0')
		        if (tmpList[j]==''):
                            tmpList[j]='0'
                        tmp[0] = '.'
                        tmp[0] = tmp[0].join(tmpList)
                    chngList.append(tmp)
            except Exception,e:
                    self.log.error("Error in statclient command execution on MSx")
                    self.log.error("Exception - %s" %str(e))
                    # Ticket 46477 Change
                    return 0
        
            chngList.append(a[1]) 
	else:
	    msg ="Media card is not HKNIFE or Cavium in userconfig.cfg"
            self.log.error(msg)
            raise RogueRtpError(msg)
        self.log.debug('List of Media Ip and Ports on MSX: %s' %chngList)
        # PR 152102, for debugging
        self.log.debug('Length of Media Ip and Ports on MSX: %s' %len(chngList))
	return chngList


    def startLocalTethereal(self,*args):
        """
	This function spawns the tethereal thread on the local machine.
        """
        self.capfile = "/tmp/rogRtp.pcap"
	try:
            self.localShell.assertCommand('sudo pkill -INT tethereal')
        except pexpect.TIMEOUT:
            msg = "PktTraceCollector: no reponse from pkill tethereal"
            self.log.error(msg)
            raise PktTraceCollectorError(msg)
       
        if os.path.isfile(self.capfile):
            self.localShell.assertCommand("sudo rm /tmp/rogRtp.pcap")
	
	ipStr = " or "
	ipStr = ipStr.join(args) 
        
	interface = 'any'

        friends = ' \( rtp \) '
        noEnemies = 'and not tcp port 6000 and not tcp port 22 '
        cmd = ['sudo ','tethereal',
                  ' -i %s ' % interface,
                  # PR 152102, Sniffer the rogue rtp packages for debugging
                  #'-f "(host %s) and not (port 22 or 10101)"' %(ipStr),
                  '-f "(host %s) and not (port 22 or 10101) or port 50000"' %(ipStr),
                  ' -w  %s' % self.capfile,
                  ' > /dev/null 2>&1 &']
        cmd = string.join(cmd)
        self.log.info('Local Tethereal: starting trace on %s',
                      interface)
        self.log.debug("cmd = %s" % cmd)
       
        # Do it
        try:
            self.localShell.assertCommand(cmd)
        except pexpect.TIMEOUT:
            msg = "Local Tethereal : no response from tethereal command"
            self.log.error(msg)
            self.log.error("Exception - %s" %str(e))
            raise PktTraceCollectorError(msg)
    
    
    def endLocalTethereal(self):
        """
	This function ends the tethereal instance on the local Gen machine.
        """
        try:
            self.localShell.assertCommand('sudo pkill -INT tethereal')
        except pexpect.TIMEOUT:
            msg = "PktTraceCollector: no reponse from pkill tethereal"
            self.log.error(msg)
            raise PktTraceCollectorError(msg)
        self.log.info('PktTraceCollector: STOPPED tethereal on GEN')
        sleep(2)
	
	# generate pdml file
	self.localpath_pdml = '/tmp/rogRtp.pdml'
        cmd = 'sudo tethereal -Tpdml -r %s > %s' % (self.capfile, self.localpath_pdml)
        os.system(cmd) 
        
        if not os.path.isfile(self.localpath_pdml):
            msg = "failed to generate pdml file %s" % (self.localpath_pdml)
            raise PktTraceCollectorError(msg)
        self.log.info('PktTraceCollect: generated pdml file %s'  % (self.localpath_pdml))

        # 152102 Set the path for test result data
        self.resultpath = self.context['nextest.result_path']
        self.resultprefix = self.context['qmtest.id'].replace('.','-')
        self.resultfile = '%s_rogRtp.pcap' %self.resultprefix
        self.resultpdml = '%s_rogRtp.pdml' %self.resultprefix
         
        cmd = 'sudo cp ' + self.capfile + ' ' + self.resultpath + '/' + self.resultfile
        cmd1 = 'sudo cp ' + self.localpath_pdml + ' ' + self.resultpath + '/' + self.resultpdml
        
        # 152102 Store the pcap and pdml file for debugging
        if not os.path.isdir(self.resultpath):
            os.makedirs(self.resultpath)

        self.log.info('PktTraceCollect: Store the pcap and pdml file for debugging')
        os.system(cmd)
        self.log.info('PktTraceCollect: %s' %cmd)
        os.system(cmd1)
        self.log.info('PktTraceCollect: %s' %cmd1)

    def readNum(self):
	    
            outFile = self.rtpfile 
            outputFile = open(outFile,'r')
	    a = outputFile.readlines()
	    outputFile.close()
	    return len(a)

    def getMediaStats(self, bkup = False):
	    try:
	        pktsFwd = -1 
                if self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'HKNIFE':
                    cmd = "statclient dumpipv4stat | grep Forwarded | awk '{print $3}'"
                    if ((self.scmConfig == True) and (bkup == True)):
                        output = self.bkmsw.filter(cmd)
                    else:
                        output = self.msw.filter(cmd)
                    output=output.strip('|')
                    pktsFwd=output.split('\r\n')[1]
                elif self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'Cavium':
                    # PR 152000, Correct the command
                    #cmd = "statclient -z showMediaStat | grep Forwarded | cut -d':' -f 2"
                    cmd = "statclient -z showMediaStat | grep Fwd | cut -d':' -f 2"
                    if ((self.scmConfig == True) and (bkup == True)):
                        output = self.bkmsw.filter(cmd)
                    else : 
                        output = self.msw.filter(cmd)
                    output=output.strip('|')
                    # PR 152000
                    #pktsFwd=output.split('\r\n')[0]
                    output=output.split('\r\n')
                    output0=output[0].strip('')
                    output1=output[1].strip('')
                    pktsFwd=int(output0) + int(output1)

	        else:
	            msg ="Media card is not HKNIFE or Cavium in userconfig.cfg"
                    self.log.error(msg)
                    raise RogueRtpError(msg)
                return  pktsFwd
	    except:
	            msg ="Error reading media statistics"
                    self.log.error(msg)
                    return -1 
    
    def clearMediaStats(self, bkup = False):

            if self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'HKNIFE':
                cmd = 'statclient zeroIpv4Stat'
                if ((self.scmConfig == True) and (bkup == True)):
                    self.bkmsw.assertCommand(cmd)
                else:  		
                    self.msw.assertCommand(cmd)
            elif self.context.has_key('userConfig.media_card') and self.context['userConfig.media_card'] == 'Cavium':
                cmd = ('statclient -z showMediaStat')
                if ((self.scmConfig == True) and (bkup == True)):
                    self.bkmsw.assertCommand(cmd)
                else:  		
                    self.msw.assertCommand(cmd)
	    else:
	        msg ="Media card is not HKNIFE or Cavium in userconfig.cfg"
                self.log.error(msg)
                raise RogueRtpError(msg)
	    
	
def restore(rtpfile):
	"""
	Cleanup the temp files created during the session
	"""
        log = logging.getLogger('nextestlog')
	localpath_pdml = '/tmp/rogRtp.pdml'
	a = rtpfile+'.tmp'
	bkup = rtpfile+'.bk' 
	try:
            if os.path.isfile(a):
                os.remove(a)
                log.info('Removed the file "%s" '  % (a))
	   
	    if os.path.isfile(localpath_pdml):
                os.remove(localpath_pdml)
                log.info('Removed the file "%s" '  % (localpath_pdml))
		
            if os.path.isfile(bkup):
                cmd = 'cp %s %s' %(bkup,rtpfile)
	        os.system(cmd)
                os.remove(bkup)
                log.info('Removed the file "%s" '  % (bkup))
        except Exception,e:
	    log.error("Error occured while cleanup")
	    raise RogueRtpError("%s" %e)
            
	    
def replaceIpPort(rtpfile,rtpsendAddr):
    """
	This function replaces the place holders"<Ip:Port>"
	in the rtpsend input files with valid values

    """
    log = logging.getLogger('nextestlog')
    pktsSent = 0
    rtpsendPort = '50000'
    try:
        if not os.path.isfile(rtpfile):
            msg = "Input file '%s' for rtpsend tool not present " % (rtpfile)
        else:
	    msg = "Unable to create copy of file %s " %(rtpfile) 
            cmd = 'cp %s %s.bk' %(rtpfile,rtpfile)
	    os.system(cmd)
    except:	    
        raise RogueRtpError(msg)

    try:
        inputFile = open(rtpfile,'r')
        fileDataList = inputFile.readlines()
        addr = rtpsendAddr
        inputFile.close()
        lineno = 0
        a = []
        str = 'from='+ rtpsendAddr +':'+ rtpsendPort
        for item in fileDataList:
            if item.startswith('#'):
                continue
            if item.__contains__('from'):
                a.append(item.replace('from=Ip:Port',str))
            
        outFile = rtpfile +'.tmp'
        outputFile = open(outFile,'w')
        pktsSent = len(a)
        outputFile.writelines(a)
        outputFile.close()
        rtpfile = outFile 
        log.info('Generated the input file "%s" for rtpsend '  % (rtpfile))
        return pktsSent
    except:
        msg = " Error generating the rtpsend input file"
        raise RogueRtpError(msg)
 
	    
class RogueRtpTest(unittest.TestCase):
    """
    Unittest class for testing RogueRtp class.
    """
    def test_1(self):
        """
        check runCommand()
        """

        file = '/var/opt/nextest/tdb/production_components.qms/rogue-rtp.qms/rtpFiles/rtpPacket'
        rtpsendAddr='localhost'
	rtpsendPort='50000'
	#replaceIpPort(file,rtpsendAddr)
	restore(file)
    
    def test_2(self):
	#return
        cody = RogueRtp(
                              rtpsendAddr='localhost',
                              file = '/var/opt/nextest/tdb/production_components.qms/rogue-rtp.qms/rtpFiles/rtpPackets',
			    
                              )
	cody.clean()
	list = ['10.19.0.158','10.19.0.157']
	#list = 
	#cody.startLocalTethereal(list)
	cody.startLocalTethereal('10.19.0.158','10.19.0.157')
	cody.start('172.16.43.134')
        #cody.endLocalTethereal()

if __name__ == '__main__':
    unittest.main()

