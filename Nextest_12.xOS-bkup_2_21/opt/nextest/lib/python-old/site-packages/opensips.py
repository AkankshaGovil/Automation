import pexpect,logging,time,os,commands
from session import SessionException
CTRL_C = '\x03'

class opensipsProxy(object):

    def __init__(self,ipAddr):
        self.ip = ipAddr
        self.confPath = '/opt/nextest/lib/opensips/etc/'
        # Create a new config file for this instance and modify ownership of the file
        self.confFile = self.confPath + 'opensips-new.cfg'
        os.system('sudo cp %sopensips.cfg %s' %(self.confPath,self.confFile))
        os.system('sudo chown -R test:users %s' %self.confFile)
        self.cmd = 'opensips -f %s -n 1 -l %s' %(self.confFile,self.ip)
        self.log = logging.getLogger('nextestlog')
        self.spawnProc = None
 
    def start(self):
        try:
            tmpstr1 = commands.getoutput('pgrep -x opensips')
            if tmpstr1:
                # Kill the opensips process if it is already running
                os.system('sudo pkill opensips')
                self.log.debug('opensipsProxy.Start: Killed the errant opensips process')

            self.spawnProc = pexpect.spawn(self.cmd,timeout=60)
            if not self.spawnProc:
                msg = 'opensipsProxy.Start: Failed to spawn command: %s' % self.cmd
                self.log.error(msg)
                raise SessionException(msg)

        except pexpect.TIMEOUT:
            msg = 'opensipsProxy.Start: Timedout while spawning Opensips process!'
            self.log.error(msg)
            raise SessionException(msg)
        except Exception, exc:
            msg = 'opensipsProxy.Start: Caught %s' % exc
            self.log.error(msg)
            raise SessionException(msg)

        match = self.spawnProc.expect(['Listening on',pexpect.EOF,pexpect.TIMEOUT],timeout=30)
        if match != 0:
            msg = 'opensipsProxy.Start: Failed to get prompt - Listening on'
            self.log.error(msg)
            raise SessionException(msg)

        self.log.debug('opensipsProxy.Start: Successfully started opensips process')
        self.isConnected = True
        self.pid = self.spawnProc.pid
        
    def stop(self):
        if self.spawnProc.isalive():
            self.spawnProc.sendline(CTRL_C)
            time.sleep(10)
            if self.spawnProc.isalive():
                self.log.debug('opensipsProxy.stop: Killing the process using pkill')
                os.system('sudo pkill -9 opensips')
            else:
                self.log.debug('opensipsProxy.stop: Successfully stopped opensips process')
        else:
            self.log.debug('opensipsProxy.stop: opensips process is not running')

        # Revert back the original config file
        os.system('sudo cp %sopensips.cfg %s' %(self.confPath,self.confFile))

    def addServiceRouteHdr(self,ip,port='5060'):
        # This function is used to modify the configuration file of opensips to include
        # Service-Route header field with the given ip in the 200 OK response of REGISTER message
        inpFile = open(self.confFile,'r')
        oldCont = inpFile.readlines()
        inpFile.close() 

        # Check if the information is already present in the config file
        tmpstr1 = commands.getoutput('grep "Service-Route:" ' + self.confFile)
        if tmpstr1.__contains__(ip + ':' + port):
            self.log.error('opensipsProxy.addServiceRouteHdr: Service Route header for the given ip is already added to the config file')
            return False

        # String to be included
        line1 = '\tif (method=="REGISTER")\n'
        line2 = '\t\tappend_to_reply("Service-Route: <sip:%s:%s;lr>\\r\\n");\n' %(ip,port)

        found = False
        strToCmp = 'if (is_method("REGISTER"))'
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__(strToCmp):
                found=True
                oldCont.insert(i,line1)
                oldCont.insert(i+1,line2)
                break

        if found:
            outFile = open(self.confFile,'w')
            oldCont = outFile.writelines(oldCont)
            outFile.close()
            self.log.debug('opensipsProxy.addServiceRouteHdr: Successfully modified config file')
            return True
        else:
            self.log.error('opensipsProxy.addServiceRouteHdr: Failed for modify config file')
            return False

    def addPathSupport(self):
        # This function is used to modify the configuration file of opensips to include
        # path header field in its requests/responses
        inpFile = open(self.confFile,'r')
        oldCont = inpFile.readlines()
        inpFile.close()

        # Check if the information is already present in the config file
        tmpstr1 = commands.getoutput('grep ' + "'" + 'loadmodule "path.so"' + "' " + self.confFile)
        if tmpstr1:
            self.log.error('opensipsProxy.addPathSupport: Path support already added in config file')
            return False

        # String to be included
        line1 = 'loadmodule "path.so"\n'
        line2 = '# -- Path Header Support --\n'
        line3 = 'modparam("usrloc", "path_column","path")\n'
        line4 = 'modparam("registrar", "use_path",1)\n'
        line5 = 'modparam("registrar", "path_mode",1)\n'

        found = False
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__('loadmodule'):
                found=True
                break

        if found:
            oldCont.insert(i,line1)
        else:
            self.log.error('opensipsProxy.addPathSupport: Failed for modify config file') 
            return False

        found = False
        for i in range(0,len(oldCont)):
            if oldCont[i].__contains__('setting module-specific parameters'):
                found=True
                break

        if found:
            oldCont.insert(i+1,line2)
            oldCont.insert(i+2,line3)
            oldCont.insert(i+3,line4)
            oldCont.insert(i+4,line5)
        else:
            self.log.error('opensipsProxy.addPathSupport: Failed for modify config file')
            return False

        outFile = open(self.confFile,'w')
        oldCont = outFile.writelines(oldCont)
        outFile.close()
        self.log.debug('opensipsProxy.addPathSupport: Successfully modified config file')
        return True
