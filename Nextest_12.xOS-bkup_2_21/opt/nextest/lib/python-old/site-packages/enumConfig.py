import os
import socket
import logging
import time

log = logging.getLogger('nextestlog')

def changeOwn():
    """ Changing ownership, permission of resolv.conf and named.conf 
        files. This is required to so that enum server runs properly
    """
    os.system('sudo chown -R test:users /etc/resolv.conf')
    os.system('sudo chown -R test:named /etc/named.conf')


def zone(enum_path):
    """ Copy "e164.zone" file from 
        /var/opt/nextest/tdb/production_components.qms/enum.qms 
        to /var/lib/named. Modify the file so that it will 
        contain the actual ip addresses.
    """
    lip = socket.gethostbyname('mygen')
    sipb = socket.gethostbyname('prv_rsa')
    sip1 = socket.gethostbyname('public8')
    #34101 Modified realmIP to endpoint IP so that SETUP/INVITE message will go through enum_realm
    h323b = socket.gethostbyname('private8')
    h323c = socket.gethostbyname('public10')
    #34101 Added due to new entry in e164.zone file
    sip2 = socket.gethostbyname('private7')
    sip3 = socket.gethostbyname('public1')
    #32363 Enum realm IP needs to passed for GK
    h323_gk = socket.gethostbyname('enum_realm')
    #43997 Modified due to change in resource
    endpointIP = socket.gethostbyname('public3')
    pub_rsa_ip = socket.gethostbyname('pub_rsa')
    pvt1_ip = socket.gethostbyname('private1')
    pvt2_ip = socket.gethostbyname('private2')
    pvt3_ip = socket.gethostbyname('private3')
    pvt5_ip = socket.gethostbyname('private5')

    #45529 - IPAddress of proxy will be replaced in zone file
    proxy_ip = socket.gethostbyname('ast_sipproxy')

    if enum_path == '/var/opt/nextest/tdb/production_components.qms/multiple_DNS.qms/':

        #To edit abc.zone for MDNS suite
        zone_path = enum_path + 'abc.zone'
        try:
            os.system('sudo cp %s /var/lib/named/abc.zone' %zone_path )
            os.system('sudo chown -R test:users /var/lib/named/abc.zone') 
        except Exception, e:
            msg = "file error: %s" % str(e)
            log.error("%s" %str(msg))
    
        try:
            zfile=open('/var/lib/named/abc.zone',"r")
            zList = zfile.readlines()
            zfile.close()
    
            for i in zList:
                if i.__contains__('private1_ip'):
                    str1 = i.replace('private1_ip',pvt1_ip)
                    ind = zList.index(i) 
                    zList[ind] = str1
                elif i.__contains__('private2_ip'):
                    str1 = i.replace('private2_ip',pvt2_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('private3_ip'):
                    str1 = i.replace('private3_ip',pvt3_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('private5_ip'):
                    str1 = i.replace('private5_ip',pvt5_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('pub_rsa'):
                    str1 = i.replace('pub_rsa',pub_rsa_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
    
            zfile = open('/var/lib/named/abc.zone',"w")
            zfile.writelines(zList)
            zfile.close()
        except Exception, e:
            msg = "file error: %s" % str(e)
            log.error('File /production_components.qms/multiple_DNS.qms/abc.zone does not exist %s' %str(msg))

    elif enum_path == '/var/opt/nextest/tdb/production_components.qms/bt_feature.qms/sipoptionchanges.qms/':

        zone_path = enum_path + 'e164.zone'
        try:
            os.system('sudo cp %s /var/lib/named/e164.zone' %zone_path )
            os.system('sudo chown -R test:users /var/lib/named/e164.zone')
        except Exception, e:
            msg = "file error: %s"%str(e)
            log.error("%s"%str(msg))

        try:	    
            # Get IPs
            sipopt_proxy_ip = socket.gethostbyname('sipproxy')
            sipopt_boston_ip = socket.gethostbyname('boston')
            sipopt_portland_ip = socket.gethostbyname('portland')
            sipopt_maryland_ip = socket.gethostbyname('maryland')
            sipopt_portland2_ip = socket.gethostbyname('public1')

            zfile = open('/var/lib/named/e164.zone',"r")
            zList = zfile.readlines()
            zfile.close()

            # Replace IPs
            for i in zList:
                if i.__contains__('SIPPROXY_IP'):
                    str1 = i.replace('SIPPROXY_IP',sipopt_proxy_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('PHONE_BOSTON'):
                    str1 = i.replace('PHONE_BOSTON',sipopt_boston_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('IP_PORTLAND'):
                    str1 = i.replace('IP_PORTLAND',sipopt_portland_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('IP_MARYLAND'):
                    str1 = i.replace('IP_MARYLAND',sipopt_maryland_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('IP2_PORTLAND'):
                    str1 = i.replace('IP2_PORTLAND',sipopt_portland2_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                   
            zfile = open('/var/lib/named/e164.zone',"w")
            zfile.writelines(zList)
            zfile.close()
        except Exception, e:
	    msg = "file error: %s" % str(e)
            log.error("File /production_components.qms/bt_feature.qms/sipoptionchanges.qms/e164.zone does not exist %s"%str(msg))
          
    else:

        zone_path = enum_path + 'e164.zone'
        #31291 - Included sudo to copy the Zone file
        try:
            os.system('sudo cp %s /var/lib/named/e164.zone' %zone_path )
            #32363 - Done changes to change the ownership
            os.system('sudo chown -R test:users /var/lib/named/e164.zone') 
        except Exception, e:
            msg = "file error: %s" % str(e)
            #32363 Modified to resolve string formatting error
            log.error("%s" %str(msg))
    
        try:
            zfile=open('/var/lib/named/e164.zone',"r")
            zList = zfile.readlines()
            zfile.close()
    
            for i in zList:
                if i.__contains__('localip'):
                    str1 = i.replace('localip',lip)
                    ind = zList.index(i) 
                    zList[ind] = str1
                elif i.__contains__('sip1ip'):
                    str1 = i.replace('sip1ip',sip1)
                    ind = zList.index(i)
                    zList[ind] = str1
                #34101 - Added this code due to new entry in e164.Zone file
                elif i.__contains__('sip2ip'):
                    str1 = i.replace('sip2ip',sip2)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('sip3ip'):
                    str1 = i.replace('sip3ip',sip3)
                    ind = zList.index(i)
                    zList[ind] = str1 
                elif i.__contains__('sipbip'):
                    str1 = i.replace('sipbip',sipb)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('h323bip'):
                    str1 = i.replace('h323bip',h323b)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('h323cip'):
                    str1 = i.replace('h323cip',h323c)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('h323gkip'):
                    str1 = i.replace('h323gkip',h323_gk)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('endpointIP'):
                    str1 = i.replace('endpointIP',endpointIP)
                    ind = zList.index(i)
                    zList[ind] = str1
                #45529
                elif i.__contains__('proxyip'):
                    str1 = i.replace('proxyip',proxy_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                #143160
                elif i.__contains__('private1_ip'):
                    str1 = i.replace('private1_ip',pvt1_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
                elif i.__contains__('pub_rsa'):
                    str1 = i.replace('pub_rsa',pub_rsa_ip)
                    ind = zList.index(i)
                    zList[ind] = str1
    
    
            zfile = open('/var/lib/named/e164.zone',"w")
            zfile.writelines(zList)
            zfile.close()
        except Exception, e:
            msg = "file error: %s" % str(e)
            #31291 - Changed the path of the file
            #32363 Modified to resolve string formatting error
            log.error('File /production_components.qms/enum.qms/e164.zone does not exist %s' %str(msg))


def modifyNamed():

    """ Modify named.conf file on host machine
        This function will add the following lines before 
        line - include "/etc/named.conf.include"; in the 
        /etc/named.conf file
 
        zone "e164.com" in {
        type master;
        file "e164.zone";
        };
        
    """
    try:
        nconfile = open('/etc/named.conf',"r")
        nconf=nconfile.readlines()
        nconfile.close()
        if (nconf.__contains__('zone "e164.com" in {\n') == False):
            # Back up the original file on local host
            if (os.path.isfile('/etc/named.conf.bkup') == False):
                os.system('sudo cp /etc/named.conf /etc/named.conf.bkup')
            pos = nconf.index('include "/etc/named.conf.include";\n')
            temp1 = 'zone "e164.com" in {\n        type master;\n' + \
                             '        file "e164.zone";\n};\n'
            nconf.insert(pos,temp1)
            nconfile = open('/etc/named.conf',"w")
            nconfile.writelines(nconf)
            nconfile.close()
        else:
            log.info('File named.conf already contains e164 information')
    except Exception, e:
        msg = "file error: %s" % str(e)
        #32363 Modified to resolve string formatting error
        log.error('File named.conf does not exist %s' %str(msg))


def modifyNamed_mdns():

    """ Modify named.conf file on host machine
        This function will add the following lines before
        line - include "/etc/named.conf.include"; in the
        /etc/named.conf file

        zone "abc.com" in {
        type master;
        file "abc.zone";
        };

    """
    try:
        nconfile = open('/etc/named.conf',"r")
        nconf=nconfile.readlines()
        nconfile.close()
        if (nconf.__contains__('zone "abc.com" in {\n') == False):
            # Back up the original file on local host
            if (os.path.isfile('/etc/named.conf.bkup') == False):
                os.system('sudo cp /etc/named.conf /etc/named.conf.bkup')
            pos = nconf.index('include "/etc/named.conf.include";\n')
            temp1 = 'zone "abc.com" in {\n        type master;\n' + \
                             '        file "abc.zone";\n};\n'
            nconf.insert(pos,temp1)
            nconfile = open('/etc/named.conf',"w")
            nconfile.writelines(nconf)
            nconfile.close()
        else:
            log.info('File named.conf already contains abc.com information')
    except Exception, e:
        msg = "file error: %s" % str(e)
        #32363 Modified to resolve string formatting error
        log.error('File named.conf does not exist %s' %str(msg))


#PR 139239 Added function to modify resolve.conf on MSX and gen as per MDS feature in 6.0
def modifyResolve_6_0(msw):
    """ Modify "/etc/resolv.conf" file on host machine 
        to configure the host machine as DNS server and e164.com as
        the domain
        On the MSX machine for as per MDN feature the resolve.conf should have 
        the loopback ip as the nameserver
    """
    hostip = socket.gethostbyname('mygen')
    name = 'nameserver ' + hostip+'\n'
    name1 = 'search e164.com'+'\n'
    newFileContents = [name,name1]
    name_msw='nameserver 127.0.0.1\n'

    try:
        # Back up the original file on local host
        if (os.path.isfile('/etc/resolv.conf.bkup') == False):
            os.system('sudo cp /etc/resolv.conf /etc/resolv.conf.bkup')
        rconfile = open('/etc/resolv.conf',"w")
        rconfile.writelines(newFileContents)
        rconfile.close()

        rconfile = open('/tmp/resolv_msw.conf',"w")
        rconfile.writelines(name_msw)
        rconfile.close()

        ##31291 Taking the bkup of resolv.conf file from MSW to the
        ##/tmp directory of msw
        resultString = msw.filter('ls -lrt /tmp/resolv.conf.enum.bkup')
        if (resultString.find('No such file or directory') !=-1):
           msw.assertCommand('cp /etc/resolv.conf /tmp/resolv.conf.enum.bkup')

        # Copy the new File to the MSW
        os.system("scp -q /tmp/resolv_msw.conf root@mymsw:/etc/resolv.conf")
        log.debug("Copying /tmp/resolv_msw.conf on msw")

        if (msw.context['nextest.scm_configuration'] == 'ON'):

            os.system("scp -q /tmp/resolv_msw.conf root@bkupmsw:/etc/resolv.conf")
            log.debug("Copying /tmp/resolv_msw.conf on backup msw")


    except Exception, e:
        msg = "file error: %s" % str(e)
        #32363 Modified to resolve string formatting error
        log.error('File resolv.conf does not exist %s' %str(msg))

#Old version of modifyResolve.conf
def modifyResolve(msw):

    """ Modify "/etc/resolv.conf" file on host machine and on iserver
        to configure the host machine as DNS server and e164.com as 
        the domain
    """
    hostip = socket.gethostbyname('mygen')
    name = 'nameserver ' + hostip+'\n'
    name1 = 'search e164.com'+'\n'
    newFileContents = [name,name1]

    try:
        # Back up the original file on local host
        if (os.path.isfile('/etc/resolv.conf.bkup') == False):
            os.system('sudo cp /etc/resolv.conf /etc/resolv.conf.bkup')
        rconfile = open('/etc/resolv.conf',"w")
        rconfile.writelines(newFileContents)
        rconfile.close()


        ##31291 Taking the bkup of resolv.conf file from MSW to the 
        ##/tmp directory of msw 
        resultString = msw.filter('ls -lrt /tmp/resolv.conf.enum.bkup') 
        if (resultString.find('No such file or directory') !=-1):
           msw.assertCommand('cp /etc/resolv.conf /tmp/resolv.conf.enum.bkup')

        # Copy the new File to the MSW
        os.system("scp -q /etc/resolv.conf root@mymsw:/etc/resolv.conf")

    except Exception, e:
        msg = "file error: %s" % str(e)
        #32363 Modified to resolve string formatting error
        log.error('File resolv.conf does not exist %s' %str(msg))

def modifyIserver(mswName):

    """ Modify server.cfg to configure enum policy
        This function will add the following line before maxhunt
        policy enumdomain "e164.com"

        mswName - Name of the MSW 

    """

    serverpath = "/usr/local/nextone/bin/server.cfg"
    try:
        bkupFile = '/tmp/server.cfg.%s.bkup' %mswName
              
        # Copy the server.cfg file from MSW to the local host
        if (os.path.isfile(bkupFile) == False):
            os.system("scp -q root@" + mswName + ":" + serverpath + " " + bkupFile)
        
        os.system('scp -q root@%s:%s /tmp/server.cfg' %(mswName,serverpath))

        fin=file('/tmp/server.cfg','r')
        inpList = fin.readlines()
        fin.close()

        position = -1
        pstr = '\tpolicy enumdomain "e164.com"\n '

        # Insert the enum domain configuration 
        if (inpList.__contains__(pstr) == False):
            # Find the index of maxhunt
            for i in inpList:
                if i.__contains__('maxhunts'):
                    position = inpList.index(i)
                    break

            if position != -1:
                inpList.insert(position,pstr)
                fout=file('/tmp/server.cfg','w')
                fout.writelines(inpList)
                fout.close()
            else:
                log.info('maxhunts entry not present in server.cfg file')
        else:
            log.info('File server.cfg already contains enum '+ \
                                 'policy information')

        # Copying the server.cfg file to MSW
        os.system("scp -q /tmp/server.cfg root@" + mswName + ":" + serverpath )

    except Exception, e:
        msg = "file error: %s" % str(e)
        #32363 Modified to resolve string formatting error
        log.error('File server.cfg does not exist %s' %str(msg))


def ModifyScenarioFiles(base_path):

    """ Modify both the ScenarioFiles/Basic_Receiver.xml files so that 
        they will contain the actual remote ip addresses
        This is needed for verifying whether the FROM header contains 
        the correct realm ip
    """
    enumrealm = socket.gethostbyname('enum_realm')
    prirealm = socket.gethostbyname('prv_rsa')
    pubrealm = socket.gethostbyname('pub_rsa')

    strList = ['ENUM_REALM_IP','PRI_REALM_IP','PUB_REALM_IP']
    repList = [enumrealm,prirealm,pubrealm]
    fileName = ['Basic_Receiver_enum.xml','Basic_Receiver_pri.xml','Basic_Receiver_pub.xml']
 
    try:
        for i in range(len(strList)):
            zfile=open(base_path + fileName[i],"r")
            zList = zfile.readlines()
            zfile.close()

            for j in zList:
                if j.__contains__(strList[i]):
                    str1 = j.replace(strList[i],repList[i])
                    ind = zList.index(j)
                    zList[ind] = str1
                    break
            
            zfile=open(base_path + fileName[i],"w")
            zList = zfile.writelines(zList)
            zfile.close()
    except Exception, e:
        log.error('error: %s' %str(e))

#PR 139239 Added function to restart named on MSX as per MDS feature in 6.0
def remoteNamedRestart(msw):
    """This function restarts named on the MSX machine
    """

    try:
        msw.assertCommand('/etc/init.d/named restart')
        time.sleep(20)
        namedStatus = msw.filter("pgrep -x named")
        namedStatus = namedStatus.strip('|')
        if not namedStatus:
            print "Named not running on MSX"
            log.error("Named not running on MSX")
        else:
            log.debug("Named restarted on MSX")

    except:
        log.error('Unable to start named on MSX')


