from time import *
import os, string
import globalVar
import commands
# 33778  
import mswSCMConfigInterface

#38156
import logging
log = logging.getLogger('nextestlog')

# 29725 - Time out value changed in the file
cliTimeout =  int (globalVar.cliTimeout)
def deleteCP(msw, start=None):
    """ Deletes all CP names starting with 'start' 
    	WARNING!!! Cli does not allow to delete the CP if
    	it has any aggregate binding.
    	Call  deleteAggBindings(msw) before calling this function.
    """
    global cliTimeout
    if ( ( start is None) or (start == "") ) :
	# 29725 - Time out value changed
        msw.assertCommand('for i in  $(cli cp list | cat ); do cli cp delete $i; done' ,timeout=cliTimeout)

    else :
        msw.assertCommand('for i in  $(cli cp list |grep "^%s" ); do cli cp delete $i; done' %start,timeout=cliTimeout)


def deleteCR(msw, start= None):
    """ Deletes all CR names starting with 'cr_' """
    global cliTimeout

    if ( ( start is None) or (start == "") ) :
        msw.assertCommand('for i in  $(cli cr list | cat ); do cli cr delete $i; done'  ,timeout=cliTimeout)

    else :
        msw.assertCommand('for i in  $(cli cr list |grep "[ ]*%s"); do cli cr delete $i; done' %start,timeout=cliTimeout )

def deleteAggBindings(msw, start=None ):
    """ Deletes all Aggregate bindings  where wither the route name
        name starting with 'start' or Calling Plan Name Starts with 'start' """
    global cliTimeout

    if ( ( start is None) or (start == "") ) :
        msw.assertCommand("""for i in  $(cli cp list bindings | cat );do cli cp delete `echo $i| tr -s '/' ' '`;  done""" ,timeout=cliTimeout)

    else :
        msw.assertCommand("""for i in  $(cli cp list bindings |grep "[ ]*%s" );do cli cp delete `echo $i| tr -s '/' ' '`;  done""" %start,timeout=cliTimeout)


def deleteEndpoints(msw, start=None):
    """ Deletes all Uports whose Registration ID starts with  'start' """
    global cliTimeout

    # 21196
    mswinfo = msw.context['mswinfo']
    ver_Check = mswinfo.compareiServerVersion('4.2')
    
    if (ver_Check >= 0):
        if ( ( start is None) or (start == "") ) :
            msw.assertCommand(""" for reg in $(cli iedge list |grep "Registration ID" | awk '{print $3}' | uniq); do for port in $(cli iedge lkup $reg | grep -w Port | grep -v NAT | awk '{print $2}'); do cli iedge delete $reg $port; done done"""  ,timeout=cliTimeout)
        else :
            msw.assertCommand(""" for reg in $(cli iedge list |grep "Registration ID" |grep "%s" |awk '{print $3}' | uniq); do for port in $(cli iedge lkup $reg | grep -w Port | grep -v NAT | awk '{print $2}'); do cli iedge delete $reg $port; done done""" %start ,timeout=cliTimeout)
    elif ((ver_Check < 0) and (ver_Check != -99)):
        if ( ( start is None) or (start == "") ) :
            msw.assertCommand(""" for reg in  $(cli iedge list  |grep Registration|awk '{print $3}');do  for port in $(cli iedge lkup $reg | grep -w Port | grep -v NAT | awk '{print $2}'); do cli iedge delete $reg $port; done done""" ,timeout=cliTimeout)

        else :
            msw.assertCommand(""" for reg in  $(cli iedge list  |grep Registration|grep "%s" |awk '{print $3}');do  for port in $(cli iedge lkup $reg | grep -w Port | grep -v NAT | awk '{print $2}'); do cli iedge delete $reg $port; done done""" %start ,timeout=cliTimeout) 


def deleteRealms(msw, start=None):
    """ Deletes all Realms whose name starts with  'start' """
    global cliTimeout

    if ( ( start is None) or (start == "") ) :
	msw.assertCommand(""" for i in  $(cli realm list | grep "^Realm" | tr -s "/" " "| awk '{print $2}');do  cli realm delete $i; done """,timeout=cliTimeout)

    else :
	msw.assertCommand(""" for i in  $(cli realm list | grep "^Realm" | grep "%s" | tr -s "/" " "| awk '{print $2}');do  cli realm delete $i; done """ %start,timeout=cliTimeout)

def deleteRadServers(msw,start=None):
    """ Deletes all  whose name send with  'server' """
    if ( ( start is None) or (start == "") ) :
        msw.assertCommand(""" for reg in  $(cli aaaserver list | grep "AAAServerName" | awk '{print $2}' | uniq);do cli aaaserver delete $reg; done""" ,timeout=cliTimeout) 
    else:
        msw.assertCommand(""" for reg in  $(cli aaaserver list | grep "AAAServerName" | grep "%s" | awk '{print $2}');do cli aaaserver delete $reg; done""" ,timeout=cliTimeout)
	
def updateTG(msw, ep, port, src="", newdtg="", newitg="", dtg="", senddest="enable", rmsrc="disable"):

    """ Configure the endpoint
    """
    global cliTimeout
    commandLine  = 'cli iedge edit %s %s '%(ep,port)
    commandLine += ' tg "%s" '%(src)
    commandLine += ' newsrcdtg  "%s"' %(newdtg)
    commandLine += ' newsrcitg "%s"'  %(newitg)
    commandLine += ' dtg "%s"' %(dtg)
    commandLine += ' setdesttg  %s' %(senddest)
    commandLine += ' removetg  %s' %(rmsrc)
    msw.assertCommand(commandLine,timeout=cliTimeout)   

# 30618 Code for setting called and calling party types
def setCdCgType(msw, ep, port, cdparty="", cgparty=""):

    """ Configure the endpoint
    """
    global cliTimeout
    commandLine  = 'cli iedge edit %s %s '%(ep,port)
    commandLine += ' cdpntype %s'%(cdparty)
    commandLine += ' cgpntype %s' %(cgparty)
    msw.assertCommand(commandLine,timeout=cliTimeout)


def ftest(msw, mswinfo, mswConf, set=0):
    """ Depending upon the OS and iserver Version firewall value is updated to either
        NSF,HKNIFE or MS. If set is equal to -1, then the firewall is updated as none.
    """

    verCheck_4_0 = mswinfo.compareiServerVersion('4.0')
    updated = False

    if (set == -1):
        fwName = 'none'
        updated = True

    if (set == 0):
        fname = mswConf.getMSWConfig(msw,'FirewallName')
        if mswinfo.ostype == 'SunOS':
            if (fname.__contains__('NSF') == False):
                fwName = 'NSF'
                updated = True
        else:
            if (verCheck_4_0 == 0):
                if (fname.__contains__('HKNIFE') == False):
                    print "inside if HKNIFE"
                    fwName = 'HKNIFE'
                    updated = True
            elif (verCheck_4_0 == 1):
                if (fname.__contains__('MS') == False):
                    fwName = 'MS'
                    updated = True

    if updated:
        mswConf.setMSWConfig(msw,'FirewallName',fwName)
        # 33778 - added code for restarting iserver in scm mode 
        #Restart iServer
        if (msw.context['nextest.scm_configuration'] == 'ON'):
            mswSCMConfigInterface.restartSCM(msw)
        else:
            msw.assertCommand('iserver all stop',timeout=int(globalVar.iserverStopTimeout))
            msw.assertCommand('iserver all start',timeout=int(globalVar.iserverStopTimeout))
        sleep(5)

# 35175 - Function used to modify /etc/hosts file entry
def ModifyHostsFile(fcontents,entry,ip):

    """ This function is used to find if an entry is found in the hosts file
        contents and if required, set the value of the entry to the ip specified

        fcontents - List containing the contents of the /etc/hosts file
        entry     - Entry that is to be verified and modified, if required
        ip        - Value to be set to the entry

        Returns an empty list if the contents is not modified and the updated list 
        if there has been any modification made.
 
    """

    pubtest = ''
    modified = False
    ind = 0
    for cont in fcontents:
        ind += 1
        if not cont.__contains__('#'):
            if cont.__contains__(entry):
                pubtest = cont
                pubind = ind
                break

    if pubtest == '':
        # Add a new entry
        entry = ip + ' ' + entry + '\n'
        fcontents.append(entry)
        modified = True

    elif not pubtest.__contains__(ip):
        pubtestList = pubtest.split(' ')
        if pubtestList[0].__contains__('\t'):
            origipList = pubtestList[0].split('\t')
            origipaddr = origipList[0]
        else:
            origipaddr = pubtestList[0]
        entry = pubtest.replace(origipaddr,ip)
        fcontents[ind-1] = entry
        modified = True

    if modified:
        return fcontents
    else:
        return []

#37410
def getDBInfo(msw,paramName): 
    """ This function is used to find the total number of paramName entries
        stored in MSW database using cli db info command

        msw       - Object used to issue command on the MSX
        
        Returns the total number of entries

    """
    mswinfo = msw.context['mswinfo']
    ver_Check = mswinfo.compareiServerVersion('4.2')
    paramInfo = getParamInfo(msw,paramName)
    if ver_Check >= 0:
       temp = msw.assertCommand("cli db info | grep %s" %paramInfo,timeout=10000)
       temp = temp.split()
       cpOldCount = temp[-3] 
    else:
       temp = msw.assertCommand('cli db info | grep -A 2 "%s" | grep entries' %paramInfo,timeout=10000)
       temp = temp.strip('|')
       temp = temp.split()
       cpOldCount = temp[-3]
    return cpOldCount 


#37410
def getParamInfo(msw,paramName):
    """ This function is used to find the parameter name for input parameter paramName
        from the output of dbinfo comamnd

        paramName - Input parameter (Eg:callingplans)

        Returns the parameter name present in output of dbinfo command

    """
    mswinfo = msw.context['mswinfo']
    ver_Check = mswinfo.compareiServerVersion('4.2')
    if ver_Check >= 0:
         return paramName
    else:
         #40747 - Added triggers in the dictionary to get the trigger information from db info
         tempDict = {"callingplans":"Call Plan  DB File", "callingroutes":"Call Route  DB File",\
                     "cpbindings":"Call Plan Bind DB File","endpoints":"iedge DB File",\
                     "realms":"Realm DB File","vnet":"Vnet DB File","igrp_dynInfo":"Igrp DB File",\
                     "triggers":"Trigger"}
         return tempDict[paramName]
    return None


#37217 -added a new function
# 38485: Added a new argument bkup - This is sent as True if the target is bkupmsw
def generateMswLicense(msw,paramname,value,verCheck,bkup=False):
    """ This function is used to copy the iserverlc.xml from MSW modify an entry, 
        regenerate the license with lgenx and update it on MSW

        paramname - Name of the field to modify
        value     - Value to be set for the paramname 
        verCheck  - To decide if nxconfig.pl to be used

    """

    #Take bkup of the license file
    msw.assertCommand('cp /usr/local/nextone/bin/iserverlc.xml /usr/local/nextone/bin/iserverlc.xml.bk37217')

    # Ticket-39552: Provision for bkupmsw
    if bkup:
        cmd = "scp -q root@bkupmsw:/usr/local/nextone/bin/iserverlc.xml /tmp/iserverlc.xml"
    else:
        cmd = "scp -q root@mymsw:/usr/local/nextone/bin/iserverlc.xml /tmp/iserverlc.xml"
    os.system(cmd)

    #Modify the license file
    # 43335 - Modify the license file to change EXPIRES value
    if paramname != 'EXPIRES':
        cmd = "perl -pi -e s/%s=\\'[0-9]*\\'/%s=\\'%s\\'/g /tmp/iserverlc.xml" % (paramname,paramname,value)
        os.system(cmd)
    else:
        zfile=open('/tmp/iserverlc.xml',"r")
        zList = zfile.readlines()
        zfile.close()
        a = zList[0].split(' ')
        del a[-1]
        a.append("%s'>\n"%value)
        all = " ".join(a)

        zList[0]=all
        zfile = open('/tmp/iserverlc.xml',"w")
        zfile.writelines(zList)
        zfile.close()

    # 43335 - Use the appropriate lgenx depending on the iserver version
    mswinfo = msw.context['mswinfo']
    verCheck_4_3 = mswinfo.compareiServerVersion('4.3')
    verCheck_5_0 = mswinfo.compareiServerVersion('5.0')
    verCheck_5_1 = mswinfo.compareiServerVersion('5.1')
    verCheck_5_2 = mswinfo.compareiServerVersion('5.2')

    if (verCheck_5_2 >= 0):
        fileName = 'lgenx-52'
    elif (verCheck_5_1 >= 0):
        fileName = 'lgenx-51'
    elif (verCheck_5_0 >= 0):
        fileName = 'lgenx-50'
    elif (verCheck_4_3 >= 0):
        fileName = 'lgenx-43'
    else:
        fileName = 'lgenx'
        
    #regenerate the file using lgenx 
    wd = os.getcwd()
    os.chdir('/tmp')
    cmd = ('/opt/nextest/bin/' + fileName + ' iserverlc.xml')
    os.system(cmd)
    os.chdir(wd)

    #upload the modified file to msw
    # Ticket-39552: Provision for bkupmsw
    if bkup:
        cmd = "scp -q /tmp/iserverlc.xml root@bkupmsw:/usr/local/nextone/bin/iserverlc.xml"
    else:
        cmd = "scp -q /tmp/iserverlc.xml root@mymsw:/usr/local/nextone/bin/iserverlc.xml"
    os.system(cmd)
    
    #remove the lc file from tmp folder
    os.system('rm /tmp/iserverlc.xml')

    #if version is greater than or equal to 4.2 then load the new license file
    if (verCheck >= 0):
        msw.assertCommand('nxconfig.pl -l -P /usr/local/nextone/bin')
    # 40328 - On 4.0 builds, 'cli lupdate' command needs to be executed for the new license file to be updated
    else:
        msw.assertCommand('cli lupdate')
    


#38156
def setSegsParam(mswName):
    
    """ 
        This function will add the following line before mswname 
        segs 669" 
    
        mswName - Name of the MSW 
    
    """
    
    serverpath = "/usr/local/nextone/bin/server.cfg"
    try:
        bkupFile = '/tmp/serv.cfg.%s.bkup' %mswName
               
        # Copy the server.cfg file from MSW to the local host
        if (os.path.isfile(bkupFile) == False):
            os.system("scp -q root@" + mswName + ":" + serverpath + " " + bkupFile)
        
        os.system('scp -q root@%s:%s /tmp/server.cfg' %(mswName,serverpath))

        fin=file('/tmp/server.cfg','r')
        inpList = fin.readlines()
        fin.close()
        
        position = -1
        pstr = 'segs 669\n'

        # Insert the enum domain configuration
        if (inpList.__contains__(pstr) == False):
            # Find the index of maxhunt
            for i in inpList:
                if i.__contains__('mswname'):
                    position = inpList.index(i)
                    break

            if position != -1:
                inpList.insert(position,pstr)
                fout=file('/tmp/server.cfg','w')
                fout.writelines(inpList)
                fout.close()
            else:
                log.info('mswname entry not present in server.cfg file')
        else:
            log.info('File server.cfg already contains segs param')
        # Copying the server.cfg file to MSW
        os.system("scp -q /tmp/server.cfg root@" + mswName + ":" + serverpath )

    except Exception, e:
        msg = "file error: %s" % str(e)
        log.error('File server.cfg does not exist %s' %str(msg))

#40043
def realmCache(msw,realmname):
    """ This function returns the output of cli realm cache for the realm name
        passed as input parameter
        msw - Msw session to issue command on MSX
        realmname - name of the realm
    """
    msw.assertCommand('cli realm cache cache')
    # Copy the real cahce output file
    os.system("scp -q root@mymsw:cache /tmp/cache")
    zfile=open('/tmp/cache',"r")
    zList = zfile.readlines()
    zfile.close()
    str1 = ''
    Flag = False
    for i in zList:
        if i.__contains__(realmname):
            Flag = True
        if Flag:
            str1 = str1 + i
            if i.__contains__('Realm Sip Ports'):
                break
    return str1

#46173
def getSipPingState(msw,ep):
     """ This function returns the Sip Ping State of endpoint which is 
         given as input parameter
         msw - Msw session to issue command on MSX
         ep - Name of the endpoint
     """
     output = msw.filter('cli iedge lkup %s | grep "Sip Ping State"' %ep)
     output = output.split("Sip Ping State")
     output = output[1].strip(' ').strip('\r\n')
     return output

# 46857 - Added functions cleanIserverLog and checkForIserverLog to compare
# the iserverlog with MHPOL
def cleanIserverLog(msw):
    """ This function take backup of iserver.log and clean iserver.log file
        msw - Msw session to issue command on MSX
    """
    msw.assertCommand('cp /var/log/iserver.log /var/log/iserver.log_puh')
    msw.assertCommand('echo > /var/log/iserver.log')

def checkForIserverLog(msw):
    """ This function returns the output for message matched with MHPOL
        from iserver log file and revert back old file
        msw - Msw session to issue command on MSX
    """
    output = None
    output = msw.filter('grep "MHPOL" /var/log/iserver.log')
    msw.assertCommand('cp /var/log/iserver.log_puh /var/log/iserver.log')
    msw.assertCommand('rm -rf /var/log/iserver.log_puh')

    return output


# 48913 - Below two functions are added to block and release the media ports 
def blockTxRxMediaPorts(txip,rxip):

    """ This function block the tx and rx media ports and returns the blocked ports number
        passed as input parameter
        txip - transmitter endpoint IP address 
	rxip - receiver endpoint IP address
    """

    txport1 = txport2 = rxport1 = rxport2 = ''

    txports = commands.getoutput("sudo netstat -ap --numeric-ports | grep udp| grep %s|grep mgen | awk '{print $4}'| head -2" %txip)

    output = txports.split('\n')
    if output:

      output1 = output[0].split(':')
      if output1:
         txport1 = output1[1]
      
      output2 = output[1].split(':')
      if output2:   
        txport2 = output2[1]

    rxports = commands.getoutput("sudo netstat -ap --numeric-ports | grep udp| grep %s|grep mgen | awk '{print $4}'| head -2" %rxip)

    output = rxports.split('\n')
    if output:
        output1 = output[0].split(':')
        if output1:
            rxport1 = output1[1]
        output2 = output[1].split(':')
        if output2:      
            rxport2 = output2[1]
    
    if (txport1 == '' or txport2 == '' or rxport1 == '' or rxport2 == ''):
        
       raise AssertionError('txport or rxport not found from mgen')
      
    os.system('sudo iptables -A OUTPUT -p udp -s %s --sport %s -j DROP'%(txip,txport1))
    os.system('sudo iptables -A OUTPUT -p udp -s %s --sport %s -j DROP'%(txip,txport2))
    os.system('sudo iptables -A OUTPUT -p udp -s %s --sport %s -j DROP'%(rxip,rxport1))
    os.system('sudo iptables -A OUTPUT -p udp -s %s --sport %s -j DROP'%(rxip,rxport2))
  
    ports = [txport1,txport2,rxport1,rxport2]
    return ports
   
def releaseTxRxMediaPorts(txip,rxip,ports): 

    """ This function release the blocked ports 
        passed as input parameter
        txip - transmitter endpoint IP address 
	rxip - receiver endpoint IP address
	ports - Media ports need to be released 
    """
    os.system('sudo iptables -D OUTPUT -p udp -s %s --sport %s -j DROP'%(txip,ports[0]))
    os.system('sudo iptables -D OUTPUT -p udp -s %s --sport %s -j DROP'%(txip,ports[1]))
    os.system('sudo iptables -D OUTPUT -p udp -s %s --sport %s -j DROP'%(rxip,ports[2]))
    os.system('sudo iptables -D OUTPUT -p udp -s %s --sport %s -j DROP'%(rxip,ports[3]))

# PR179833: Change the nxgen binary with required version
# Change the nxgen binary with required version

def changeNxgenVersion(version):

    if os.path.exists('/opt/nextest/bin/nxgen_%s'%(version)):
        os.system('sudo cp /opt/nextest/bin/nxgen_%s /opt/nxgen/bin/nxgen'%(version))

    else:
        raise AssertionError('Nxgen version nxgen_%s binary not found'%(version))
