import socket
import logging

class MDevicesFileGenerator(object):
    """ Class used to generate the mdevices.xml file programmatically
    based on the availability of the devices
    """

    def __init__(self):
        self.log = logging.getLogger('nextestlog')

    #18523
    def generateFile(self,context,inc_trans_info=False):

        """ Construct the mdevices.xml file. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        # Verify whether all the mymsw entries are present in the context
        reqdEntries = ['mymsw_pubmed','mymsw_pubmed_mask','mymsw_prvmed','mymsw_prvmed_mask','mymsw_pubmed_gw','mymsw_prvmed_gw']
        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False 
 
        self.transcoderIP = ''
        #18523
        if inc_trans_info:
            # Verify whether the Transcoder device is present or not
            if context.has_key('userConfig.transcoder_ip'):
                self.transcoderIP = context['userConfig.transcoder_ip']
                # Verify whether netmask and model of the Transcoder are specified
                if (self.transcoderIP != ''):
                    #48768 - Added code for adding the ipaddress to connect to transcoder
                    if not context.has_key('userConfig.ip_on_msx_to_connect_to_transcoder'):
                        print "ERROR: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!")
                        return False
                    mymswip = context['userConfig.ip_on_msx_to_connect_to_transcoder']

                    if not context.has_key('userConfig.transcoder_mask'):
                        print "ERROR: Please add the transcoder_mask entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_mask entry to the userConfig.cfg file!")
                        return False

                    if not context.has_key('userConfig.transcoder_model'):
                        print "ERROR: Please add the transcoder_model entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_model entry to the userConfig.cfg file!")   
                        return False

                    # Verify whether the trancoder Port and license have been specified. 
                    # If not, use the default value
                    if context.has_key('userConfig.transcoder_port'):
                        self.transcoderPort = context['userConfig.transcoder_port']
                    else:
                        self.transcoderPort = '2424'
   
                    if context.has_key('userConfig.transcoder_license'):
                        self.transcoderLicense = context['userConfig.transcoder_license']
                    else:
                        self.transcoderLicense = '60'

        # 21905 - Compare the version of iServer
        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        #Adding code for 8.0 media cac feature
        verCheck_8_0 = context['mswinfo'].compareiServerVersion('8.0.0.0')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        elif (verCheck_4_2 >= 0 and context['userConfig.media_card']== 'HKNIFE'):
            type = 'hknife'
        else:
            type = 'mfcp'
        if (verCheck_8_0 >=0):
            addMediaCac= True
          
        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        # Added code to modify mdevices.xml file to include transcoder information
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="Public Media" />\n'
        self.contentStr += '      <POOL id="4" name="Private Media" />\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="Transcoding Pool" />\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="3" name="Public Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Media Pool" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Media Pool" />\n' 
        self.contentStr += '      </POOL>\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="Transcoding Pool">\n'
            self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Transocder Media Resource Pool" />\n' 
            self.contentStr += '        <DEVPOOL sub-dev="Transcoder" sub-pool="mediant2000" />\n' 
            self.contentStr += '      </POOL>\n'
            self.contentStr += '      <SUB-DEV name="Transcoder" type="tcf" />\n' 
        self.contentStr += '      <SUB-DEV name="hk" type="%s" />\n' %type
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        if self.transcoderIP:
            self.contentStr += '  <DEV name="Transcoder" type="tcf">\n'
            self.contentStr += '    <CE>\n'
            self.contentStr += '      <PROTO type="local" />\n' 
            self.contentStr += '      <POOL id="1" name="mediant2000">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
            self.contentStr += '    </CE>\n'
            self.contentStr += '    <FE>\n'
            self.contentStr += '      <PROTO type="tpncp" ipaddress="%s" mask="%s" port="%s" />\n' %(self.transcoderIP,context['userConfig.transcoder_mask'],self.transcoderPort)
            self.contentStr += '      <POOL id="1" name="mediant2000">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CODECLIST>\n'
            self.contentStr += '          <G729>\n'
            self.contentStr += '            <PARAM frames="5" />\n'
            self.contentStr += '          </G729>\n'
            self.contentStr += '          <G711a>\n'
            self.contentStr += '            <PARAM frames="5" />\n'
            self.contentStr += '          </G711a>\n'
            self.contentStr += '          <G711u>\n'
            self.contentStr += '            <PARAM frames="5" />\n'
            self.contentStr += '          </G711u>\n'
            self.contentStr += '          <G7231>\n'
            self.contentStr += '            <PARAM frames="2" silence="TRUE" />\n'
            self.contentStr += '          </G7231>\n'
            self.contentStr += '        </CODECLIST>\n'
            self.contentStr += '      </POOL>\n'
            self.contentStr += '      <DEVICE-SPECIFIC card="%s" license="%s" my-ipaddress="%s" />\n' %(context['userConfig.transcoder_model'],self.transcoderLicense,mymswip)
            self.contentStr += '    </FE>\n' 
            self.contentStr += '  </DEV>\n'
  
        self.contentStr += '  <DEV name="hk" type="%s">\n' %type
        self.contentStr += '    <CE>\n'
        #self.contentStr += '      <PROTO type="local" />\n'
        if (type == 'mfcp'):
            self.contentStr += '      <PROTO type="mfcp" ipaddress="169.254.0.2" mask="255.255.255.0" />\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        #Akanksh - Adding code for Media CAC feature in 8.0
        if (addMediaCac == True):
            self.contentStr += '      <MEDIABWCAC maxbandwidth="800000" max911bandwidth="9500" />\n'
        
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        #Akanksh - Adding code for Media CAC feature in 8.0
        if (addMediaCac == True):
            self.contentStr += '      <MEDIABWCAC maxbandwidth="800000" max911bandwidth="9500" />\n'
        
        self.contentStr += '      </POOL>\n'

        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="Transocder Media Resource Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        #self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-Vnet1" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
        #S9 Changes
        if (context['userConfig.automation'] == 's9'):
             self.contentStr += '        <PORTALLOC vnet="Hk-Vnet3" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_pubmed2'],context['userConfig.mymsw_pubmed_mask'])
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-Vnet2" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        #S9 Changes
        if (context['userConfig.automation'] == 's9'):
             self.contentStr += '        <PORTALLOC vnet="Hk-Vnet4" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_prvmed2'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'

        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="Transocder Media Resource Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <PORTALLOC vnet="Hk-Vnet2" address="%s" mask="%s" low="40001" high="65535" />\n' %(context['userConfig.mymsw_prvmed_transcoder'],context['userConfig.mymsw_prvmed_mask'])
            self.contentStr += '      </POOL>\n'

        #S9 Changes
        if (context['userConfig.automation'] == 's9'):
              self.contentStr += '      <VNET name="Hk-Vnet1" interface="hk0,0" vlanid="%s">\n' %context['userConfig.pub_vlan_id']
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
              self.contentStr += '      </VNET>\n'
              self.contentStr += '      <VNET name="Hk-Vnet2" interface="hk0,1" vlanid="%s">\n' %context['userConfig.pri_vlan_id']
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
              self.contentStr += '      </VNET>\n'
              self.contentStr += '      <VNET name="Hk-Vnet3" interface="hk0,2" vlanid="%s">\n' %context['userConfig.pub_vlan_id']
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
              self.contentStr += '      </VNET>\n'
              self.contentStr += '      <VNET name="Hk-Vnet4" interface="hk0,3" vlanid="%s">\n' %context['userConfig.pri_vlan_id']
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
              self.contentStr += '      </VNET>\n'
        else:
              self.contentStr += '      <VNET name="Hk-Vnet1" interface="hk0,0" vlanid="0">\n'
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
              self.contentStr += '      </VNET>\n'  
              self.contentStr += '      <VNET name="Hk-Vnet2" interface="hk0,1" vlanid="0">\n'
              self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
              self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False

    #Ticket 43832 - Function to create mdevices.xml for NSF device
    def generateNsfFile(self,context):

        """ Construct the mdevices.xml file for NSF setup. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        # Verify whether all the mymsw entries are present in the context
        reqdEntries = ['mymsw_pubmed','mymsw_pubmed_mask','mymsw_prvmed','mymsw_prvmed_mask','mymsw_pubmed_gw','mymsw_prvmed_gw']
        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False

        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        if not (verCheck_4_2 >= 0):
            self.log.error('NSF based media routing is supported in 4.2 and above only')
            return False
        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="pub_realm_med" />\n'
        self.contentStr += '      <POOL id="4" name="pri_realm_med" />\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="3" name="pub_realm_med">\n'
        self.contentStr += '        <DEVPOOL sub-dev="nsf" sub-pool="nsf00" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="pri_realm_med">\n'
        self.contentStr += '        <DEVPOOL sub-dev="nsf" sub-pool="nsf01" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <SUB-DEV name="nsf" type="nsf" />\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        self.contentStr += '  <DEV name="nsf" type="nsf">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <POOL id="1" name="nsf00">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="2" name="nsf01">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="1" name="nsf00">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="pub_realm_nsf" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="2" name="nsf01">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="pri_realm_nsf" address="%s" mask="%s" low="10000" high="65535" />\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <VNET name="pub_realm_nsf" interface="eth4" vlanid="0">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
        self.contentStr += '      </VNET>\n'
        self.contentStr += '      <VNET name="pri_realm_nsf" interface="eth5" vlanid="0">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
        self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False

    #161655 - Configure IPv6 Media pool for local SUTs
    def generateIpv4Ipv6File(self,context,inc_trans_info=False):

        """ Construct the mdevices.xml file for HotKnife in IPv6 setup. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        # Verify whether all the mymsw entries are present in the context
        reqdEntries = ['mymsw_pubmed','mymsw_pubmed_mask','mymsw_prvmed','mymsw_prvmed_mask','mymsw_pubmed_gw','mymsw_prvmed_gw','mymsw_ipv6_pubmed','mymsw_ipv6_pubmed_mask','mymsw_ipv6_prvmed','mymsw_ipv6_prvmed_mask','mymsw_ipv6_pubmed_gw','mymsw_ipv6_prvmed_gw']
        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False

        self.transcoderIP = ''
        if inc_trans_info:
            # Verify whether the Transcoder device is present or not
            if context.has_key('userConfig.transcoder_ip'):
                self.transcoderIP = context['userConfig.transcoder_ip']
                # Verify whether netmask and model of the Transcoder are specified
                if (self.transcoderIP != ''):
                    #48768 - Added code for adding the ipaddress to connect to transcoder
                    if not context.has_key('userConfig.ip_on_msx_to_connect_to_transcoder'):
                        print "ERROR: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!")
                        return False
                    mymswip = context['userConfig.ip_on_msx_to_connect_to_transcoder']

                    if not context.has_key('userConfig.transcoder_mask'):
                        print "ERROR: Please add the transcoder_mask entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_mask entry to the userConfig.cfg file!")
                        return False

                    if not context.has_key('userConfig.transcoder_model'):
                        print "ERROR: Please add the transcoder_model entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_model entry to the userConfig.cfg file!")   
                        return False

                    # Verify whether the trancoder Port and license have been specified. 
                    # If not, use the default value
                    if context.has_key('userConfig.transcoder_port'):
                        self.transcoderPort = context['userConfig.transcoder_port']
                    else:
                        self.transcoderPort = '2424'
   
                    if context.has_key('userConfig.transcoder_license'):
                        self.transcoderLicense = context['userConfig.transcoder_license']
                    else:
                        self.transcoderLicense = '60'

        # 21905 - Compare the version of iServer
        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        verCheck_8_0 = context['mswinfo'].compareiServerVersion('7.0')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        elif (verCheck_8_0 == -99):
            self.log.error('IPv6 media routing is supported in 8.0 and above only')
            return False
        elif (verCheck_4_2 >= 0 and context['userConfig.media_card']== 'HKNIFE' and verCheck_8_0 >= 0):
            type = 'hknife'
        else:
            type = 'mfcp'

        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        # Added code to modify mdevices.xml file to include transcoder information
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="Public Media" />\n'
        self.contentStr += '      <POOL id="4" name="Private Media" />\n'
        self.contentStr += '      <POOL id="1" name="Public Ipv6 Media" />\n'
        self.contentStr += '      <POOL id="2" name="Private Ipv6 Media" />\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9-MS" />\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="1" name="Public Ipv6 Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Ipv6 Media Pool" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="2" name="Private Ipv6 Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Ipv6 Media Pool" />\n' 
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="3" name="Public Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Media Pool" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Media Pool" />\n' 
        self.contentStr += '      </POOL>\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9-MS">\n'
            self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="G9 Media Pool" />\n' 
            self.contentStr += '        <DEVPOOL sub-dev="G9" sub-pool="G9-Pool" />\n' 
            self.contentStr += '      </POOL>\n'
            self.contentStr += '      <SUB-DEV name="G9" type="H248" />\n' 
        self.contentStr += '      <SUB-DEV name="hk" type="%s" />\n' %type
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        self.contentStr += '  <DEV name="hk" type="%s">\n' %type
        self.contentStr += '    <CE>\n'
        if (type == 'mfcp'):
            self.contentStr += '      <PROTO type="mfcp" ipaddress="169.254.0.2" mask="255.255.255.0" />\n'
        self.contentStr += '      <POOL id="1" name="Public Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="2" name="Private Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="1" name="Public Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        if context['userConfig.pubmedia_ipv6_interface'] != context['userConfig.pubmedia_ipv4_interface']:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet1" />\n' %(context['userConfig.mymsw_ipv6_pubmed'],context['userConfig.mymsw_ipv6_pubmed_mask'])
        else:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-pub" />\n' %(context['userConfig.mymsw_ipv6_pubmed'],context['userConfig.mymsw_ipv6_pubmed_mask'])
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <POOL id="2" name="Private Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        if context['userConfig.prvmedia_ipv6_interface'] != context['userConfig.prvmedia_ipv4_interface']:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet2" />\n' %(context['userConfig.mymsw_ipv6_prvmed'],context['userConfig.mymsw_ipv6_prvmed_mask'])
        else:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-prv" />\n' %(context['userConfig.mymsw_ipv6_prvmed'],context['userConfig.mymsw_ipv6_prvmed_mask'])
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        if context['userConfig.pubmedia_ipv6_interface'] != context['userConfig.pubmedia_ipv4_interface']:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet3" />\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
        else:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-pub" />\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
            self.contentStr += '      </POOL>\n'

        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        if context['userConfig.prvmedia_ipv6_interface'] != context['userConfig.prvmedia_ipv4_interface']:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet4" />\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        else:
            self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-prv" />\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'

        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <PORTALLOC vnet="Hk-Vnet5" address="%s" mask="%s" low="40001" high="65535" />\n' %(context['userConfig.mymsw_prvmed_transcoder'],context['userConfig.mymsw_prvmed_mask'])
            self.contentStr += '      </POOL>\n'

        if context['userConfig.pubmedia_ipv6_interface'] != context['userConfig.pubmedia_ipv4_interface']:
            self.contentStr += '      <VNET name="Hk-Vnet1" interface="%s" vlanid="%s">\n' %(context['userConfig.pubmedia_ipv6_interface'],context['userConfig.pubmedia_ipv6_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_ipv6_pubmed_dest'],context['userConfig.mymsw_ipv6_pubmed_mask'],context['userConfig.mymsw_ipv6_pubmed_gw'])
            self.contentStr += '      </VNET>\n'  
            self.contentStr += '      <VNET name="Hk-Vnet3" interface="%s" vlanid="%s">\n' %(context['userConfig.pubmedia_ipv4_interface'],context['userConfig.pubmedia_ipv4_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
            self.contentStr += '      </VNET>\n'  
        else:
            self.contentStr += '      <VNET name="Hk-pub" interface="%s" vlanid="%s">\n' %(context['userConfig.pubmedia_ipv6_interface'],context['userConfig.pubmedia_ipv6_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_ipv6_pubmed_dest'],context['userConfig.mymsw_ipv6_pubmed_mask'],context['userConfig.mymsw_ipv6_pubmed_gw'])
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
            self.contentStr += '      </VNET>\n'  
        if context['userConfig.prvmedia_ipv6_interface'] != context['userConfig.prvmedia_ipv4_interface']:
            self.contentStr += '      <VNET name="Hk-Vnet2" interface="%s" vlanid="%s">\n' %(context['userConfig.prvmedia_ipv6_interface'],context['userConfig.prvmedia_ipv6_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_ipv6_prvmed_dest'],context['userConfig.mymsw_ipv6_prvmed_mask'],context['userConfig.mymsw_ipv6_prvmed_gw'])
            self.contentStr += '      </VNET>\n'
            self.contentStr += '      <VNET name="Hk-Vnet4" interface="%s" vlanid="%s">\n' %(context['userConfig.prvmedia_ipv4_interface'],context['userConfig.prvmedia_ipv4_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
            self.contentStr += '      </VNET>\n'
        else:
            self.contentStr += '      <VNET name="Hk-prv" interface="%s" vlanid="%s">\n' %(context['userConfig.prvmedia_ipv6_interface'],context['userConfig.prvmedia_ipv6_vlanid'])
            self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_ipv6_pubmed_dest'],context['userConfig.mymsw_ipv6_prvmed_mask'],context['userConfig.mymsw_ipv6_prvmed_gw'])
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
            self.contentStr += '      </VNET>\n'  
        if self.transcoderIP:
            self.contentStr += '      <VNET name="Hk-Vnet5" interface="hk0,2" vlanid="0">\n'
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_prvmed_mask'],context['userConfig.mymsw_prvmed_gw'])
            self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        if self.transcoderIP:
            self.contentStr += '  <DEV name="G9" type="H248">\n'
            self.contentStr += '    <CE>\n'
            self.contentStr += '      <PROTO type="local" />\n' 
            self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
            self.contentStr += '    </CE>\n'
            self.contentStr += '    <FE>\n'
            self.contentStr += '      <PROTO type="H248" ipaddress="%s" mask="%s" port="%s" />\n' %(self.transcoderIP,context['userConfig.transcoder_mask'],self.transcoderPort)
            self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CODECLIST>\n'
            self.contentStr += '          <G729>\n'
            self.contentStr += '            <PARAM frames="10,20,30,40" />\n'
            self.contentStr += '          </G729>\n'
            self.contentStr += '          <G711a>\n'
            self.contentStr += '            <PARAM frames="10,20,30" />\n'
            self.contentStr += '          </G711a>\n'
            self.contentStr += '          <G711u>\n'
            self.contentStr += '            <PARAM frames="10,20,30" />\n'
            self.contentStr += '          </G711u>\n'
            self.contentStr += '          <G7231>\n'
            self.contentStr += '            <PARAM frames="30" silence="TRUE" />\n'
            self.contentStr += '          </G7231>\n'
            self.contentStr += '          <AMR>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </AMR>\n'
            self.contentStr += '          <AMR-WB>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </AMR-WB>\n'
            self.contentStr += '          <EVRC>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </EVRC>\n'
            self.contentStr += '          <EVRC-B>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </EVRC-B>\n'
            self.contentStr += '        </CODECLIST>\n'
            self.contentStr += '      </POOL>\n'
            if context['userConfig.transcoder_model'] == 'SCTP' :
                self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2945" priority="100" realm="trans_realm" status="DISENGAGE" transport="SCTP" weight="100" />\n' 
            elif context['userConfig.transcoder_model'] == 'UDP' :
                self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2944" number-of-retries="3" priority="100" profile-name="" profile-version="1" provisional-response-time="50" realm="trans_realm" status="ENGAGE" text-encode-mode="LONG_TOKEN" transport="UDP" trunk-group-id="" weight="100" />\n' 
            self.contentStr += '    </FE>\n' 
            self.contentStr += '  </DEV>\n'
  
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices_ipv4ipv6.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False

    #161655 - Configure IPv6 Media pool for remote SUTs
    def generateIpv6HkFile(self,name,context,inc_trans_info=False):

        """ Construct the mdevices.xml file for HotKnife in IPv6 setup. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        name = name
        # Verify whether all the mymsw entries are present in the context
        medEntries = ['ipv6_pubmed','ipv6_pubmed_mask','ipv6_prvmed','ipv6_prvmed_mask','ipv6_pubmed_gw','ipv6_prvmed_gw','ipv6_prvmed_dest','ipv6_pubmed_dest']
        reqdEntries = []
        for n in medEntries:
            entry = name + '_' + n
            reqdEntries.append(entry)

        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False

        self.transcoderIP = ''
        if inc_trans_info:
            # Verify whether the Transcoder device is present or not
            if context.has_key('userConfig.transcoder_ip'):
                self.transcoderIP = context['userConfig.transcoder_ip']
                # Verify whether netmask and model of the Transcoder are specified
                if (self.transcoderIP != ''):
                    #48768 - Added code for adding the ipaddress to connect to transcoder
                    if not context.has_key('userConfig.ip_on_msx_to_connect_to_transcoder'):
                        print "ERROR: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!")
                        return False
                    mymswip = context['userConfig.ip_on_msx_to_connect_to_transcoder']

                    if not context.has_key('userConfig.transcoder_mask'):
                        print "ERROR: Please add the transcoder_mask entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_mask entry to the userConfig.cfg file!")
                        return False

                    if not context.has_key('userConfig.transcoder_model'):
                        print "ERROR: Please add the transcoder_model entry to the userConfig.cfg file!"
                        self.log.error("MDevicesFileGenerator: Please add the transcoder_model entry to the userConfig.cfg file!")   
                        return False

                    # Verify whether the trancoder Port and license have been specified. 
                    # If not, use the default value
                    if context.has_key('userConfig.transcoder_port'):
                        self.transcoderPort = context['userConfig.transcoder_port']
                    else:
                        self.transcoderPort = '2424'
   
                    if context.has_key('userConfig.transcoder_license'):
                        self.transcoderLicense = context['userConfig.transcoder_license']
                    else:
                        self.transcoderLicense = '60'

        # 21905 - Compare the version of iServer
        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        verCheck_8_0 = context['mswinfo'].compareiServerVersion('7.0')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        elif (verCheck_8_0 == -99):
            self.log.error('IPv6 media routing is supported in 8.0 and above only')
            return False
        elif (verCheck_4_2 >= 0 and context['userConfig.media_card']== 'HKNIFE' and verCheck_8_0 >= 0):
            type = 'hknife'
        else:
            type = 'mfcp'

        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        # Added code to modify mdevices.xml file to include transcoder information
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="Public Ipv6 Media" />\n'
        self.contentStr += '      <POOL id="4" name="Private Ipv6 Media" />\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9-MS" />\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="3" name="Public Ipv6 Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Ipv6 Media Pool" />\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Ipv6 Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Ipv6 Media Pool" />\n' 
        self.contentStr += '      </POOL>\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9-MS">\n'
            self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="G9 Media Pool" />\n' 
            self.contentStr += '        <DEVPOOL sub-dev="G9" sub-pool="G9-Pool" />\n' 
            self.contentStr += '      </POOL>\n'
            self.contentStr += '      <SUB-DEV name="G9" type="H248" />\n' 
        self.contentStr += '      <SUB-DEV name="hk" type="%s" />\n' %type
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        self.contentStr += '  <DEV name="hk" type="%s">\n' %type
        self.contentStr += '    <CE>\n'
        if (type == 'mfcp'):
            self.contentStr += '      <PROTO type="mfcp" ipaddress="169.254.0.2" mask="255.255.255.0" />\n'
        self.contentStr += '      <POOL id="3" name="Public Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO type="local" />\n'
        self.contentStr += '      <POOL id="3" name="Public Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet3" />\n' %(context['userConfig.'+ name +'_ipv6_pubmed'],context['userConfig.' + name +'_ipv6_pubmed_mask'])
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <POOL id="4" name="Private Ipv6 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT />\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-Vnet4" />\n' %(context['userConfig.' + name + '_ipv6_prvmed'],context['userConfig.' + name + '_ipv6_prvmed_mask'])
        self.contentStr += '      </POOL>\n'

        if self.transcoderIP:
            self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n'
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <PORTALLOC vnet="Hk-Vnet5" address="%s" mask="%s" low="40001" high="65535" />\n' %(context['userConfig.' + name +'_prvmed_transcoder'],context['userConfig.' + name + '_prvmed_mask'])
            self.contentStr += '      </POOL>\n'

        self.contentStr += '      <VNET name="Hk-Vnet3" interface="hk0,0" vlanid="%s">\n' %context['userConfig.remote_pubmedia_ipv6_vlanid']
        self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.' + name + '_ipv6_pubmed_dest'],context['userConfig.' + name + '_ipv6_pubmed_mask'],context['userConfig.' + name + '_ipv6_pubmed_gw'])
        self.contentStr += '      </VNET>\n'  
        self.contentStr += '      <VNET name="Hk-Vnet4" interface="hk0,1" vlanid="%s">\n' %context['userConfig.remote_prvmedia_ipv6_vlanid']
        self.contentStr += '        <ROUTE dest_ip="%s" mask="%s" gw="%s" />\n' %(context['userConfig.' + name + '_ipv6_prvmed_dest'],context['userConfig.' + name + '_ipv6_prvmed_mask'],context['userConfig.' + name + '_ipv6_prvmed_gw'])
        self.contentStr += '      </VNET>\n'
        if self.transcoderIP:
            self.contentStr += '      <VNET name="Hk-Vnet5" interface="hk0,2" vlanid="none">\n'
            self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="%s" gw="%s" />\n' %(context['userConfig.' + name + ' mymsw_prvmed_mask'],context['userConfig.' + name + 'prvmed_gw'])
            self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        if self.transcoderIP:
            self.contentStr += '  <DEV name="G9" type="H248">\n'
            self.contentStr += '    <CE>\n'
            self.contentStr += '      <PROTO type="local" />\n' 
            self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '      </POOL>\n'
            self.contentStr += '    </CE>\n'
            self.contentStr += '    <FE>\n'
            self.contentStr += '      <PROTO type="H248" ipaddress="%s" mask="%s" port="%s" />\n' %(self.transcoderIP,context['userConfig.transcoder_mask'],self.transcoderPort)
            self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <NAT />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CAP>\n'
            self.contentStr += '          <TCF />\n' 
            self.contentStr += '        </CAP>\n'
            self.contentStr += '        <CODECLIST>\n'
            self.contentStr += '          <G729>\n'
            self.contentStr += '            <PARAM frames="10,20,30,40" />\n'
            self.contentStr += '          </G729>\n'
            self.contentStr += '          <G711a>\n'
            self.contentStr += '            <PARAM frames="10,20,30" />\n'
            self.contentStr += '          </G711a>\n'
            self.contentStr += '          <G711u>\n'
            self.contentStr += '            <PARAM frames="10,20,30" />\n'
            self.contentStr += '          </G711u>\n'
            self.contentStr += '          <G7231>\n'
            self.contentStr += '            <PARAM frames="30" silence="TRUE" />\n'
            self.contentStr += '          </G7231>\n'
            self.contentStr += '          <AMR>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </AMR>\n'
            self.contentStr += '          <AMR-WB>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </AMR-WB>\n'
            self.contentStr += '          <EVRC>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </EVRC>\n'
            self.contentStr += '          <EVRC-B>\n'
            self.contentStr += '            <PARAM frames="Ignore" silence="Ignore" />\n'
            self.contentStr += '          </EVRC-B>\n'
            self.contentStr += '        </CODECLIST>\n'
            self.contentStr += '      </POOL>\n'
            if context['userConfig.transcoder_model'] == 'SCTP' :
                self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2945" priority="100" realm="trans_realm" status="DISENGAGE" transport="SCTP" weight="100" />\n' 
            elif context['userConfig.transcoder_model'] == 'UDP' :
                self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2944" number-of-retries="3" priority="100" profile-name="" profile-version="1" provisional-response-time="50" realm="trans_realm" status="ENGAGE" text-encode-mode="LONG_TOKEN" transport="UDP" trunk-group-id="" weight="100" />\n' 
            self.contentStr += '    </FE>\n' 
            self.contentStr += '  </DEV>\n'
  
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices_ipv6.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False

    #Configure H248 Transcoding media pool 
    def generateH248File(self,context):

        """ Construct the mdevices.xml file for HotKnife in H248 Transcoding setup. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        # Verify whether all the mymsw entries are present in the context
        reqdEntries = ['mymsw_pubmed','mymsw_pubmed_mask','mymsw_prvmed','mymsw_prvmed_mask','mymsw_pubmed_gw','mymsw_prvmed_gw','transcoder_ip']

        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False

        self.transcoderIP = ''

        # Verify whether the Transcoder device is present or not
        if context.has_key('userConfig.transcoder_ip'):
            self.transcoderIP = context['userConfig.transcoder_ip']
            # Verify whether netmask and model of the Transcoder are specified
            if (self.transcoderIP != ''):
                #48768 - Added code for adding the ipaddress to connect to transcoder
                if not context.has_key('userConfig.ip_on_msx_to_connect_to_transcoder'):
                    print "ERROR: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!"
                    self.log.error("MDevicesFileGenerator: Please add the userConfig.ip_on_msx_to_connect_to_transcoder entry to the userConfig.cfg file!")
                    return False
                mymswip = context['userConfig.ip_on_msx_to_connect_to_transcoder']

                if not context.has_key('userConfig.transcoder_mask'):
                    print "ERROR: Please add the transcoder_mask entry to the userConfig.cfg file!"
                    self.log.error("MDevicesFileGenerator: Please add the transcoder_mask entry to the userConfig.cfg file!")
                    return False

                if not context.has_key('userConfig.transcoder_model'):
                    print "ERROR: Please add the transcoder_model entry to the userConfig.cfg file!"
                    self.log.error("MDevicesFileGenerator: Please add the transcoder_model entry to the userConfig.cfg file!")   
                    return False

                # Verify whether the trancoder Port and license have been specified. 
                # If not, use the default value
                if context.has_key('userConfig.transcoder_port'):
                    self.transcoderPort = context['userConfig.transcoder_port']
                else:
                    self.transcoderPort = '2424'

                if context.has_key('userConfig.transcoder_license'):
                    self.transcoderLicense = context['userConfig.transcoder_license']
                else:
                    self.transcoderLicense = '60'

        # 21905 - Compare the version of iServer
        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        verCheck_8_0 = context['mswinfo'].compareiServerVersion('7.0')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        elif (verCheck_8_0 == -99):
            self.log.error('IPv6 media routing is supported in 8.0 and above only')
            return False
        elif (verCheck_4_2 >= 0 and context['userConfig.media_card']== 'HKNIFE' and verCheck_8_0 >= 0):
            type = 'hknife'
        else:
            type = 'mfcp'

        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        # Added code to modify mdevices.xml file to include transcoder information
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media"/>\n'
        self.contentStr += '      <POOL id="4" name="Private Media"/>\n'        
        self.contentStr += '      <POOL id="5" name="G9-MS"/>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="3" name="Public Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Media Pool"/>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Media Pool"/>\n' 
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="G9-MS">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="G9 Media Pool"/>\n' 
        self.contentStr += '        <DEVPOOL sub-dev="G9" sub-pool="G9-Pool"/>\n' 
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <SUB-DEV name="hk" type="%s"/>\n' %type
        self.contentStr += '      <SUB-DEV name="G9" type="H248"/>\n' 
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        
        self.contentStr += '  <DEV name="hk" type="%s">\n' %type
        self.contentStr += '    <CE>\n'
        if (type == 'mfcp'):
            self.contentStr += '      <PROTO type="mfcp" ipaddress="169.254.0.2" mask="255.255.255.0"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO type="local"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-pub"/>\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC address="%s" mask="%s" low="10000" high="65535" vnet="Hk-prv"/>\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="G9 Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-Vnet5" address="%s" mask="%s" low="40001" high="65535"/>\n' %(context['userConfig.mymsw_prvmed_transcoder'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <VNET name="Hk-pub" interface="%s" vlanid="%s">\n' %(context['userConfig.pubmedia_ipv4_interface'],context['userConfig.pubmedia_ipv4_vlanid']) 
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s"/>\n' %context['userConfig.mymsw_pubmed_gw']
        self.contentStr += '      </VNET>\n'
            
        self.contentStr += '      <VNET name="Hk-prv" interface="%s" vlanid="%s">\n' %(context['userConfig.prvmedia_ipv4_interface'],context['userConfig.prvmedia_ipv4_vlanid'])        
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s"/>\n' %context['userConfig.mymsw_prvmed_gw']
        self.contentStr += '      </VNET>\n'        

        self.contentStr += '      <VNET name="Hk-Vnet5" interface="%s" vlanid="%s">\n' %(context['userConfig.transcodermedia_ipv4_interface'],context['userConfig.transcodermed_ipv4_vlanid'])
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="%s" gw="%s" />\n' %(context['userConfig.mymsw_prvmed_mask'],context['userConfig.mymsw_prvmed_transcoder_gw'])
        self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'

        self.contentStr += '  <DEV name="G9" type="H248">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local"/>\n' 
        self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <TCF/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO type="H248" ipaddress="%s" mask="%s" port="%s"/>\n' %(self.transcoderIP,context['userConfig.transcoder_mask'],self.transcoderPort)
        self.contentStr += '      <POOL id="1" name="G9-Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <TCF/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CODECLIST>\n'
        self.contentStr += '          <G729>\n'
        self.contentStr += '            <PARAM frames="10,20,30,40"/>\n'
        self.contentStr += '          </G729>\n'
        self.contentStr += '          <G711a>\n'
        self.contentStr += '            <PARAM frames="10,20,30"/>\n'
        self.contentStr += '          </G711a>\n'
        self.contentStr += '          <G711u>\n'
        self.contentStr += '            <PARAM frames="10,20,30"/>\n'
        self.contentStr += '          </G711u>\n'
        self.contentStr += '          <G7231>\n'
        self.contentStr += '            <PARAM frames="30" silence="TRUE"/>\n'
        self.contentStr += '          </G7231>\n'
        self.contentStr += '          <AMR>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </AMR>\n'
        self.contentStr += '          <AMR-WB>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </AMR-WB>\n'
        self.contentStr += '          <EVRC>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </EVRC>\n'
        self.contentStr += '          <EVRC-B>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </EVRC-B>\n'
        self.contentStr += '        </CODECLIST>\n'
        self.contentStr += '      </POOL>\n'
        if context['userConfig.transcoder_model'] == 'SCTP' :
            self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2945" priority="100" realm="trans_realm" status="DISENGAGE" transport="SCTP" weight="100"/>\n' 
        elif context['userConfig.transcoder_model'] == 'UDP' :
            self.contentStr += '      <DEVICE-SPECIFIC MG-norm-EXEC-time="600" RTT="10" delay="0" hanging-termination-detection-time="0" inactivity-timer="30" max-commands-per-second="1000" max-number-of-sessions="8000" myport="2944" number-of-retries="3" priority="100" profile-name="" profile-version="1" provisional-response-time="50" realm="trans_realm" status="ENGAGE" text-encode-mode="LONG_TOKEN" transport="UDP" trunk-group-id="" weight="100"/>\n' 
        self.contentStr += '    </FE>\n' 
        self.contentStr += '  </DEV>\n'
  
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices_h248.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False
     
    # Bhuvnesh - Addition of DSP based mdevices support for 8.1T and up releases.
    #Configure DSP Transcoding media pool 
    def generateDSPMdevicesFile(self,context):

        """ Construct the mdevices.xml file for HotKnife in DSP Transcoding setup. Returns TRUE or FALSE depending on whether
        there was an error in generating the mdevices.xml file or not.

        context - Dictionary containing the userConfig parameters

        """
        # Verify whether all the mymsw entries are present in the context
        reqdEntries = ['mymsw_pubmed','mymsw_pubmed_mask','mymsw_prvmed','mymsw_prvmed_mask','mymsw_pubmed_gw','mymsw_prvmed_gw']

        for k in reqdEntries:
            if not context.has_key('userConfig.' + k):
                print "ERROR: Please add %s entry to userConfig.cfg file!" %k
                self.log.error("MDevicesFileGenerator: Please add %s entry to userConfig.cfg file!" %k)
                return False

        # 21905 - Compare the version of iServer
        verCheck_4_2 = context['mswinfo'].compareiServerVersion('4.2')
        verCheck_8_0 = context['mswinfo'].compareiServerVersion('7.0')
        if (verCheck_4_2 == -99):
            self.log.error('MDevicesFileGenerator: Unable to determine iserver version')
            return False
        elif (verCheck_8_0 == -99):
            self.log.error('IPv6 media routing is supported in 8.0 and above only')
            return False
        elif (verCheck_4_2 >= 0 and context['userConfig.media_card']== 'HKNIFE' and verCheck_8_0 >= 0):
            type = 'hknife'
        else:
            type = 'mfcp'

        # Form the contents of the mdevices.xml file based on the presence/absence of devices
        # Added code to modify mdevices.xml file to include transcoder information
        self.contentStr = '<?xml version="1.0"?>\n\n'
        self.contentStr += '<MEDIA-DEVICES>\n'
        self.contentStr += '  <DEV name="MS">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media"/>\n'
        self.contentStr += '      <POOL id="4" name="Private Media"/>\n'        
        self.contentStr += '      <POOL id="5" name="Xcoding"/>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <POOL id="3" name="Public Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Public Media Pool"/>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="Private Media Pool"/>\n' 
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="Xcoding">\n'
        self.contentStr += '        <DEVPOOL sub-dev="hk" sub-pool="DSP Media Pool"/>\n' 
        self.contentStr += '        <DEVPOOL sub-dev="dsp" sub-pool="onboard-xcoder-pool"/>\n' 
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <SUB-DEV name="hk" type="%s"/>\n' %type
        self.contentStr += '      <SUB-DEV name="dsp" type="onboard_xcoder"/>\n' 
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'
        
        self.contentStr += '  <DEV name="hk" type="%s">\n' %type
        self.contentStr += '    <CE>\n'
        if (type == 'mfcp'):
            self.contentStr += '      <PROTO type="mfcp" ipaddress="169.254.0.2" mask="255.255.255.0"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="DSP Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO type="local"/>\n'
        self.contentStr += '      <POOL id="3" name="Public Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-pub" address="%s" mask="%s" low="10000" high="65535"/>\n' %(context['userConfig.mymsw_pubmed'],context['userConfig.mymsw_pubmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="4" name="Private Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-prv" address="%s" mask="%s" low="10000" high="65535"/>\n' %(context['userConfig.mymsw_prvmed'],context['userConfig.mymsw_prvmed_mask'])
        self.contentStr += '      </POOL>\n'
        self.contentStr += '      <POOL id="5" name="DSP Media Pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n'
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-Vnet5" address="169.254.1.100" mask="255.255.255.0" low="40001" high="65535"/>\n'
        self.contentStr += '        <PORTALLOC vnet="Hk-Vnet6" address="169.254.1.101" mask="255.255.255.0" low="40001" high="65535"/>\n'
        self.contentStr += '      </POOL>\n'

        self.contentStr += '      <VNET name="Hk-pub" interface="hk0,0" vlanid="0">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_pubmed_gw']
        self.contentStr += '      </VNET>\n'
            
        self.contentStr += '      <VNET name="Hk-prv" interface="hk0,1" vlanid="0">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="%s" />\n' %context['userConfig.mymsw_prvmed_gw']
        self.contentStr += '      </VNET>\n'        

        self.contentStr += '      <VNET name="Hk-Vnet5" interface="hk0,4" vlanid="none">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="0.0.0.0" />\n'
        self.contentStr += '      </VNET>\n'

        self.contentStr += '      <VNET name="Hk-Vnet6" interface="hk0,5" vlanid="none">\n'
        self.contentStr += '        <ROUTE dest_ip="0.0.0.0" mask="0.0.0.0" gw="0.0.0.0" />\n'
        self.contentStr += '      </VNET>\n'
        self.contentStr += '    </FE>\n'
        self.contentStr += '  </DEV>\n'

        self.contentStr += '  <DEV name="dsp" type="onboard_xcoder">\n'
        self.contentStr += '    <CE>\n'
        self.contentStr += '      <PROTO type="local"/>\n' 
        self.contentStr += '      <POOL id="1" name="onboard-xcoder-pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <TCF/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '    </CE>\n'
        self.contentStr += '    <FE>\n'
        self.contentStr += '      <PROTO interface="eth8" type="onboard_xcoder" ipaddress="169.254.1.2"/>\n'
        self.contentStr += '      <POOL id="1" name="onboard-xcoder-pool">\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <NAT/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CAP>\n'
        self.contentStr += '          <TCF/>\n' 
        self.contentStr += '        </CAP>\n'
        self.contentStr += '        <CODECLIST>\n'
        self.contentStr += '          <G729>\n'
        self.contentStr += '            <PARAM frames="5,10,20,30,40"/>\n'
        self.contentStr += '          </G729>\n'
        self.contentStr += '          <G711a>\n'
        self.contentStr += '            <PARAM frames="5,10,20,30" silence="FALSE"/>\n'
        self.contentStr += '          </G711a>\n'
        self.contentStr += '          <G711u>\n'
        self.contentStr += '            <PARAM frames="5,10,20,30" silence="FALSE"/>\n'
        self.contentStr += '          </G711u>\n'
        self.contentStr += '          <AMR>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="FALSE"/>\n'
        self.contentStr += '          </AMR>\n'
        self.contentStr += '          <EVRC>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </EVRC>\n'
        self.contentStr += '          <EVRC-B>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </EVRC-B>\n'
        self.contentStr += '          <iLBC-20>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </iLBC-20>\n'
        self.contentStr += '          <iLBC-30>\n'
        self.contentStr += '            <PARAM frames="Ignore" silence="Ignore"/>\n'
        self.contentStr += '          </iLBC-30>\n'
        self.contentStr += '        </CODECLIST>\n'
        self.contentStr += '      </POOL>\n'
        self.contentStr += '     <DEVICE-SPECIFIC></DEVICE-SPECIFIC>\n'
        self.contentStr += '    </FE>\n' 
        self.contentStr += '  </DEV>\n'
  
        self.contentStr += '</MEDIA-DEVICES>\n\n'

        # Write the contents to the mdevices.xml file
        try:
            fp = open('/var/opt/nextest/tdb/builds/mdevices_dsp.xml','w')
            fp.write(self.contentStr)
            fp.close()
            return True
        except Exception,e:
            print "EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e)
            self.log.error("EXCEPTION - %s - Unable to construct mdevices.xml file!" %str(e))
            return False
