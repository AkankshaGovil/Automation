#!/usr/bin/python

import sys
import os
import os.path


class WordDocument:
  """ Creates XHTML based word document for test plan. It takes specially marked up
      description of a test case and adds a page into the document. The markup contains
      tags @name, @objective, @procedure, @procedure_steps, @expect, @prerequisites, 
      @caveats, @references. It is expected that this generated document will be included 
      by reference from another document containing test cover page, TOC, introduction
      chapter, test configuration and strategy. 

      It also provides interface to user to add headings based on test's classification. 
      For example, a test class "production_components.cause_code" will add two headings:
      a level 1 heading for production_components and a level 2 heading for cause_code. A
      subsequent test class "production_component.functional' will add a level 2 heading for
      functional only.
  """
  def __init__(self, fileName=None):
    #current heading titles in use
    self.headings = []

    self.newHeadings = []

    #some gibberish xhtml from word. Some nextest specific styles are defined. 
    self.wordDocPreamble = " \
      <html xmlns:o='urn:schemas-microsoft-com:office:office' \n \
      xmlns:w='urn:schemas-microsoft-com:office:word'>\n \
      <head>\n \
      \n \
      <meta http-equiv='Content-Type' content='text/html; charset=windows-1252'>\n \
      </meta>\n \
      <meta name='ProgId' content='Word.Document'>\n \
      </meta>\n \
      <meta name='Generator' content='Microsoft Word 9'>\n \
      </meta>\n \
      <meta name='Originator' content='Microsoft Word 9'>\n \
      </meta>\n \
      <xml>\n \
      <w:WordDocument>\n \
        <w:View>Normal</w:View>\n \
        <w:AttachedTemplate href='msword-template.dot'>\n \
      </w:AttachedTemplate>\n \
        <w:UpdateStylesOnOpen>\n \
      </w:UpdateStylesOnOpen>\n \
        <w:DoNotOptimizeForBrowser>\n \
      </w:DoNotOptimizeForBrowser>\n \
       </w:WordDocument>\n \
      <o:DocumentProperties>\n \
      <o:Template>msword-template.dot</o:Template>\n \
      <o:Subject>Test Plan</o:Subject>\n \
      <o:Author>Dilbagh Chahal</o:Author>\n \
      <o:Company>Nextone Communications</o:Company>\n \
      <o:Title>Test Automation - Test Plan</o:Title>\n \
      </o:DocumentProperties>\n \
      <o:CustomDocumentProperties>\n \
      <o:DCIdentifier >http://www.xmlw.ie/xml2word/xml2word.xml</o:DCIdentifier>\n \
      </o:CustomDocumentProperties>\n \
      </xml>\n \
      <style><!--\n \
       /* Font Definitions */\n \
      @font-face\n \
      	{font-family:Wingdings;\n \
      	panose-1:5 0 0 0 0 0 0 0 0 0;\n \
      	mso-font-charset:2;\n \
      	mso-generic-font-family:auto;\n \
      	mso-font-pitch:variable;\n \
      	mso-font-signature:0 268435456 0 0 -2147483648 0;}\n \
       /* Style Definitions */\n \
      table {	border-collapse:collapse; \n \
      		border:none;\n \
      		mso-border-alt:solid windowtext .5pt;\n \
      		mso-padding-alt:0in 5.4pt 0in 5.4pt}\n \
      td.td1 {\n \
      	width:131.4pt;\n \
      	border:solid windowtext .5pt;\n \
      	padding:0in 5.4pt 0in 5.4pt\n \
      	border-top:none;\n \
      	mso-border-top-alt:solid windowtext .5pt;}\n \
      td.td2 {\n \
      	width:297.0pt;\n \
      	border-top:none;\n \
      	border-left: none;\n \
      	border-bottom:solid windowtext .5pt;\n \
      	border-right:solid windowtext .5pt;\n \
      	mso-border-top-alt:solid windowtext .5pt;\n \
      	mso-border-left-alt:solid windowtext .5pt;\n \
      	padding:0in 5.4pt 0in 5.4pt}\n \
      td.step {\n \
      	width:30.0pt;\n \
      	border-top:none;\n \
      	border-left: none;\n \
      	border-bottom:solid windowtext .5pt;\n \
      	border-right:solid windowtext .5pt;\n \
      	mso-border-top-alt:solid windowtext .5pt;\n \
      	mso-border-left-alt:solid windowtext .5pt;\n \
      	padding:0in 5.4pt 0in 5.4pt}\n \
      td.action {\n \
      	width:400.0pt;\n \
      	border-top:none;\n \
      	border-left: none;\n \
      	border-bottom:solid windowtext .5pt;\n \
      	border-right:solid windowtext .5pt;\n \
      	mso-border-top-alt:solid windowtext .5pt;\n \
      	mso-border-left-alt:solid windowtext .5pt;\n \
      	padding:0in 5.4pt 0in 5.4pt}\n \
      td.expect {\n \
      	width:250.0pt;\n \
      	border-top:none;\n \
      	border-left: none;\n \
      	border-bottom:solid windowtext .5pt;\n \
      	border-right:solid windowtext .5pt;\n \
      	mso-border-top-alt:solid windowtext .5pt;\n \
      	mso-border-left-alt:solid windowtext .5pt;\n \
      	padding:0in 5.4pt 0in 5.4pt}\n \
      b {mso-bidi-font-weight: normal}\n \
      p.MsoNormal, li.MsoNormal, div.MsoNormal\n \
      	{mso-style-parent:'';\n \
      	margin-top:3.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;}\n \
      h1\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	page-break-after:avoid;\n \
        mso-outline-level:1; \n \
      	font-size:14.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:Arial;\n \
      	mso-bidi-font-family:'Times New Roman';\n \
      	mso-font-kerning:14.0pt;\n \
      	mso-bidi-font-weight:normal;}\n \
      h2\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	page-break-after:avoid;\n \
        mso-outline-level:2; \n \
      	font-size:12.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:Arial;\n \
      	mso-bidi-font-family:'Times New Roman';\n \
      	mso-bidi-font-weight:normal;}\n \
      h3\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	page-break-after:avoid;\n \
        mso-outline-level:3; \n \
      	font-size:12.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:Arial;\n \
      	mso-bidi-font-family:'Times New Roman';\n \
      	font-weight:normal;\n \
      	font-style:italic;\n \
      	mso-bidi-font-style:normal;}\n \
      h4\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	page-break-after:avoid;\n \
        mso-outline-level:4; \n \
      	font-size:12.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:Arial;\n \
      	mso-bidi-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;\n \
      	mso-bidi-font-weight:normal;}\n \
      h5\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
        mso-outline-level:5; \n \
      	font-size:11.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:Arial;\n \
      	mso-bidi-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;\n \
      	font-weight:normal;}\n \
      h6\n \
      	{mso-style-next:Normal;\n \
      	margin-top:12.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
        mso-outline-level:6; \n \
      	font-size:11.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;\n \
      	font-weight:normal;\n \
      	font-style:italic;\n \
      	mso-bidi-font-style:normal;}\n \
      p.MsoHeading7, li.MsoHeading7, div.MsoHeading7\n \
      	{mso-style-next:Normal;\n \
      	margin-top:3.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	page-break-after:avoid;\n \
      	mso-outline-level:7;\n \
      	font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;}\n \
      p.NexProcStepNum, li.NexProcStepNum, div.NexProcStepNum\n \
      	{mso-style-name:NexProcStepNum;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	text-align:center;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	mso-bidi-font-size:12.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      p.NexProcAction, li.NexProcAction, div.NexProcAction\n \
      	{mso-style-name:NexProcAction;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      p.NexProcExpect, li.NexProcExpect, div.NexProcExpect\n \
      	{mso-style-name:NexProcExpect;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	mso-bidi-font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      p.NexTestSubhead, li.NexTestSubhead, div.NexTestSubhead\n \
      	{mso-style-name:NexTestSubhead;\n \
      	margin-top:6.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:0in;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;\n \
      	font-weight:bold;\n \
      	mso-bidi-font-weight:normal;\n \
      	text-decoration:underline;\n \
      	text-underline:single;}\n \
      p.NexTestPara, li.NexTestPara, div.NexTestPara\n \
      	{mso-style-name:NexTestPara;\n \
      	margin-top:3.0pt;\n \
      	margin-right:0in;\n \
      	margin-bottom:3.0pt;\n \
      	margin-left:.3in;\n \
      	text-align:justify;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';\n \
      	mso-ansi-language:EN-IE;}\n \
      p.NexProcTableTitle, li.NexProcTableTitle, div.NexProcTableTitle\n \
      	{mso-style-name:NexProcTableTitle;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	text-align:center;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:10.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';\n \
      	font-weight:bold;\n \
      	mso-bidi-font-weight:normal;}\n \
      p.NexProcTableStep, li.NexProcTableSteps, div.NexProcTableSteps\n \
      	{mso-style-name:NexProcTableSteps;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	text-align:center;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      p.NexProcTableAction, li.NexProcTableAction, div.NexProcTableAction\n \
      	{mso-style-name:NexProcTableAction;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      p.NexProcTableExpect, li.NexProcTableExpect, div.NexProcTableExpect\n \
      	{mso-style-name:NexProcTableExpect;\n \
      	margin:0in;\n \
      	margin-bottom:.0001pt;\n \
      	mso-pagination:widow-orphan;\n \
      	font-size:9.0pt;\n \
      	font-family:'Times New Roman';\n \
      	mso-fareast-font-family:'Times New Roman';}\n \
      @page Section1\n \
      	{size:8.5in 11.0in;\n \
      	margin:1.0in 1.25in 1.0in 1.25in;\n \
      	mso-header-margin:.5in;\n \
      	mso-footer-margin:.5in;\n \
      	mso-forms-protection:no;\n \
      	mso-paper-source:0;}\n \
      div.Section1\n \
      	{page:Section1;}\n \
       /* List Definitions */\n \
      @list l0\n \
      	{mso-list-id:-132;\n \
      	mso-list-type:simple;\n \
      	mso-list-template-ids:-1155358366;}\n \
      @list l0:level1\n \
      	{mso-level-tab-stop:1.25in;\n \
      	mso-level-number-position:left;\n \
      	margin-left:1.25in;\n \
      	text-indent:-.25in;}\n \
      ol\n \
      	{margin-bottom:0in;}\n \
      ul\n \
      	{margin-bottom:0in;}\n \
      -->\n \
      </style>\n \
      </head>\n \
      "
      
    self.testPlan = open(fileName,"w")

    self.testPlan.write("%s" % self.wordDocPreamble)
    self.testPlan.write("<body>\n")

    self.testPlan.write("<h1 class='MsoHeading1'>Automation Test Cases</h1>\n")

    self.name           = []
    self.objective      = []
    self.prerequisite   = []
    self.resource       = []
    self.procedure      = []
    self.procedure_step = []
    self.reference      = []
    self.caveat         = []


  def writeTestCase(self, testCaseDesc, testCaseHeading):
    """parses the markup test description and constructs various components of test
       documentation and then prints them out to the word document.
    """
    self.name           = []
    self.objective      = []
    self.prerequisite   = []
    self.resource       = []
    self.procedure      = []
    self.procedure_step = []
    self.reference      = []
    self.caveat         = []
    self.section = ''
    for lines in testCaseDesc.split('\n'):
  
      lines = lines.strip()
      if lines == '':
        continue

      if (lines.startswith('@name')) \
         or ((self.section == 'name') and (not lines.startswith('@'))):
        self.section = 'name'
        lines = lines.replace('@name','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.name.append(lines)
        continue
  
      if (lines.startswith('@objective')) \
         or ((self.section == 'objective') and (not lines.startswith('@'))):
        self.section = 'objective'
        lines = lines.replace('@objective','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.objective.append(lines)
        continue
  
      if (lines.startswith('@procedure_step')) \
         or ((self.section == 'procedure_step') and (not lines.startswith('@'))):
        self.section = 'procedure_step'
        lines = lines.replace('@procedure_step','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.procedure_step.append((lines, ''))
        continue
  
      if (lines.startswith('@expect')) \
         or ((self.section == 'expect') and (not lines.startswith('@'))):
        self.section = 'expect'
        lines = lines.replace('@expect','',1)
        lines = lines.strip()
        if lines == '':
          continue
        step, result = self.procedure_step.pop()
        self.procedure_step.append((step, lines))
        continue

      if (lines.startswith('@procedure')) \
         or ((self.section == 'procedure') and (not lines.startswith('@'))):
        self.section = 'procedure'
        lines = lines.replace('@procedure','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.procedure.append(lines)
        continue

      if (lines.startswith('@reference')) \
         or ((self.section == 'reference') and (not lines.startswith('@'))):
        self.section = 'reference'
        lines = lines.replace('@reference','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.reference.append(lines)
        continue

      if (lines.startswith('@prerequisite')) \
         or ((self.section == 'prerequisite') and (not lines.startswith('@'))):
        self.section = 'prerequisite'
        lines = lines.replace('@prerequisite','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.prerequisite.append(lines)
        continue

      if (lines.startswith('@resource')) \
         or ((self.section == 'resource') and (not lines.startswith('@'))):
        self.section = 'resource'
        lines = lines.replace('@resource','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.resource.append(lines)
        continue

      if (lines.startswith('@caveats')) \
         or ((self.section == 'caveats') and (not lines.startswith('@'))):
        self.section = 'resource'
        lines = lines.replace('@caveats','',1)
        lines = lines.strip()
        if lines == '':
          continue
        self.caveat.append(lines)
        continue

    #print the sections of test documents

    #dont write a test case if procedure steps are not defined.
    if len(self.procedure) == 0:
        return

    self.__writeHeading(testCaseHeading)

    self.testPlan.write("<p class=NexTestSubhead>Test Name:</p>");
    for obj in self.name:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % obj)

    self.testPlan.write("<p class=NexTestSubhead>Objectives:</p>");
    for obj in self.objective:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % obj)

    self.testPlan.write("<p class=NexTestSubhead>Procedure:</p>");
    for proc in self.procedure:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % proc)

    self.testPlan.write("<table width='700' border='2' style='margin-left:35.7pt'>")
    self.testPlan.write("<tr>")
    self.testPlan.write("<td class='step'><p class=NexProcTableTitle>Steps</p></td>")
    self.testPlan.write("<td class='action'><p class=NexProcTableTitle>Action</p></td>")
    self.testPlan.write("<td class='expect'><p class=NexProcTableTitle>Expectation</p></td>")

    stepCount=1
    for step, result in self.procedure_step:
      self.testPlan.write("<tr>")
      self.testPlan.write("<td class='step'><p class=NexProcTableStep>%s</p></td>" % stepCount)
      self.testPlan.write("<td class='action'><p class=NexProcTableAction>%s</p></td>" % step)
      self.testPlan.write("<td class='expect'><p class=NexProcTableExpect>%s</p></td>" % result)
      stepCount += 1
      self.testPlan.write("</tr>")

    self.testPlan.write("</table>")

    self.testPlan.write("<p class='MsoNormal'/>")

    self.testPlan.write("<p class=NexTestSubhead>Reference:</p>");
    for refer in self.reference:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % refer)

    self.testPlan.write("<p class=NexTestSubhead>Prerequisite:</p>");
    for prereq in self.prerequisite:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % prereq)

    self.testPlan.write("<p class=NexTestSubhead>Resources:</p>");
    for resource in self.resource:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % resource)

    self.testPlan.write("<p class=NexTestSubhead>Caveats:</p>");
    for caveat in self.caveat:
        self.testPlan.write("<p class=NexTestPara>%s</p>" % caveat)

    #put a page beak after the test case
    self.testPlan.write("<br clear=all style='page-break-before:always'>")


  def __writeHeading(self, heading):
    """Write headers into word document based on test classification headers.
    """
    self.newHeadings = heading.split('.')
    if self.newHeadings != self.headings:
      #headings dont match, create a heading
      if len(self.newHeadings) > len(self.headings):
          indexRange = len(self.headings)
      else:
          indexRange = len(self.newHeadings)

      for index in range(indexRange):
        if (self.newHeadings[index] != self.headings[index]):
          for index2 in range(index,indexRange):
            self.testPlan.write("<h%s>%s</h%s>" % (index2+2, self.newHeadings[index2], index2+2))
          break
      for index2 in range(indexRange,len(self.newHeadings)):
        self.testPlan.write("<h%s>%s</h%s>" % (index2+2, self.newHeadings[index2], index2+2))

      self.headings = self.newHeadings

  def __del__(self):
    self.testPlan.write('</body>\n')
    self.testPlan.write('</html>\n')
    self.testPlan.close()
  
if __name__ == '__main__':

  sampleDocString = "@name Test Plan Creation\n\
     @objective To Test if creation of calling plan with various possible valid names succeeds\n \
     @caveats      None \n \
     @prerequisite requisite A, requisite B \n \
                   requisite C \n \
     @resource     resource A, resource B\n \
                   resource C\n\
     @procedure The following procedure steps are defined for testing test plan creation\n \
     @procedure_step Create Calling Plan Name abcd \n \
     @expect abc \n \
     @procedure_step Create Calling Plan Name @@@ \n \
     @expect abc \n \
     @procedure_step Create Calling Plan Name 123 \n \
     @expect abc \n \
     @procedure_step Create Calling Plan Name _abc \n \
     @expect abc \n \
     @procedure_step Create Calling Plan Name as% \n \
     @expect abc \n \
     @procedure_step Create Calling Plan Name a.b.c \n \
     @expect abc \n \
     @reference None \n \
     " 

  myWordDoc = WordDocument('testWordDoc') 
  myWordDoc.writeTestCase(sampleDocString,"production_components.isdncodes")


  
