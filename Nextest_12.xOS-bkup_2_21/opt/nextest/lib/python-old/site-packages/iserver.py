"""
Process the iServer database.
"""
from   dlog import *
from   types import *
import session
import string
import unittest
from   xml import sax
import xmlcommon

# New types for things found in the iserver DB.
# To add a new tag:
#    1. create a new class and type for it below
#    2. add the XML tag and the class name to IServerHandler.dispatch
#    3. add the human name and class name to the types table

class CallingPlan(DictionaryType):
    "A calling plan"
CallingPlanType = iplan = type(CallingPlan())

class Endpoint(DictionaryType):
    "An endpoint"
EndpointType = iendpoint = type(Endpoint())

class Realm(DictionaryType):
    "A realm."
RealmType = irealm = type(Realm())

class Route(DictionaryType):
    "A call route"
RouteType = iroute = type(Route())

class RouteBinding(DictionaryType):
    "A calling plan/route binding"
RouteBindingType = ibinding = type(RouteBinding())

class Trigger(DictionaryType):
    "A trigger"
TriggerType = itrigger = type(Trigger())

class VPN(DictionaryType):
    "A virtual private network"
VPNType = ivpn = type(VPN())

# The following dictionary is used by QMTest to learn what object
# types are defined for the iserver module.  This helps to keep the
# QMTest extensions from having duplicate code. 
types = {'Calling Plan'	: CallingPlan,
         'Endpoint'	: Endpoint,
         'Realm'	: Realm,
         'Route'	: Route,
         'Binding'	: RouteBinding,
         'Trigger'	: Trigger,
         'VPN'		: VPN
         }

class IServer(ListType):
    def __init__(self, msw):
        """
        A list of objects in the iServer database.

        The msw argument can either be a string containing the XML
        contents of the database or a session object.  If a session is
        passed, it will be used to get the database.

        Each type is a callable object (for use in XML parser
        dispatching) and has an associated long name and a more
        convenient short name for use in test scripts.  Beware of the
        short names when using 'from iserver import *' - they are
        common and could collide with test script objects.  First
        character is capitalized.
        """
        if type(msw) is ListType:
            # A text stream created by file.readlines()
            self.rawXml = string.join(msw)
        else:
            self.msw = msw
            self._getDatabaseFromMSW()
        parser = sax.make_parser()
        handler = IServerHandler()
        sax.parseString(self.rawXml, handler)
        for i in handler.objList:
            self.append(i)

    def assert_(self, itype, key, value):
        """
        DEPRECATED: see getByName()
        
        Assert that at least one object of type itype object contains
        the key and value specified.

        Select itype from the following list:

        	Binding, Endpoint, Plan, Realm, Route, Trigger
        """
        # Use an extremely cool list comprehension to extract objects
        # matching itype 
        typematch = [x for x in self if type(x) == itype]
        dlog(['type matches:', str(len(typematch))])
        keymatch = [x for x in typematch if x.has_key(key)]
        dlog(['key matches:', str(len(keymatch))])
        valmatch = [x for x in keymatch if x[key] == value]
        dlog(['value matches:', str(len(valmatch))])
        if len(valmatch) > 0: return True
        return False

    def getByName(self, itype, name):
        """Fetch object(s) of a specified type by name.

        More than one object may be returned.  It's up to the caller
        to to verify the list.

        Not all objects have a clearly defined name. Bindings are
        consist of a plan name and a route name.  This many-to-many
        relationship means a "getByName" isn't really appropriate so
        may return more than one match.
        """
        if itype == iplan or itype == ibinding:
            lookup = 'CP_NAME'
        elif itype == iroute:
            lookup = 'CR_NAME'
        elif itype == irealm:
            lookup = 'RM_NAME'
        elif itype == iendpoint:
            lookup = 'SRNO'
        else:
            raise KeyError('getByName() does not handle requested type')
        
        objects = [x for x in self if type(x) == itype]
        count = len(objects)
        dlog('found %s matching objects' % count)
        if count == 0:
            raise ValueError('iServer object "%s" not found' % name)
        z = [x for x in objects if x[lookup] == name]
        return z
    
    def refresh(self):
        "Update the local database cache."
        self._getDatabaseFromMSW()
        
    def _getDatabaseFromMSW(self):
        self.rawXml = self.msw.filter(
            'cli db export /tmp/i.xml ; cat /tmp/i.xml')
        #print self.rawXml

class BadFileStructure(Exception):
    def __str__(self):
        return """
        There is no opening <DB> tag in the iServer XML file that
        you are attempting to process.  Please ensure that this file
        was generated by the 'cli db export' command."""
    
class IServerHandler(sax.ContentHandler):
    """XML SAX handler for parsing the iServer database.

    Creates an object for each first-level element in the database.
    Nested elements are attributes for that object.  Objects are
    created via a dispatch table.

    Each object is an instance of one of the iserver classes, which
    are all based on Python DictionaryType.  (The reason new types
    were defined was to make it easy for SAX handler to dispatch
    object creation based on an element name.)  Each object has
    attributes named according to the contents of the iServer XML
    file, so this module requires no intelligence about what an object
    should contain."""
    
    dispatch = {'CP'  : CallingPlan,
                'CPB' : RouteBinding,
                'CR'  : Route,
                'E'   : Endpoint,
                'RM'  : Realm,
                'TRG' : Trigger,
                'V'   : VPN
                }
    def __init__(self):
        self.currThing = None
        self.currType = None
        self.currAttr = None
        self.value = ''
        self.inputIsDB = False
        self.objList = []
        
    def startElement(self, name, attributes):
        if name == 'DB':
            dlog('found database')
            self.inputIsDB = True
            return
        elif not self.inputIsDB:
            raise BadFileStructure
        if self.currType:
            dlog(['Capturing attribute', name])
            self.currAttr = name
        else:
            dlog(['Creating object', name])
            if name not in self.dispatch.keys():
                raise xmlcommon.UnknownTagError(name)
            self.currThing = self.dispatch[name]()
            self.currType = name
            
    def endElement(self, name):
        if name == self.currAttr:
            dlog(['Finished attribute', name])
            self.currThing[name] = xmlcommon.normalize(self.value)
        elif name == self.currType:
            dlog('Appending finished object to list')
            self.objList.append(self.currThing)
            self.currThing = None
            self.currType = None
            self.currAttr = None
        elif name == 'DB':
            dlog('End of database reached')
        self.value = ''
            
    def characters(self, text):
        # Don't save stuff that isn't associated with a tag we
        # don't care about.
        if self.currType:
            dlog(['got text:', text])
            self.value += text

######################################################################
## Unit tests
######################################################################
class IserverStringTest(unittest.TestCase):
    def setUp(self):
        f = open('test/db.xml')
        self.m = f.readlines()
        f.close()
        
    def testDB(self):
        "Pass a string database into the constructor"
        i = IServer(self.m)
        a = i.assert_(irealm, 'RM_NAME', 'rpublic')
        b = i.assert_(itrigger, 'TRG_NAME', 'mytrig')
        c = i.assert_(ibinding, 'CR_NAME', 'myroute')
        self.assert_(a == b == c == True)
        
class IserverSessionTest(unittest.TestCase):
    def setUp(self):
        self.m = session.SSH(['root@mymsw'])

    def testDB(self):
        "Pass a session to the constructor - subject to DB contents!"
        i = IServer(self.m)
        a = i.assert_(irealm, 'RM_NAME', 'rpublic')
        b = i.assert_(itrigger, 'TRG_NAME', 'mytrig')
        c = i.assert_(ibinding, 'CR_NAME', 'myroute')
        self.assert_(a == b == c == True)

# TODO negative tests - bad tags, bad files, etc.

if __name__ == '__main__':
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(IserverSessionTest))
    unittest.TextTestRunner().run(suite)
