import os
def readCauseCodeInputFile(inputPath,scenario):

    """ Comments!"""

    # Create the input list based on the scenario. For h323 cases,
    # ISDN CAUSE CODE section should be parsed and for SIP cases,
    # SIP RESPONSE CODE section should be parsed
    if scenario == 'h323_h323' or scenario == 'sip_h323':
        strBegin = 'MAPPING AND HUNTING CONFIGURATION FOR ISDN CAUSE CODES\n'
        strEnd='-----------------------------'
    elif scenario == 'h323_sip':
        strBegin = 'MAPPING AND HUNTING CONFIGURATION FOR SIP RESPONSE CODES\n'

    f1 = open(inputPath + 'codemap_Input.txt','r')
    files = f1.readlines()
    f1.close()

    str = files[0].strip('\n')
    str = str.strip('codemap_')
    tempList = str.split('.')

    finalLst=[]
    for filename in files:
        filename = filename.strip('\n')
        f1 = open(inputPath + filename, 'r')
        contentList = f1.readlines()
        f1.close()
        
        filename = filename.strip('.txt')
        ind = contentList.index(strBegin)
        contentList = contentList[ind+4:]
        tmpList = []

        if scenario=='sip_h323' or scenario=='h323_h323': 
            for content in contentList:
                if content.__contains__(strEnd):
                    break
                tmpList.append(content)
        else:
            tmpList = contentList    

        for content in tmpList:
            tmpl1 = content.strip('\n').split(' ')
            finalDict = {}
            val = []
            for tmpstr in tmpl1:
                if not tmpstr=='':
                    val.append(tmpstr)

            # Test case name will contain the code map file name and cause code
            # that is being tested
            finalDict={'testName':filename + '.' + val[0] ,'origCode':val[0], \
                       'hunt':val[1],'newCode':val[2],'sipCode':val[3]}

            # Cause codes that are mapped to -1 need not be tested
            # Hence do not include in the final list of cause codes that are to
            # be tested
            if finalDict['newCode'] != '-1':
                finalLst.append(finalDict)

    return finalLst,tempList[0]

def CopyCodeMapFile(inputPath):

    f1 = open(inputPath + 'codemap_Input.txt','r')
    files = f1.readlines()
    f1.close()

    # Copy the code map file from MSW to the Nextest
    # database causecode_new.qms sub-directory 
    for filename in files:
        filename = filename.strip('\n' )
        os.system("scp -q root@mymsw:/usr/local/nextone/bin/%s %s" %(filename,inputPath))

def DeleteCodeMapFile(inputPath):

    f1 = open(inputPath + 'codemap_Input.txt','r')
    files = f1.readlines()
    f1.close()

    for filename in files:
        filename = filename.strip('\n' )
        os.system("rm -rf %s%s" %(inputPath,filename))
